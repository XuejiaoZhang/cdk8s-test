"use strict";
const assert_1 = require("@aws-cdk/assert");
const codepipeline = require("@aws-cdk/aws-codepipeline");
const s3 = require("@aws-cdk/aws-s3");
const core_1 = require("@aws-cdk/core");
const cpactions = require("../../lib");
function minimalPipeline(stack, options = {}) {
    const sourceOutput = new codepipeline.Artifact();
    const sourceAction = new cpactions.GitHubSourceAction({
        actionName: 'Source',
        owner: 'aws',
        repo: 'aws-cdk',
        output: sourceOutput,
        oauthToken: core_1.SecretValue.plainText('secret'),
    });
    const pipeline = new codepipeline.Pipeline(stack, 'MyPipeline', {
        stages: [
            {
                stageName: 'Source',
                actions: [sourceAction],
            }
        ]
    });
    const deploymentStage = pipeline.addStage({
        stageName: 'Deploy',
        actions: [
            new cpactions.S3DeployAction({
                accessControl: options.accessControl,
                actionName: 'CopyFiles',
                bucket: options.bucket || new s3.Bucket(stack, 'MyBucket'),
                cacheControl: options.cacheControl,
                extract: options.extract,
                input: sourceOutput,
                objectKey: options.objectKey,
            }),
        ],
    });
    return deploymentStage;
}
module.exports = {
    'S3 Deploy Action': {
        'by default extract artifacts'(test) {
            const stack = new core_1.Stack();
            minimalPipeline(stack);
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodePipeline::Pipeline', {
                "Stages": [
                    {
                        "Name": "Source",
                        "Actions": [
                            {
                                "Name": "Source",
                                "ActionTypeId": {
                                    "Category": "Source",
                                    "Owner": "ThirdParty"
                                }
                            },
                        ]
                    },
                    {
                        "Name": "Deploy",
                        "Actions": [
                            {
                                "ActionTypeId": {
                                    "Category": "Deploy",
                                    "Provider": "S3",
                                },
                                "Configuration": {
                                    "Extract": "true"
                                },
                                "Name": "CopyFiles"
                            }
                        ]
                    }
                ],
            }));
            test.done();
        },
        'grant the pipeline correct access to the target bucket'(test) {
            const stack = new core_1.Stack();
            minimalPipeline(stack);
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::IAM::Policy', {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:GetObject*",
                                "s3:GetBucket*",
                                "s3:List*",
                                "s3:DeleteObject*",
                                "s3:PutObject*",
                                "s3:Abort*"
                            ]
                        },
                        {},
                        {
                            "Effect": "Allow",
                            "Action": "sts:AssumeRole"
                        }
                    ]
                }
            }));
            test.done();
        },
        'kebab-case CannedACL value'(test) {
            const stack = new core_1.Stack();
            minimalPipeline(stack, {
                accessControl: s3.BucketAccessControl.PUBLIC_READ_WRITE
            });
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodePipeline::Pipeline', {
                "Stages": [
                    {},
                    {
                        "Actions": [
                            {
                                "Configuration": {
                                    "CannedACL": "public-read-write"
                                }
                            }
                        ]
                    }
                ]
            }));
            test.done();
        },
        'allow customizing cache-control'(test) {
            const stack = new core_1.Stack();
            minimalPipeline(stack, {
                cacheControl: [
                    cpactions.CacheControl.setPublic(),
                    cpactions.CacheControl.maxAge(core_1.Duration.hours(12)),
                ]
            });
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodePipeline::Pipeline', {
                "Stages": [
                    {},
                    {
                        "Actions": [
                            {
                                "Configuration": {
                                    "CacheControl": "public, max-age: 43200"
                                }
                            }
                        ]
                    }
                ]
            }));
            test.done();
        },
        'allow customizing objectKey (deployment path on S3)'(test) {
            const stack = new core_1.Stack();
            minimalPipeline(stack, {
                objectKey: "/a/b/c"
            });
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodePipeline::Pipeline', {
                "Stages": [
                    {},
                    {
                        "Actions": [
                            {
                                "Configuration": {
                                    "ObjectKey": "/a/b/c"
                                }
                            }
                        ]
                    }
                ]
            }));
            test.done();
        }
    }
};
//# sourceMappingURL=data:application/json;base64,