"use strict";
const assert_1 = require("@aws-cdk/assert");
const codebuild = require("@aws-cdk/aws-codebuild");
const codepipeline = require("@aws-cdk/aws-codepipeline");
const s3 = require("@aws-cdk/aws-s3");
const core_1 = require("@aws-cdk/core");
const cpactions = require("../../lib");
function minimalPipeline(stack, options = {}) {
    const sourceOutput = new codepipeline.Artifact();
    const pipeline = new codepipeline.Pipeline(stack, 'MyPipeline');
    const sourceStage = pipeline.addStage({
        stageName: 'Source',
        actions: [
            new cpactions.S3SourceAction({
                actionName: 'Source',
                bucket: options.bucket || new s3.Bucket(stack, 'MyBucket'),
                bucketKey: options.bucketKey || 'some/path/to',
                output: sourceOutput,
                trigger: options.trigger,
            }),
        ],
    });
    pipeline.addStage({
        stageName: 'Build',
        actions: [
            new cpactions.CodeBuildAction({
                actionName: 'Build',
                project: new codebuild.PipelineProject(stack, 'MyProject'),
                input: sourceOutput,
            }),
        ],
    });
    return sourceStage;
}
module.exports = {
    'S3 Source Action': {
        'by default polls for source changes and does not use Events'(test) {
            const stack = new core_1.Stack();
            minimalPipeline(stack, undefined);
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodePipeline::Pipeline', {
                "Stages": [
                    {
                        "Actions": [
                            {
                                "Configuration": {},
                            },
                        ],
                    },
                    {},
                ],
            }));
            assert_1.expect(stack).to(assert_1.not(assert_1.haveResourceLike('AWS::Events::Rule')));
            test.done();
        },
        'does not poll for source changes and uses Events for S3Trigger.EVENTS'(test) {
            const stack = new core_1.Stack();
            minimalPipeline(stack, { trigger: cpactions.S3Trigger.EVENTS });
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodePipeline::Pipeline', {
                "Stages": [
                    {
                        "Actions": [
                            {
                                "Configuration": {
                                    "PollForSourceChanges": false,
                                },
                            },
                        ],
                    },
                    {},
                ],
            }));
            assert_1.expect(stack).to(assert_1.countResources('AWS::Events::Rule', 1));
            test.done();
        },
        'polls for source changes and does not use Events for S3Trigger.POLL'(test) {
            const stack = new core_1.Stack();
            minimalPipeline(stack, { trigger: cpactions.S3Trigger.POLL });
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodePipeline::Pipeline', {
                "Stages": [
                    {
                        "Actions": [
                            {
                                "Configuration": {
                                    "PollForSourceChanges": true,
                                },
                            },
                        ],
                    },
                    {},
                ],
            }));
            assert_1.expect(stack).to(assert_1.not(assert_1.haveResourceLike('AWS::Events::Rule')));
            test.done();
        },
        'does not poll for source changes and does not use Events for S3Trigger.NONE'(test) {
            const stack = new core_1.Stack();
            minimalPipeline(stack, { trigger: cpactions.S3Trigger.NONE });
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodePipeline::Pipeline', {
                "Stages": [
                    {
                        "Actions": [
                            {
                                "Configuration": {
                                    "PollForSourceChanges": false,
                                },
                            },
                        ],
                    },
                    {},
                ],
            }));
            assert_1.expect(stack).to(assert_1.not(assert_1.haveResourceLike('AWS::Events::Rule')));
            test.done();
        },
        'does not allow passing an empty string for the bucketKey property'(test) {
            const stack = new core_1.Stack();
            test.throws(() => {
                new cpactions.S3SourceAction({
                    actionName: 'Source',
                    bucket: new s3.Bucket(stack, 'MyBucket'),
                    bucketKey: '',
                    output: new codepipeline.Artifact(),
                });
            }, /Property bucketKey cannot be an empty string/);
            test.done();
        },
        'allows using the same bucket with events trigger mutliple times with different bucket paths'(test) {
            const stack = new core_1.Stack();
            const bucket = new s3.Bucket(stack, 'MyBucket');
            const sourceStage = minimalPipeline(stack, {
                bucket,
                bucketKey: 'my/path',
                trigger: cpactions.S3Trigger.EVENTS,
            });
            sourceStage.addAction(new cpactions.S3SourceAction({
                actionName: 'Source2',
                bucket,
                bucketKey: 'my/other/path',
                trigger: cpactions.S3Trigger.EVENTS,
                output: new codepipeline.Artifact(),
            }));
            test.done();
        },
        'throws an error if the same bucket and path with trigger = Events are added to the same pipeline twice'(test) {
            const stack = new core_1.Stack();
            const bucket = new s3.Bucket(stack, 'MyBucket');
            const sourceStage = minimalPipeline(stack, {
                bucket,
                bucketKey: 'my/path',
                trigger: cpactions.S3Trigger.EVENTS,
            });
            sourceStage.addAction(new cpactions.S3SourceAction({
                actionName: 'Source2',
                bucket,
                bucketKey: 'my/other/path',
                trigger: cpactions.S3Trigger.EVENTS,
                output: new codepipeline.Artifact(),
            }));
            const duplicateBucketAndPath = new cpactions.S3SourceAction({
                actionName: 'Source3',
                bucket,
                bucketKey: 'my/other/path',
                trigger: cpactions.S3Trigger.EVENTS,
                output: new codepipeline.Artifact(),
            });
            test.throws(() => {
                sourceStage.addAction(duplicateBucketAndPath);
            }, /S3 source action with path 'my\/other\/path' is already present in the pipeline for this source bucket/);
            test.done();
        },
        'exposes variables for other actions to consume'(test) {
            const stack = new core_1.Stack();
            const sourceOutput = new codepipeline.Artifact();
            const s3SourceAction = new cpactions.S3SourceAction({
                actionName: 'Source',
                output: sourceOutput,
                bucket: new s3.Bucket(stack, 'Bucket'),
                bucketKey: 'key.zip',
            });
            new codepipeline.Pipeline(stack, 'Pipeline', {
                stages: [
                    {
                        stageName: 'Source',
                        actions: [s3SourceAction],
                    },
                    {
                        stageName: 'Build',
                        actions: [
                            new cpactions.CodeBuildAction({
                                actionName: 'Build',
                                project: new codebuild.PipelineProject(stack, 'MyProject'),
                                input: sourceOutput,
                                environmentVariables: {
                                    VersionId: { value: s3SourceAction.variables.versionId },
                                },
                            }),
                        ],
                    },
                ],
            });
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodePipeline::Pipeline', {
                "Stages": [
                    {
                        "Name": "Source",
                    },
                    {
                        "Name": "Build",
                        "Actions": [
                            {
                                "Name": "Build",
                                "Configuration": {
                                    "EnvironmentVariables": '[{"name":"VersionId","type":"PLAINTEXT","value":"#{Source_Source_NS.VersionId}"}]',
                                },
                            },
                        ],
                    },
                ],
            }));
            test.done();
        },
    },
};
//# sourceMappingURL=data:application/json;base64,