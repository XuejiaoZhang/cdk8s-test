"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const iam = require("@aws-cdk/aws-iam");
const sfn = require("@aws-cdk/aws-stepfunctions");
const cdk = require("@aws-cdk/core");
const emr_create_cluster_1 = require("./emr-create-cluster");
const resource_arn_suffix_1 = require("./resource-arn-suffix");
/**
 * A Step Functions Task to to modify an InstanceGroup on an EMR Cluster.
 *
 * @experimental
 */
class EmrModifyInstanceGroupByName {
    constructor(props) {
        this.props = props;
    }
    bind(_task) {
        return {
            resourceArn: resource_arn_suffix_1.getResourceArn('elasticmapreduce', 'modifyInstanceGroupByName', sfn.ServiceIntegrationPattern.FIRE_AND_FORGET),
            policyStatements: [
                new iam.PolicyStatement({
                    actions: [
                        'elasticmapreduce:ModifyInstanceGroups',
                        'elasticmapreduce:ListInstanceGroups'
                    ],
                    resources: [`arn:aws:elasticmapreduce:${cdk.Aws.REGION}:${cdk.Aws.ACCOUNT_ID}:cluster/*`]
                })
            ],
            parameters: {
                ClusterId: this.props.clusterId,
                InstanceGroupName: this.props.instanceGroupName,
                InstanceGroup: EmrModifyInstanceGroupByName.InstanceGroupModifyConfigPropertyToJson(this.props.instanceGroup)
            }
        };
    }
}
exports.EmrModifyInstanceGroupByName = EmrModifyInstanceGroupByName;
(function (EmrModifyInstanceGroupByName) {
    /**
     * Render the InstanceResizePolicyProperty to JSON
     *
     * @param property
     */
    function InstanceResizePolicyPropertyToJson(property) {
        var _a;
        return {
            InstancesToProtect: cdk.listMapper(cdk.stringToCloudFormation)(property.instancesToProtect),
            InstancesToTerminate: cdk.listMapper(cdk.stringToCloudFormation)(property.instancesToTerminate),
            InstanceTerminationTimeout: cdk.numberToCloudFormation((_a = property.instanceTerminationTimeout) === null || _a === void 0 ? void 0 : _a.toSeconds())
        };
    }
    EmrModifyInstanceGroupByName.InstanceResizePolicyPropertyToJson = InstanceResizePolicyPropertyToJson;
    /**
     * Render the ShrinkPolicyProperty to JSON
     *
     * @param property
     */
    function ShrinkPolicyPropertyToJson(property) {
        var _a;
        return {
            DecommissionTimeout: cdk.numberToCloudFormation((_a = property.decommissionTimeout) === null || _a === void 0 ? void 0 : _a.toSeconds()),
            InstanceResizePolicy: (property.instanceResizePolicy === undefined) ?
                property.instanceResizePolicy :
                InstanceResizePolicyPropertyToJson(property.instanceResizePolicy)
        };
    }
    EmrModifyInstanceGroupByName.ShrinkPolicyPropertyToJson = ShrinkPolicyPropertyToJson;
    /**
     * Render the InstanceGroupModifyConfigPropety to JSON
     *
     * @param property
     */
    function InstanceGroupModifyConfigPropertyToJson(property) {
        return {
            Configurations: cdk.listMapper(emr_create_cluster_1.EmrCreateCluster.ConfigurationPropertyToJson)(property.configurations),
            EC2InstanceIdsToTerminate: cdk.listMapper(cdk.stringToCloudFormation)(property.eC2InstanceIdsToTerminate),
            InstanceCount: cdk.numberToCloudFormation(property.instanceCount),
            ShrinkPolicy: (property.shrinkPolicy === undefined) ?
                property.shrinkPolicy :
                ShrinkPolicyPropertyToJson(property.shrinkPolicy)
        };
    }
    EmrModifyInstanceGroupByName.InstanceGroupModifyConfigPropertyToJson = InstanceGroupModifyConfigPropertyToJson;
})(EmrModifyInstanceGroupByName = exports.EmrModifyInstanceGroupByName || (exports.EmrModifyInstanceGroupByName = {}));
//# sourceMappingURL=data:application/json;base64,