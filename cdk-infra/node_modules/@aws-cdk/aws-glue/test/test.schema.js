"use strict";
const lib_1 = require("../lib");
module.exports = {
    'boolean type'(test) {
        test.equals(lib_1.Schema.BOOLEAN.inputString, 'boolean');
        test.equals(lib_1.Schema.BOOLEAN.isPrimitive, true);
        test.done();
    },
    'binary type'(test) {
        test.equals(lib_1.Schema.BINARY.inputString, 'binary');
        test.equals(lib_1.Schema.BINARY.isPrimitive, true);
        test.done();
    },
    'bigint type'(test) {
        test.equals(lib_1.Schema.BIG_INT.inputString, 'bigint');
        test.equals(lib_1.Schema.BIG_INT.isPrimitive, true);
        test.done();
    },
    'double type'(test) {
        test.equals(lib_1.Schema.DOUBLE.inputString, 'double');
        test.equals(lib_1.Schema.DOUBLE.isPrimitive, true);
        test.done();
    },
    'float type'(test) {
        test.equals(lib_1.Schema.FLOAT.inputString, 'float');
        test.equals(lib_1.Schema.FLOAT.isPrimitive, true);
        test.done();
    },
    'integer type'(test) {
        test.equals(lib_1.Schema.INTEGER.inputString, 'int');
        test.equals(lib_1.Schema.INTEGER.isPrimitive, true);
        test.done();
    },
    'smallint type'(test) {
        test.equals(lib_1.Schema.SMALL_INT.inputString, 'smallint');
        test.equals(lib_1.Schema.SMALL_INT.isPrimitive, true);
        test.done();
    },
    'tinyint type'(test) {
        test.equals(lib_1.Schema.TINY_INT.inputString, 'tinyint');
        test.equals(lib_1.Schema.TINY_INT.isPrimitive, true);
        test.done();
    },
    'decimal type'(test) {
        test.equals(lib_1.Schema.decimal(16).inputString, 'decimal(16)');
        test.equals(lib_1.Schema.decimal(16, 1).inputString, 'decimal(16,1)');
        test.equals(lib_1.Schema.decimal(16).isPrimitive, true);
        test.equals(lib_1.Schema.decimal(16, 1).isPrimitive, true);
        test.done();
    },
    // TODO: decimal bounds
    'date type'(test) {
        test.equals(lib_1.Schema.DATE.inputString, 'date');
        test.equals(lib_1.Schema.DATE.isPrimitive, true);
        test.done();
    },
    'timestamp type'(test) {
        test.equals(lib_1.Schema.TIMESTAMP.inputString, 'timestamp');
        test.equals(lib_1.Schema.TIMESTAMP.isPrimitive, true);
        test.done();
    },
    'string type'(test) {
        test.equals(lib_1.Schema.STRING.inputString, 'string');
        test.equals(lib_1.Schema.STRING.isPrimitive, true);
        test.done();
    },
    'char type'(test) {
        test.equals(lib_1.Schema.char(1).inputString, 'char(1)');
        test.equals(lib_1.Schema.char(1).isPrimitive, true);
        test.done();
    },
    'char length must be at least 1'(test) {
        test.doesNotThrow(() => lib_1.Schema.char(1));
        test.throws(() => lib_1.Schema.char(0));
        test.throws(() => lib_1.Schema.char(-1));
        test.done();
    },
    'char length must be <= 255'(test) {
        test.doesNotThrow(() => lib_1.Schema.char(255));
        test.throws(() => lib_1.Schema.char(256));
        test.done();
    },
    'varchar type'(test) {
        test.equals(lib_1.Schema.varchar(1).inputString, 'varchar(1)');
        test.equals(lib_1.Schema.varchar(1).isPrimitive, true);
        test.done();
    },
    'varchar length must be at least 1'(test) {
        test.doesNotThrow(() => lib_1.Schema.varchar(1));
        test.throws(() => lib_1.Schema.varchar(0));
        test.throws(() => lib_1.Schema.varchar(-1));
        test.done();
    },
    'varchar length must be <= 65535'(test) {
        test.doesNotThrow(() => lib_1.Schema.varchar(65535));
        test.throws(() => lib_1.Schema.varchar(65536));
        test.done();
    },
    'array<string>'(test) {
        const type = lib_1.Schema.array(lib_1.Schema.STRING);
        test.equals(type.inputString, 'array<string>');
        test.equals(type.isPrimitive, false);
        test.done();
    },
    'array<char(1)>'(test) {
        const type = lib_1.Schema.array(lib_1.Schema.char(1));
        test.equals(type.inputString, 'array<char(1)>');
        test.equals(type.isPrimitive, false);
        test.done();
    },
    'array<array>'(test) {
        const type = lib_1.Schema.array(lib_1.Schema.array(lib_1.Schema.STRING));
        test.equals(type.inputString, 'array<array<string>>');
        test.equals(type.isPrimitive, false);
        test.done();
    },
    'array<map>'(test) {
        const type = lib_1.Schema.array(lib_1.Schema.map(lib_1.Schema.STRING, lib_1.Schema.STRING));
        test.equals(type.inputString, 'array<map<string,string>>');
        test.equals(type.isPrimitive, false);
        test.done();
    },
    'array<struct>'(test) {
        const type = lib_1.Schema.array(lib_1.Schema.struct([{
                name: 'key',
                type: lib_1.Schema.STRING
            }]));
        test.equals(type.inputString, 'array<struct<key:string>>');
        test.equals(type.isPrimitive, false);
        test.done();
    },
    'map<string,string>'(test) {
        const type = lib_1.Schema.map(lib_1.Schema.STRING, lib_1.Schema.STRING);
        test.equals(type.inputString, 'map<string,string>');
        test.equals(type.isPrimitive, false);
        test.done();
    },
    'map<int,string>'(test) {
        const type = lib_1.Schema.map(lib_1.Schema.INTEGER, lib_1.Schema.STRING);
        test.equals(type.inputString, 'map<int,string>');
        test.equals(type.isPrimitive, false);
        test.done();
    },
    'map<char(1),char(1)>'(test) {
        const type = lib_1.Schema.map(lib_1.Schema.char(1), lib_1.Schema.char(1));
        test.equals(type.inputString, 'map<char(1),char(1)>');
        test.equals(type.isPrimitive, false);
        test.done();
    },
    'map<string,array>'(test) {
        const type = lib_1.Schema.map(lib_1.Schema.char(1), lib_1.Schema.array(lib_1.Schema.STRING));
        test.equals(type.inputString, 'map<char(1),array<string>>');
        test.equals(type.isPrimitive, false);
        test.done();
    },
    'map<string,map>'(test) {
        const type = lib_1.Schema.map(lib_1.Schema.char(1), lib_1.Schema.map(lib_1.Schema.STRING, lib_1.Schema.STRING));
        test.equals(type.inputString, 'map<char(1),map<string,string>>');
        test.equals(type.isPrimitive, false);
        test.done();
    },
    'map<string,struct>'(test) {
        const type = lib_1.Schema.map(lib_1.Schema.char(1), lib_1.Schema.struct([{
                name: 'key',
                type: lib_1.Schema.STRING
            }]));
        test.equals(type.inputString, 'map<char(1),struct<key:string>>');
        test.equals(type.isPrimitive, false);
        test.done();
    },
    'map throws if keyType is non-primitive'(test) {
        test.throws(() => lib_1.Schema.map(lib_1.Schema.array(lib_1.Schema.STRING), lib_1.Schema.STRING));
        test.throws(() => lib_1.Schema.map(lib_1.Schema.map(lib_1.Schema.STRING, lib_1.Schema.STRING), lib_1.Schema.STRING));
        test.throws(() => lib_1.Schema.map(lib_1.Schema.struct([{
                name: 'key',
                type: lib_1.Schema.STRING
            }]), lib_1.Schema.STRING));
        test.done();
    },
    'struct type'(test) {
        const type = lib_1.Schema.struct([{
                name: 'primitive',
                type: lib_1.Schema.STRING
            }, {
                name: 'with_comment',
                type: lib_1.Schema.STRING,
                comment: 'this has a comment'
            }, {
                name: 'array',
                type: lib_1.Schema.array(lib_1.Schema.STRING)
            }, {
                name: 'map',
                type: lib_1.Schema.map(lib_1.Schema.STRING, lib_1.Schema.STRING)
            }, {
                name: 'nested_struct',
                type: lib_1.Schema.struct([{
                        name: 'nested',
                        type: lib_1.Schema.STRING,
                        comment: 'nested comment'
                    }])
            }]);
        test.equals(type.isPrimitive, false);
        test.equals(type.inputString, 
        // tslint:disable-next-line:max-line-length
        `struct<primitive:string,with_comment:string COMMENT 'this has a comment',array:array<string>,map:map<string,string>,nested_struct:struct<nested:string COMMENT 'nested comment'>>`);
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,