"use strict";
const assert_1 = require("@aws-cdk/assert");
const iam = require("@aws-cdk/aws-iam");
const kms = require("@aws-cdk/aws-kms");
const s3 = require("@aws-cdk/aws-s3");
const cdk = require("@aws-cdk/core");
const glue = require("../lib");
function createTable(props) {
    const stack = new cdk.Stack();
    new glue.Table(stack, 'table', {
        ...props,
        database: new glue.Database(stack, 'db', {
            databaseName: 'database_name',
        }),
        dataFormat: glue.DataFormat.Json
    });
}
module.exports = {
    'unpartitioned JSON table'(test) {
        const app = new cdk.App();
        const dbStack = new cdk.Stack(app, 'db');
        const database = new glue.Database(dbStack, 'Database', {
            databaseName: 'database',
        });
        const tableStack = new cdk.Stack(app, 'table');
        const table = new glue.Table(tableStack, 'Table', {
            database,
            tableName: 'table',
            columns: [{
                    name: 'col',
                    type: glue.Schema.STRING
                }],
            dataFormat: glue.DataFormat.Json,
        });
        test.equals(table.encryption, glue.TableEncryption.UNENCRYPTED);
        assert_1.expect(tableStack).to(assert_1.haveResource('AWS::S3::Bucket', {
            Type: "AWS::S3::Bucket",
            DeletionPolicy: "Retain",
            UpdateReplacePolicy: "Retain"
        }, assert_1.ResourcePart.CompleteDefinition));
        assert_1.expect(tableStack).to(assert_1.haveResource('AWS::Glue::Table', {
            CatalogId: {
                Ref: "AWS::AccountId"
            },
            DatabaseName: {
                "Fn::ImportValue": "db:ExportsOutputRefDatabaseB269D8BB88F4B1C4"
            },
            TableInput: {
                Name: "table",
                Description: "table generated by CDK",
                Parameters: {
                    has_encrypted_data: false
                },
                StorageDescriptor: {
                    Columns: [
                        {
                            Name: "col",
                            Type: "string"
                        }
                    ],
                    Compressed: false,
                    InputFormat: "org.apache.hadoop.mapred.TextInputFormat",
                    Location: {
                        "Fn::Join": [
                            "",
                            [
                                "s3://",
                                {
                                    Ref: "TableBucketDA42407C"
                                },
                                "/data/"
                            ]
                        ]
                    },
                    OutputFormat: "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat",
                    SerdeInfo: {
                        SerializationLibrary: "org.openx.data.jsonserde.JsonSerDe"
                    },
                    StoredAsSubDirectories: false
                },
                TableType: "EXTERNAL_TABLE"
            }
        }));
        test.done();
    },
    'partitioned JSON table'(test) {
        const app = new cdk.App();
        const dbStack = new cdk.Stack(app, 'db');
        const database = new glue.Database(dbStack, 'Database', {
            databaseName: 'database',
        });
        const tableStack = new cdk.Stack(app, 'table');
        const table = new glue.Table(tableStack, 'Table', {
            database,
            tableName: 'table',
            columns: [{
                    name: 'col',
                    type: glue.Schema.STRING
                }],
            partitionKeys: [{
                    name: 'year',
                    type: glue.Schema.SMALL_INT
                }],
            dataFormat: glue.DataFormat.Json,
        });
        test.equals(table.encryption, glue.TableEncryption.UNENCRYPTED);
        test.equals(table.encryptionKey, undefined);
        test.equals(table.bucket.encryptionKey, undefined);
        assert_1.expect(tableStack).to(assert_1.haveResource('AWS::Glue::Table', {
            CatalogId: {
                Ref: "AWS::AccountId"
            },
            DatabaseName: {
                "Fn::ImportValue": "db:ExportsOutputRefDatabaseB269D8BB88F4B1C4"
            },
            TableInput: {
                Name: "table",
                Description: "table generated by CDK",
                Parameters: {
                    has_encrypted_data: false
                },
                PartitionKeys: [
                    {
                        Name: "year",
                        Type: "smallint"
                    }
                ],
                StorageDescriptor: {
                    Columns: [
                        {
                            Name: "col",
                            Type: "string"
                        }
                    ],
                    Compressed: false,
                    InputFormat: "org.apache.hadoop.mapred.TextInputFormat",
                    Location: {
                        "Fn::Join": [
                            "",
                            [
                                "s3://",
                                {
                                    Ref: "TableBucketDA42407C"
                                },
                                "/data/"
                            ]
                        ]
                    },
                    OutputFormat: "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat",
                    SerdeInfo: {
                        SerializationLibrary: "org.openx.data.jsonserde.JsonSerDe"
                    },
                    StoredAsSubDirectories: false
                },
                TableType: "EXTERNAL_TABLE"
            }
        }));
        test.done();
    },
    'compressed table'(test) {
        const stack = new cdk.Stack();
        const database = new glue.Database(stack, 'Database', {
            databaseName: 'database',
        });
        const table = new glue.Table(stack, 'Table', {
            database,
            tableName: 'table',
            columns: [{
                    name: 'col',
                    type: glue.Schema.STRING
                }],
            compressed: true,
            dataFormat: glue.DataFormat.Json,
        });
        test.equals(table.encryptionKey, undefined);
        test.equals(table.bucket.encryptionKey, undefined);
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Glue::Table', {
            CatalogId: {
                Ref: "AWS::AccountId"
            },
            DatabaseName: {
                Ref: "DatabaseB269D8BB"
            },
            TableInput: {
                Name: "table",
                Description: "table generated by CDK",
                Parameters: {
                    has_encrypted_data: false
                },
                StorageDescriptor: {
                    Columns: [
                        {
                            Name: "col",
                            Type: "string"
                        }
                    ],
                    Compressed: true,
                    InputFormat: "org.apache.hadoop.mapred.TextInputFormat",
                    Location: {
                        "Fn::Join": [
                            "",
                            [
                                "s3://",
                                {
                                    Ref: "TableBucketDA42407C"
                                },
                                "/data/"
                            ]
                        ]
                    },
                    OutputFormat: "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat",
                    SerdeInfo: {
                        SerializationLibrary: "org.openx.data.jsonserde.JsonSerDe"
                    },
                    StoredAsSubDirectories: false
                },
                TableType: "EXTERNAL_TABLE"
            }
        }));
        test.done();
    },
    'table.node.defaultChild'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const database = new glue.Database(stack, 'Database', {
            databaseName: 'database',
        });
        // WHEN
        const table = new glue.Table(stack, 'Table', {
            database,
            tableName: 'table',
            columns: [{
                    name: 'col',
                    type: glue.Schema.STRING
                }],
            compressed: true,
            dataFormat: glue.DataFormat.Json,
        });
        // THEN
        test.ok(table.node.defaultChild instanceof glue.CfnTable);
        test.done();
    },
    'encrypted table': {
        'SSE-S3'(test) {
            const stack = new cdk.Stack();
            const database = new glue.Database(stack, 'Database', {
                databaseName: 'database',
            });
            const table = new glue.Table(stack, 'Table', {
                database,
                tableName: 'table',
                columns: [{
                        name: 'col',
                        type: glue.Schema.STRING
                    }],
                encryption: glue.TableEncryption.S3_MANAGED,
                dataFormat: glue.DataFormat.Json,
            });
            test.equals(table.encryption, glue.TableEncryption.S3_MANAGED);
            test.equals(table.encryptionKey, undefined);
            test.equals(table.bucket.encryptionKey, undefined);
            assert_1.expect(stack).to(assert_1.haveResource('AWS::Glue::Table', {
                CatalogId: {
                    Ref: "AWS::AccountId"
                },
                DatabaseName: {
                    Ref: "DatabaseB269D8BB"
                },
                TableInput: {
                    Name: "table",
                    Description: "table generated by CDK",
                    Parameters: {
                        has_encrypted_data: true
                    },
                    StorageDescriptor: {
                        Columns: [
                            {
                                Name: "col",
                                Type: "string"
                            }
                        ],
                        Compressed: false,
                        InputFormat: "org.apache.hadoop.mapred.TextInputFormat",
                        Location: {
                            "Fn::Join": [
                                "",
                                [
                                    "s3://",
                                    {
                                        Ref: "TableBucketDA42407C"
                                    },
                                    "/data/"
                                ]
                            ]
                        },
                        OutputFormat: "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat",
                        SerdeInfo: {
                            SerializationLibrary: "org.openx.data.jsonserde.JsonSerDe"
                        },
                        StoredAsSubDirectories: false
                    },
                    TableType: "EXTERNAL_TABLE"
                }
            }));
            assert_1.expect(stack).to(assert_1.haveResource('AWS::S3::Bucket', {
                BucketEncryption: {
                    ServerSideEncryptionConfiguration: [
                        {
                            ServerSideEncryptionByDefault: {
                                SSEAlgorithm: "AES256"
                            }
                        }
                    ]
                }
            }));
            test.done();
        },
        'SSE-KMS (implicitly created key)'(test) {
            const stack = new cdk.Stack();
            const database = new glue.Database(stack, 'Database', {
                databaseName: 'database',
            });
            const table = new glue.Table(stack, 'Table', {
                database,
                tableName: 'table',
                columns: [{
                        name: 'col',
                        type: glue.Schema.STRING
                    }],
                encryption: glue.TableEncryption.KMS,
                dataFormat: glue.DataFormat.Json,
            });
            test.equals(table.encryption, glue.TableEncryption.KMS);
            test.equals(table.encryptionKey, table.bucket.encryptionKey);
            assert_1.expect(stack).to(assert_1.haveResource('AWS::KMS::Key', {
                KeyPolicy: {
                    Statement: [
                        {
                            Action: [
                                "kms:Create*",
                                "kms:Describe*",
                                "kms:Enable*",
                                "kms:List*",
                                "kms:Put*",
                                "kms:Update*",
                                "kms:Revoke*",
                                "kms:Disable*",
                                "kms:Get*",
                                "kms:Delete*",
                                "kms:ScheduleKeyDeletion",
                                "kms:CancelKeyDeletion",
                                "kms:GenerateDataKey",
                                "kms:TagResource",
                                "kms:UntagResource"
                            ],
                            Effect: "Allow",
                            Principal: {
                                AWS: {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:",
                                            {
                                                Ref: "AWS::Partition"
                                            },
                                            ":iam::",
                                            {
                                                Ref: "AWS::AccountId"
                                            },
                                            ":root"
                                        ]
                                    ]
                                }
                            },
                            Resource: "*"
                        }
                    ],
                    Version: "2012-10-17"
                },
                Description: "Created by Table/Bucket"
            }));
            assert_1.expect(stack).to(assert_1.haveResource('AWS::S3::Bucket', {
                BucketEncryption: {
                    ServerSideEncryptionConfiguration: [
                        {
                            ServerSideEncryptionByDefault: {
                                KMSMasterKeyID: {
                                    "Fn::GetAtt": [
                                        "TableBucketKey3E9F984A",
                                        "Arn"
                                    ]
                                },
                                SSEAlgorithm: "aws:kms"
                            }
                        }
                    ]
                }
            }));
            assert_1.expect(stack).to(assert_1.haveResource('AWS::Glue::Table', {
                CatalogId: {
                    Ref: "AWS::AccountId"
                },
                DatabaseName: {
                    Ref: "DatabaseB269D8BB"
                },
                TableInput: {
                    Name: "table",
                    Description: "table generated by CDK",
                    Parameters: {
                        has_encrypted_data: true
                    },
                    StorageDescriptor: {
                        Columns: [
                            {
                                Name: "col",
                                Type: "string"
                            }
                        ],
                        Compressed: false,
                        InputFormat: "org.apache.hadoop.mapred.TextInputFormat",
                        Location: {
                            "Fn::Join": [
                                "",
                                [
                                    "s3://",
                                    {
                                        Ref: "TableBucketDA42407C"
                                    },
                                    "/data/"
                                ]
                            ]
                        },
                        OutputFormat: "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat",
                        SerdeInfo: {
                            SerializationLibrary: "org.openx.data.jsonserde.JsonSerDe"
                        },
                        StoredAsSubDirectories: false
                    },
                    TableType: "EXTERNAL_TABLE"
                }
            }));
            test.done();
        },
        'SSE-KMS (explicitly created key)'(test) {
            const stack = new cdk.Stack();
            const database = new glue.Database(stack, 'Database', {
                databaseName: 'database',
            });
            const encryptionKey = new kms.Key(stack, 'MyKey');
            const table = new glue.Table(stack, 'Table', {
                database,
                tableName: 'table',
                columns: [{
                        name: 'col',
                        type: glue.Schema.STRING
                    }],
                encryption: glue.TableEncryption.KMS,
                encryptionKey,
                dataFormat: glue.DataFormat.Json,
            });
            test.equals(table.encryption, glue.TableEncryption.KMS);
            test.equals(table.encryptionKey, table.bucket.encryptionKey);
            test.notEqual(table.encryptionKey, undefined);
            assert_1.expect(stack).to(assert_1.haveResource('AWS::KMS::Key', {
                KeyPolicy: {
                    Statement: [
                        {
                            Action: [
                                "kms:Create*",
                                "kms:Describe*",
                                "kms:Enable*",
                                "kms:List*",
                                "kms:Put*",
                                "kms:Update*",
                                "kms:Revoke*",
                                "kms:Disable*",
                                "kms:Get*",
                                "kms:Delete*",
                                "kms:ScheduleKeyDeletion",
                                "kms:CancelKeyDeletion",
                                "kms:GenerateDataKey",
                                "kms:TagResource",
                                "kms:UntagResource"
                            ],
                            Effect: "Allow",
                            Principal: {
                                AWS: {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:",
                                            {
                                                Ref: "AWS::Partition"
                                            },
                                            ":iam::",
                                            {
                                                Ref: "AWS::AccountId"
                                            },
                                            ":root"
                                        ]
                                    ]
                                }
                            },
                            Resource: "*"
                        }
                    ],
                    Version: "2012-10-17"
                }
            }));
            assert_1.expect(stack).to(assert_1.haveResource('AWS::S3::Bucket', {
                BucketEncryption: {
                    ServerSideEncryptionConfiguration: [
                        {
                            ServerSideEncryptionByDefault: {
                                KMSMasterKeyID: {
                                    "Fn::GetAtt": [
                                        "MyKey6AB29FA6",
                                        "Arn"
                                    ]
                                },
                                SSEAlgorithm: "aws:kms"
                            }
                        }
                    ]
                }
            }));
            assert_1.expect(stack).to(assert_1.haveResource('AWS::Glue::Table', {
                CatalogId: {
                    Ref: "AWS::AccountId"
                },
                DatabaseName: {
                    Ref: "DatabaseB269D8BB"
                },
                TableInput: {
                    Description: "table generated by CDK",
                    Name: "table",
                    Parameters: {
                        has_encrypted_data: true
                    },
                    StorageDescriptor: {
                        Columns: [
                            {
                                Name: "col",
                                Type: "string"
                            }
                        ],
                        Compressed: false,
                        InputFormat: "org.apache.hadoop.mapred.TextInputFormat",
                        Location: {
                            "Fn::Join": [
                                "",
                                [
                                    "s3://",
                                    {
                                        Ref: "TableBucketDA42407C"
                                    },
                                    "/data/"
                                ]
                            ]
                        },
                        OutputFormat: "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat",
                        SerdeInfo: {
                            SerializationLibrary: "org.openx.data.jsonserde.JsonSerDe"
                        },
                        StoredAsSubDirectories: false
                    },
                    TableType: "EXTERNAL_TABLE"
                }
            }));
            test.done();
        },
        'SSE-KMS_MANAGED'(test) {
            const stack = new cdk.Stack();
            const database = new glue.Database(stack, 'Database', {
                databaseName: 'database',
            });
            const table = new glue.Table(stack, 'Table', {
                database,
                tableName: 'table',
                columns: [{
                        name: 'col',
                        type: glue.Schema.STRING
                    }],
                encryption: glue.TableEncryption.KMS_MANAGED,
                dataFormat: glue.DataFormat.Json,
            });
            test.equals(table.encryption, glue.TableEncryption.KMS_MANAGED);
            test.equals(table.encryptionKey, undefined);
            test.equals(table.bucket.encryptionKey, undefined);
            assert_1.expect(stack).to(assert_1.haveResource('AWS::S3::Bucket', {
                BucketEncryption: {
                    ServerSideEncryptionConfiguration: [
                        {
                            ServerSideEncryptionByDefault: {
                                SSEAlgorithm: "aws:kms"
                            }
                        }
                    ]
                }
            }));
            assert_1.expect(stack).to(assert_1.haveResource('AWS::Glue::Table', {
                CatalogId: {
                    Ref: "AWS::AccountId"
                },
                DatabaseName: {
                    Ref: "DatabaseB269D8BB"
                },
                TableInput: {
                    Name: "table",
                    Description: "table generated by CDK",
                    Parameters: {
                        has_encrypted_data: true
                    },
                    StorageDescriptor: {
                        Columns: [
                            {
                                Name: "col",
                                Type: "string"
                            }
                        ],
                        Compressed: false,
                        InputFormat: "org.apache.hadoop.mapred.TextInputFormat",
                        Location: {
                            "Fn::Join": [
                                "",
                                [
                                    "s3://",
                                    {
                                        Ref: "TableBucketDA42407C"
                                    },
                                    "/data/"
                                ]
                            ]
                        },
                        OutputFormat: "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat",
                        SerdeInfo: {
                            SerializationLibrary: "org.openx.data.jsonserde.JsonSerDe"
                        },
                        StoredAsSubDirectories: false
                    },
                    TableType: "EXTERNAL_TABLE"
                }
            }));
            test.done();
        },
        'CSE-KMS (implicitly created key)'(test) {
            const stack = new cdk.Stack();
            const database = new glue.Database(stack, 'Database', {
                databaseName: 'database',
            });
            const table = new glue.Table(stack, 'Table', {
                database,
                tableName: 'table',
                columns: [{
                        name: 'col',
                        type: glue.Schema.STRING
                    }],
                encryption: glue.TableEncryption.CLIENT_SIDE_KMS,
                dataFormat: glue.DataFormat.Json,
            });
            test.equals(table.encryption, glue.TableEncryption.CLIENT_SIDE_KMS);
            test.notEqual(table.encryptionKey, undefined);
            test.equals(table.bucket.encryptionKey, undefined);
            assert_1.expect(stack).to(assert_1.haveResource('AWS::KMS::Key', {
                KeyPolicy: {
                    Statement: [
                        {
                            Action: [
                                "kms:Create*",
                                "kms:Describe*",
                                "kms:Enable*",
                                "kms:List*",
                                "kms:Put*",
                                "kms:Update*",
                                "kms:Revoke*",
                                "kms:Disable*",
                                "kms:Get*",
                                "kms:Delete*",
                                "kms:ScheduleKeyDeletion",
                                "kms:CancelKeyDeletion",
                                "kms:GenerateDataKey",
                                "kms:TagResource",
                                "kms:UntagResource"
                            ],
                            Effect: "Allow",
                            Principal: {
                                AWS: {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:",
                                            {
                                                Ref: "AWS::Partition"
                                            },
                                            ":iam::",
                                            {
                                                Ref: "AWS::AccountId"
                                            },
                                            ":root"
                                        ]
                                    ]
                                }
                            },
                            Resource: "*"
                        }
                    ],
                    Version: "2012-10-17"
                }
            }));
            assert_1.expect(stack).to(assert_1.haveResource('AWS::Glue::Table', {
                CatalogId: {
                    Ref: "AWS::AccountId"
                },
                DatabaseName: {
                    Ref: "DatabaseB269D8BB"
                },
                TableInput: {
                    Description: "table generated by CDK",
                    Name: "table",
                    Parameters: {
                        has_encrypted_data: true
                    },
                    StorageDescriptor: {
                        Columns: [
                            {
                                Name: "col",
                                Type: "string"
                            }
                        ],
                        Compressed: false,
                        InputFormat: "org.apache.hadoop.mapred.TextInputFormat",
                        Location: {
                            "Fn::Join": [
                                "",
                                [
                                    "s3://",
                                    {
                                        Ref: "TableBucketDA42407C"
                                    },
                                    "/data/"
                                ]
                            ]
                        },
                        OutputFormat: "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat",
                        SerdeInfo: {
                            SerializationLibrary: "org.openx.data.jsonserde.JsonSerDe"
                        },
                        StoredAsSubDirectories: false
                    },
                    TableType: "EXTERNAL_TABLE"
                }
            }));
            test.done();
        },
        'CSE-KMS (explicitly created key)'(test) {
            const stack = new cdk.Stack();
            const database = new glue.Database(stack, 'Database', {
                databaseName: 'database',
            });
            const encryptionKey = new kms.Key(stack, 'MyKey');
            const table = new glue.Table(stack, 'Table', {
                database,
                tableName: 'table',
                columns: [{
                        name: 'col',
                        type: glue.Schema.STRING
                    }],
                encryption: glue.TableEncryption.CLIENT_SIDE_KMS,
                encryptionKey,
                dataFormat: glue.DataFormat.Json,
            });
            test.equals(table.encryption, glue.TableEncryption.CLIENT_SIDE_KMS);
            test.notEqual(table.encryptionKey, undefined);
            test.equals(table.bucket.encryptionKey, undefined);
            assert_1.expect(stack).to(assert_1.haveResource('AWS::KMS::Key', {
                KeyPolicy: {
                    Statement: [
                        {
                            Action: [
                                "kms:Create*",
                                "kms:Describe*",
                                "kms:Enable*",
                                "kms:List*",
                                "kms:Put*",
                                "kms:Update*",
                                "kms:Revoke*",
                                "kms:Disable*",
                                "kms:Get*",
                                "kms:Delete*",
                                "kms:ScheduleKeyDeletion",
                                "kms:CancelKeyDeletion",
                                "kms:GenerateDataKey",
                                "kms:TagResource",
                                "kms:UntagResource"
                            ],
                            Effect: "Allow",
                            Principal: {
                                AWS: {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:",
                                            {
                                                Ref: "AWS::Partition"
                                            },
                                            ":iam::",
                                            {
                                                Ref: "AWS::AccountId"
                                            },
                                            ":root"
                                        ]
                                    ]
                                }
                            },
                            Resource: "*"
                        }
                    ],
                    Version: "2012-10-17"
                }
            }));
            assert_1.expect(stack).to(assert_1.haveResource('AWS::Glue::Table', {
                CatalogId: {
                    Ref: "AWS::AccountId"
                },
                DatabaseName: {
                    Ref: "DatabaseB269D8BB"
                },
                TableInput: {
                    Description: "table generated by CDK",
                    Name: "table",
                    Parameters: {
                        has_encrypted_data: true
                    },
                    StorageDescriptor: {
                        Columns: [
                            {
                                Name: "col",
                                Type: "string"
                            }
                        ],
                        Compressed: false,
                        InputFormat: "org.apache.hadoop.mapred.TextInputFormat",
                        Location: {
                            "Fn::Join": [
                                "",
                                [
                                    "s3://",
                                    {
                                        Ref: "TableBucketDA42407C"
                                    },
                                    "/data/"
                                ]
                            ]
                        },
                        OutputFormat: "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat",
                        SerdeInfo: {
                            SerializationLibrary: "org.openx.data.jsonserde.JsonSerDe"
                        },
                        StoredAsSubDirectories: false
                    },
                    TableType: "EXTERNAL_TABLE"
                }
            }));
            test.done();
        },
        'CSE-KMS (explicitly passed bucket and key)'(test) {
            const stack = new cdk.Stack();
            const database = new glue.Database(stack, 'Database', {
                databaseName: 'database',
            });
            const bucket = new s3.Bucket(stack, 'Bucket');
            const encryptionKey = new kms.Key(stack, 'MyKey');
            const table = new glue.Table(stack, 'Table', {
                database,
                tableName: 'table',
                columns: [{
                        name: 'col',
                        type: glue.Schema.STRING
                    }],
                bucket,
                encryption: glue.TableEncryption.CLIENT_SIDE_KMS,
                encryptionKey,
                dataFormat: glue.DataFormat.Json,
            });
            test.equals(table.encryption, glue.TableEncryption.CLIENT_SIDE_KMS);
            test.notEqual(table.encryptionKey, undefined);
            test.equals(table.bucket.encryptionKey, undefined);
            assert_1.expect(stack).to(assert_1.haveResource('AWS::KMS::Key', {
                KeyPolicy: {
                    Statement: [
                        {
                            Action: [
                                "kms:Create*",
                                "kms:Describe*",
                                "kms:Enable*",
                                "kms:List*",
                                "kms:Put*",
                                "kms:Update*",
                                "kms:Revoke*",
                                "kms:Disable*",
                                "kms:Get*",
                                "kms:Delete*",
                                "kms:ScheduleKeyDeletion",
                                "kms:CancelKeyDeletion",
                                "kms:GenerateDataKey",
                                "kms:TagResource",
                                "kms:UntagResource"
                            ],
                            Effect: "Allow",
                            Principal: {
                                AWS: {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:",
                                            {
                                                Ref: "AWS::Partition"
                                            },
                                            ":iam::",
                                            {
                                                Ref: "AWS::AccountId"
                                            },
                                            ":root"
                                        ]
                                    ]
                                }
                            },
                            Resource: "*"
                        }
                    ],
                    Version: "2012-10-17"
                }
            }));
            assert_1.expect(stack).to(assert_1.haveResource('AWS::Glue::Table', {
                CatalogId: {
                    Ref: "AWS::AccountId"
                },
                DatabaseName: {
                    Ref: "DatabaseB269D8BB"
                },
                TableInput: {
                    Description: "table generated by CDK",
                    Name: "table",
                    Parameters: {
                        has_encrypted_data: true
                    },
                    StorageDescriptor: {
                        Columns: [
                            {
                                Name: "col",
                                Type: "string"
                            }
                        ],
                        Compressed: false,
                        InputFormat: "org.apache.hadoop.mapred.TextInputFormat",
                        Location: {
                            "Fn::Join": [
                                "",
                                [
                                    "s3://",
                                    {
                                        Ref: "Bucket83908E77"
                                    },
                                    "/data/"
                                ]
                            ]
                        },
                        OutputFormat: "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat",
                        SerdeInfo: {
                            SerializationLibrary: "org.openx.data.jsonserde.JsonSerDe"
                        },
                        StoredAsSubDirectories: false
                    },
                    TableType: "EXTERNAL_TABLE"
                }
            }));
            test.done();
        }
    },
    'explicit s3 bucket and prefix'(test) {
        const app = new cdk.App();
        const dbStack = new cdk.Stack(app, 'db');
        const stack = new cdk.Stack(app, 'app');
        const bucket = new s3.Bucket(stack, 'ExplicitBucket');
        const database = new glue.Database(dbStack, 'Database', {
            databaseName: 'database',
        });
        new glue.Table(stack, 'Table', {
            database,
            bucket,
            s3Prefix: 'prefix/',
            tableName: 'table',
            columns: [{
                    name: 'col',
                    type: glue.Schema.STRING
                }],
            dataFormat: glue.DataFormat.Json,
        });
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Glue::Table', {
            CatalogId: {
                Ref: "AWS::AccountId"
            },
            DatabaseName: {
                "Fn::ImportValue": "db:ExportsOutputRefDatabaseB269D8BB88F4B1C4"
            },
            TableInput: {
                Description: "table generated by CDK",
                Name: "table",
                Parameters: {
                    has_encrypted_data: false
                },
                StorageDescriptor: {
                    Columns: [
                        {
                            Name: "col",
                            Type: "string"
                        }
                    ],
                    Compressed: false,
                    InputFormat: "org.apache.hadoop.mapred.TextInputFormat",
                    Location: {
                        "Fn::Join": [
                            "",
                            [
                                "s3://",
                                {
                                    Ref: "ExplicitBucket0AA51A3F"
                                },
                                "/prefix/"
                            ]
                        ]
                    },
                    OutputFormat: "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat",
                    SerdeInfo: {
                        SerializationLibrary: "org.openx.data.jsonserde.JsonSerDe"
                    },
                    StoredAsSubDirectories: false
                },
                TableType: "EXTERNAL_TABLE"
            }
        }));
        test.done();
    },
    'explicit s3 bucket and with empty prefix'(test) {
        const app = new cdk.App();
        const dbStack = new cdk.Stack(app, 'db');
        const stack = new cdk.Stack(app, 'app');
        const bucket = new s3.Bucket(stack, 'ExplicitBucket');
        const database = new glue.Database(dbStack, 'Database', {
            databaseName: 'database',
        });
        new glue.Table(stack, 'Table', {
            database,
            bucket,
            s3Prefix: '',
            tableName: 'table',
            columns: [{
                    name: 'col',
                    type: glue.Schema.STRING
                }],
            dataFormat: glue.DataFormat.Json,
        });
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Glue::Table', {
            CatalogId: {
                Ref: "AWS::AccountId"
            },
            DatabaseName: {
                "Fn::ImportValue": "db:ExportsOutputRefDatabaseB269D8BB88F4B1C4"
            },
            TableInput: {
                Description: "table generated by CDK",
                Name: "table",
                Parameters: {
                    has_encrypted_data: false
                },
                StorageDescriptor: {
                    Columns: [
                        {
                            Name: "col",
                            Type: "string"
                        }
                    ],
                    Compressed: false,
                    InputFormat: "org.apache.hadoop.mapred.TextInputFormat",
                    Location: {
                        "Fn::Join": [
                            "",
                            [
                                "s3://",
                                {
                                    Ref: "ExplicitBucket0AA51A3F"
                                },
                                "/"
                            ]
                        ]
                    },
                    OutputFormat: "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat",
                    SerdeInfo: {
                        SerializationLibrary: "org.openx.data.jsonserde.JsonSerDe"
                    },
                    StoredAsSubDirectories: false
                },
                TableType: "EXTERNAL_TABLE"
            }
        }));
        test.done();
    },
    'grants': {
        'read only'(test) {
            const stack = new cdk.Stack();
            const user = new iam.User(stack, 'User');
            const database = new glue.Database(stack, 'Database', {
                databaseName: 'database',
            });
            const table = new glue.Table(stack, 'Table', {
                database,
                tableName: 'table',
                columns: [{
                        name: 'col',
                        type: glue.Schema.STRING
                    }],
                compressed: true,
                dataFormat: glue.DataFormat.Json,
            });
            table.grantRead(user);
            assert_1.expect(stack).to(assert_1.haveResource('AWS::IAM::Policy', {
                PolicyDocument: {
                    Statement: [
                        {
                            Action: [
                                "glue:BatchDeletePartition",
                                "glue:BatchGetPartition",
                                "glue:GetPartition",
                                "glue:GetPartitions",
                                "glue:GetTable",
                                "glue:GetTables",
                                "glue:GetTableVersions"
                            ],
                            Effect: "Allow",
                            Resource: {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:",
                                        {
                                            Ref: "AWS::Partition"
                                        },
                                        ":glue:",
                                        {
                                            Ref: "AWS::Region"
                                        },
                                        ":",
                                        {
                                            Ref: "AWS::AccountId"
                                        },
                                        ":table/",
                                        {
                                            Ref: "DatabaseB269D8BB"
                                        },
                                        "/",
                                        {
                                            Ref: "Table4C2D914F"
                                        }
                                    ]
                                ]
                            }
                        },
                        {
                            Action: [
                                "s3:GetObject*",
                                "s3:GetBucket*",
                                "s3:List*"
                            ],
                            Effect: "Allow",
                            Resource: [
                                {
                                    "Fn::GetAtt": [
                                        "TableBucketDA42407C",
                                        "Arn"
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Fn::GetAtt": [
                                                    "TableBucketDA42407C",
                                                    "Arn"
                                                ]
                                            },
                                            "/data/"
                                        ]
                                    ]
                                }
                            ]
                        }
                    ],
                    Version: "2012-10-17"
                },
                PolicyName: "UserDefaultPolicy1F97781E",
                Users: [
                    {
                        Ref: "User00B015A1"
                    }
                ]
            }));
            test.done();
        },
        'write only'(test) {
            const stack = new cdk.Stack();
            const user = new iam.User(stack, 'User');
            const database = new glue.Database(stack, 'Database', {
                databaseName: 'database',
            });
            const table = new glue.Table(stack, 'Table', {
                database,
                tableName: 'table',
                columns: [{
                        name: 'col',
                        type: glue.Schema.STRING
                    }],
                compressed: true,
                dataFormat: glue.DataFormat.Json,
            });
            table.grantWrite(user);
            assert_1.expect(stack).to(assert_1.haveResource('AWS::IAM::Policy', {
                PolicyDocument: {
                    Statement: [
                        {
                            Action: [
                                "glue:BatchCreatePartition",
                                "glue:BatchDeletePartition",
                                "glue:CreatePartition",
                                "glue:DeletePartition",
                                "glue:UpdatePartition"
                            ],
                            Effect: "Allow",
                            Resource: {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:",
                                        {
                                            Ref: "AWS::Partition"
                                        },
                                        ":glue:",
                                        {
                                            Ref: "AWS::Region"
                                        },
                                        ":",
                                        {
                                            Ref: "AWS::AccountId"
                                        },
                                        ":table/",
                                        {
                                            Ref: "DatabaseB269D8BB"
                                        },
                                        "/",
                                        {
                                            Ref: "Table4C2D914F"
                                        }
                                    ]
                                ]
                            }
                        },
                        {
                            Action: [
                                "s3:DeleteObject*",
                                "s3:PutObject*",
                                "s3:Abort*"
                            ],
                            Effect: "Allow",
                            Resource: [
                                {
                                    "Fn::GetAtt": [
                                        "TableBucketDA42407C",
                                        "Arn"
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Fn::GetAtt": [
                                                    "TableBucketDA42407C",
                                                    "Arn"
                                                ]
                                            },
                                            "/data/"
                                        ]
                                    ]
                                }
                            ]
                        }
                    ],
                    Version: "2012-10-17"
                },
                PolicyName: "UserDefaultPolicy1F97781E",
                Users: [
                    {
                        Ref: "User00B015A1"
                    }
                ]
            }));
            test.done();
        },
        'read and write'(test) {
            const stack = new cdk.Stack();
            const user = new iam.User(stack, 'User');
            const database = new glue.Database(stack, 'Database', {
                databaseName: 'database',
            });
            const table = new glue.Table(stack, 'Table', {
                database,
                tableName: 'table',
                columns: [{
                        name: 'col',
                        type: glue.Schema.STRING
                    }],
                compressed: true,
                dataFormat: glue.DataFormat.Json,
            });
            table.grantReadWrite(user);
            assert_1.expect(stack).to(assert_1.haveResource('AWS::IAM::Policy', {
                PolicyDocument: {
                    Statement: [
                        {
                            Action: [
                                "glue:BatchDeletePartition",
                                "glue:BatchGetPartition",
                                "glue:GetPartition",
                                "glue:GetPartitions",
                                "glue:GetTable",
                                "glue:GetTables",
                                "glue:GetTableVersions",
                                "glue:BatchCreatePartition",
                                "glue:BatchDeletePartition",
                                "glue:CreatePartition",
                                "glue:DeletePartition",
                                "glue:UpdatePartition"
                            ],
                            Effect: "Allow",
                            Resource: {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:",
                                        {
                                            Ref: "AWS::Partition"
                                        },
                                        ":glue:",
                                        {
                                            Ref: "AWS::Region"
                                        },
                                        ":",
                                        {
                                            Ref: "AWS::AccountId"
                                        },
                                        ":table/",
                                        {
                                            Ref: "DatabaseB269D8BB"
                                        },
                                        "/",
                                        {
                                            Ref: "Table4C2D914F"
                                        }
                                    ]
                                ]
                            }
                        },
                        {
                            Action: [
                                "s3:GetObject*",
                                "s3:GetBucket*",
                                "s3:List*",
                                "s3:DeleteObject*",
                                "s3:PutObject*",
                                "s3:Abort*"
                            ],
                            Effect: "Allow",
                            Resource: [
                                {
                                    "Fn::GetAtt": [
                                        "TableBucketDA42407C",
                                        "Arn"
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Fn::GetAtt": [
                                                    "TableBucketDA42407C",
                                                    "Arn"
                                                ]
                                            },
                                            "/data/"
                                        ]
                                    ]
                                }
                            ]
                        }
                    ],
                    Version: "2012-10-17"
                },
                PolicyName: "UserDefaultPolicy1F97781E",
                Users: [
                    {
                        Ref: "User00B015A1"
                    }
                ]
            }));
            test.done();
        }
    },
    'validate': {
        'at least one column'(test) {
            test.throws(() => {
                createTable({
                    columns: [],
                    tableName: 'name',
                });
            }, undefined, 'you must specify at least one column for the table');
            test.done();
        },
        'unique column names'(test) {
            test.throws(() => {
                createTable({
                    tableName: 'name',
                    columns: [{
                            name: 'col1',
                            type: glue.Schema.STRING
                        }, {
                            name: 'col1',
                            type: glue.Schema.STRING
                        }]
                });
            }, undefined, "column names and partition keys must be unique, but 'col1' is duplicated.");
            test.done();
        },
        'unique partition keys'(test) {
            test.throws(() => createTable({
                tableName: 'name',
                columns: [{
                        name: 'col1',
                        type: glue.Schema.STRING
                    }],
                partitionKeys: [{
                        name: 'p1',
                        type: glue.Schema.STRING
                    }, {
                        name: 'p1',
                        type: glue.Schema.STRING
                    }]
            }), undefined, "column names and partition keys must be unique, but 'p1' is duplicated");
            test.done();
        },
        'column names and partition keys are all unique'(test) {
            test.throws(() => createTable({
                tableName: 'name',
                columns: [{
                        name: 'col1',
                        type: glue.Schema.STRING
                    }],
                partitionKeys: [{
                        name: 'col1',
                        type: glue.Schema.STRING
                    }]
            }), "column names and partition keys must be unique, but 'col1' is duplicated");
            test.done();
        },
        'can not specify an explicit bucket and encryption'(test) {
            test.throws(() => createTable({
                tableName: 'name',
                columns: [{
                        name: 'col1',
                        type: glue.Schema.STRING
                    }],
                bucket: new s3.Bucket(new cdk.Stack(), 'Bucket'),
                encryption: glue.TableEncryption.KMS
            }), undefined, 'you can not specify encryption settings if you also provide a bucket');
            test.done();
        },
        'can explicitly pass bucket if Encryption undefined'(test) {
            test.doesNotThrow(() => createTable({
                tableName: 'name',
                columns: [{
                        name: 'col1',
                        type: glue.Schema.STRING
                    }],
                bucket: new s3.Bucket(new cdk.Stack(), 'Bucket'),
                encryption: undefined
            }));
            test.done();
        },
        'can explicitly pass bucket if Unencrypted'(test) {
            test.doesNotThrow(() => createTable({
                tableName: 'name',
                columns: [{
                        name: 'col1',
                        type: glue.Schema.STRING
                    }],
                bucket: new s3.Bucket(new cdk.Stack(), 'Bucket'),
                encryption: undefined
            }));
            test.done();
        },
        'can explicitly pass bucket if ClientSideKms'(test) {
            test.doesNotThrow(() => createTable({
                tableName: 'name',
                columns: [{
                        name: 'col1',
                        type: glue.Schema.STRING
                    }],
                bucket: new s3.Bucket(new cdk.Stack(), 'Bucket'),
                encryption: glue.TableEncryption.CLIENT_SIDE_KMS
            }));
            test.done();
        }
    },
    'Table.fromTableArn'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        const table = glue.Table.fromTableArn(stack, 'boom', 'arn:aws:glue:us-east-1:123456789012:table/db1/tbl1');
        // THEN
        test.deepEqual(table.tableArn, 'arn:aws:glue:us-east-1:123456789012:table/db1/tbl1');
        test.deepEqual(table.tableName, 'tbl1');
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,