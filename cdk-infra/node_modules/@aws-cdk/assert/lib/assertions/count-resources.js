"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertion_1 = require("../assertion");
const have_resource_1 = require("./have-resource");
/**
 * An assertion to check whether a resource of a given type and with the given properties exists, disregarding properties
 */
function countResources(resourceType, count = 1) {
    return new CountResourcesAssertion(resourceType, count);
}
exports.countResources = countResources;
/**
 * An assertion to check whether a resource of a given type and with the given properties exists, considering properties
 */
function countResourcesLike(resourceType, count = 1, props) {
    return new CountResourcesAssertion(resourceType, count, props);
}
exports.countResourcesLike = countResourcesLike;
class CountResourcesAssertion extends assertion_1.Assertion {
    constructor(resourceType, count, props = null) {
        super();
        this.resourceType = resourceType;
        this.count = count;
        this.inspected = 0;
        this.props = props;
    }
    assertUsing(inspector) {
        let counted = 0;
        for (const logicalId of Object.keys(inspector.value.Resources || {})) {
            const resource = inspector.value.Resources[logicalId];
            if (resource.Type === this.resourceType) {
                if (this.props) {
                    if (have_resource_1.isSuperObject(resource.Properties, this.props, [], true)) {
                        counted++;
                        this.inspected += 1;
                    }
                }
                else {
                    counted++;
                    this.inspected += 1;
                }
            }
        }
        return counted === this.count;
    }
    get description() {
        return `stack only has ${this.inspected} resource of type ${this.resourceType}${this.props ? ' with specified properties' : ''} but we expected to find ${this.count}`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnQtcmVzb3VyY2VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY291bnQtcmVzb3VyY2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNENBQXlDO0FBRXpDLG1EQUFnRDtBQUVoRDs7R0FFRztBQUNILFNBQWdCLGNBQWMsQ0FBQyxZQUFvQixFQUFFLEtBQUssR0FBRyxDQUFDO0lBQzVELE9BQU8sSUFBSSx1QkFBdUIsQ0FBQyxZQUFZLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDMUQsQ0FBQztBQUZELHdDQUVDO0FBRUQ7O0dBRUc7QUFDSCxTQUFnQixrQkFBa0IsQ0FBQyxZQUFvQixFQUFFLEtBQUssR0FBRyxDQUFDLEVBQUUsS0FBVTtJQUM1RSxPQUFPLElBQUksdUJBQXVCLENBQUMsWUFBWSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNqRSxDQUFDO0FBRkQsZ0RBRUM7QUFFRCxNQUFNLHVCQUF3QixTQUFRLHFCQUF5QjtJQUk3RCxZQUE2QixZQUFvQixFQUNwQixLQUFhLEVBQzlCLFFBQWEsSUFBSTtRQUMzQixLQUFLLEVBQUUsQ0FBQztRQUhtQixpQkFBWSxHQUFaLFlBQVksQ0FBUTtRQUNwQixVQUFLLEdBQUwsS0FBSyxDQUFRO1FBSmxDLGNBQVMsR0FBVyxDQUFDLENBQUM7UUFPNUIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDckIsQ0FBQztJQUVNLFdBQVcsQ0FBQyxTQUF5QjtRQUMxQyxJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUM7UUFDaEIsS0FBSyxNQUFNLFNBQVMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQyxFQUFFO1lBQ3BFLE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3RELElBQUksUUFBUSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsWUFBWSxFQUFFO2dCQUN2QyxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7b0JBQ2QsSUFBSSw2QkFBYSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUU7d0JBQzVELE9BQU8sRUFBRSxDQUFDO3dCQUNWLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxDQUFDO3FCQUNyQjtpQkFDRjtxQkFBTTtvQkFDTCxPQUFPLEVBQUUsQ0FBQztvQkFDVixJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsQ0FBQztpQkFDckI7YUFDRjtTQUNGO1FBRUQsT0FBTyxPQUFPLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNoQyxDQUFDO0lBRUQsSUFBVyxXQUFXO1FBQ3BCLE9BQU8sa0JBQWtCLElBQUksQ0FBQyxTQUFTLHFCQUFxQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLDRCQUE0QixDQUFDLENBQUMsQ0FBQyxFQUFFLDRCQUE0QixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDekssQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXNzZXJ0aW9uIH0gZnJvbSBcIi4uL2Fzc2VydGlvblwiO1xuaW1wb3J0IHsgU3RhY2tJbnNwZWN0b3IgfSBmcm9tIFwiLi4vaW5zcGVjdG9yXCI7XG5pbXBvcnQgeyBpc1N1cGVyT2JqZWN0IH0gZnJvbSBcIi4vaGF2ZS1yZXNvdXJjZVwiO1xuXG4vKipcbiAqIEFuIGFzc2VydGlvbiB0byBjaGVjayB3aGV0aGVyIGEgcmVzb3VyY2Ugb2YgYSBnaXZlbiB0eXBlIGFuZCB3aXRoIHRoZSBnaXZlbiBwcm9wZXJ0aWVzIGV4aXN0cywgZGlzcmVnYXJkaW5nIHByb3BlcnRpZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvdW50UmVzb3VyY2VzKHJlc291cmNlVHlwZTogc3RyaW5nLCBjb3VudCA9IDEpOiBBc3NlcnRpb248U3RhY2tJbnNwZWN0b3I+IHtcbiAgcmV0dXJuIG5ldyBDb3VudFJlc291cmNlc0Fzc2VydGlvbihyZXNvdXJjZVR5cGUsIGNvdW50KTtcbn1cblxuLyoqXG4gKiBBbiBhc3NlcnRpb24gdG8gY2hlY2sgd2hldGhlciBhIHJlc291cmNlIG9mIGEgZ2l2ZW4gdHlwZSBhbmQgd2l0aCB0aGUgZ2l2ZW4gcHJvcGVydGllcyBleGlzdHMsIGNvbnNpZGVyaW5nIHByb3BlcnRpZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvdW50UmVzb3VyY2VzTGlrZShyZXNvdXJjZVR5cGU6IHN0cmluZywgY291bnQgPSAxLCBwcm9wczogYW55KTogQXNzZXJ0aW9uPFN0YWNrSW5zcGVjdG9yPiB7XG4gIHJldHVybiBuZXcgQ291bnRSZXNvdXJjZXNBc3NlcnRpb24ocmVzb3VyY2VUeXBlLCBjb3VudCwgcHJvcHMpO1xufVxuXG5jbGFzcyBDb3VudFJlc291cmNlc0Fzc2VydGlvbiBleHRlbmRzIEFzc2VydGlvbjxTdGFja0luc3BlY3Rvcj4ge1xuICBwcml2YXRlIGluc3BlY3RlZDogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSByZWFkb25seSBwcm9wczogYW55O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgcmVzb3VyY2VUeXBlOiBzdHJpbmcsXG4gICAgICAgICAgICAgIHByaXZhdGUgcmVhZG9ubHkgY291bnQ6IG51bWJlcixcbiAgICAgICAgICAgICAgcHJvcHM6IGFueSA9IG51bGwpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgfVxuXG4gIHB1YmxpYyBhc3NlcnRVc2luZyhpbnNwZWN0b3I6IFN0YWNrSW5zcGVjdG9yKTogYm9vbGVhbiB7XG4gICAgbGV0IGNvdW50ZWQgPSAwO1xuICAgIGZvciAoY29uc3QgbG9naWNhbElkIG9mIE9iamVjdC5rZXlzKGluc3BlY3Rvci52YWx1ZS5SZXNvdXJjZXMgfHwge30pKSB7XG4gICAgICBjb25zdCByZXNvdXJjZSA9IGluc3BlY3Rvci52YWx1ZS5SZXNvdXJjZXNbbG9naWNhbElkXTtcbiAgICAgIGlmIChyZXNvdXJjZS5UeXBlID09PSB0aGlzLnJlc291cmNlVHlwZSkge1xuICAgICAgICBpZiAodGhpcy5wcm9wcykge1xuICAgICAgICAgIGlmIChpc1N1cGVyT2JqZWN0KHJlc291cmNlLlByb3BlcnRpZXMsIHRoaXMucHJvcHMsIFtdLCB0cnVlKSkge1xuICAgICAgICAgICAgY291bnRlZCsrO1xuICAgICAgICAgICAgdGhpcy5pbnNwZWN0ZWQgKz0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY291bnRlZCsrO1xuICAgICAgICAgIHRoaXMuaW5zcGVjdGVkICs9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY291bnRlZCA9PT0gdGhpcy5jb3VudDtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgZGVzY3JpcHRpb24oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYHN0YWNrIG9ubHkgaGFzICR7dGhpcy5pbnNwZWN0ZWR9IHJlc291cmNlIG9mIHR5cGUgJHt0aGlzLnJlc291cmNlVHlwZX0ke3RoaXMucHJvcHMgPyAnIHdpdGggc3BlY2lmaWVkIHByb3BlcnRpZXMnIDogJyd9IGJ1dCB3ZSBleHBlY3RlZCB0byBmaW5kICR7dGhpcy5jb3VudH1gO1xuICB9XG59XG4iXX0=