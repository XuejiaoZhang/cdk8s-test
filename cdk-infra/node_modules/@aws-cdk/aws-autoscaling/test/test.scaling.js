"use strict";
const assert_1 = require("@aws-cdk/assert");
const cloudwatch = require("@aws-cdk/aws-cloudwatch");
const ec2 = require("@aws-cdk/aws-ec2");
const elbv2 = require("@aws-cdk/aws-elasticloadbalancingv2");
const cdk = require("@aws-cdk/core");
const autoscaling = require("../lib");
class ASGFixture extends cdk.Construct {
    constructor(scope, id) {
        super(scope, id);
        this.vpc = new ec2.Vpc(this, 'VPC');
        this.asg = new autoscaling.AutoScalingGroup(this, 'ASG', {
            vpc: this.vpc,
            instanceType: ec2.InstanceType.of(ec2.InstanceClass.M4, ec2.InstanceSize.MICRO),
            machineImage: new ec2.AmazonLinuxImage(),
        });
    }
}
module.exports = {
    'target tracking policies': {
        'cpu utilization'(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const fixture = new ASGFixture(stack, 'Fixture');
            // WHEN
            fixture.asg.scaleOnCpuUtilization('ScaleCpu', {
                targetUtilizationPercent: 30
            });
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource('AWS::AutoScaling::ScalingPolicy', {
                PolicyType: "TargetTrackingScaling",
                TargetTrackingConfiguration: {
                    PredefinedMetricSpecification: { PredefinedMetricType: "ASGAverageCPUUtilization" },
                    TargetValue: 30
                }
            }));
            test.done();
        },
        'network ingress'(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const fixture = new ASGFixture(stack, 'Fixture');
            // WHEN
            fixture.asg.scaleOnIncomingBytes('ScaleNetwork', {
                targetBytesPerSecond: 100
            });
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource('AWS::AutoScaling::ScalingPolicy', {
                PolicyType: "TargetTrackingScaling",
                TargetTrackingConfiguration: {
                    PredefinedMetricSpecification: { PredefinedMetricType: "ASGAverageNetworkIn" },
                    TargetValue: 100
                }
            }));
            test.done();
        },
        'network egress'(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const fixture = new ASGFixture(stack, 'Fixture');
            // WHEN
            fixture.asg.scaleOnOutgoingBytes('ScaleNetwork', {
                targetBytesPerSecond: 100
            });
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource('AWS::AutoScaling::ScalingPolicy', {
                PolicyType: "TargetTrackingScaling",
                TargetTrackingConfiguration: {
                    PredefinedMetricSpecification: { PredefinedMetricType: "ASGAverageNetworkOut" },
                    TargetValue: 100
                }
            }));
            test.done();
        },
        'request count'(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const fixture = new ASGFixture(stack, 'Fixture');
            const alb = new elbv2.ApplicationLoadBalancer(stack, 'ALB', { vpc: fixture.vpc });
            const listener = alb.addListener('Listener', { port: 80 });
            listener.addTargets('Targets', {
                port: 80,
                targets: [fixture.asg],
            });
            // WHEN
            fixture.asg.scaleOnRequestCount('ScaleRequest', {
                targetRequestsPerSecond: 10
            });
            // THEN
            const arnParts = {
                "Fn::Split": [
                    "/",
                    { Ref: "ALBListener3B99FF85" }
                ]
            };
            assert_1.expect(stack).to(assert_1.haveResource('AWS::AutoScaling::ScalingPolicy', {
                PolicyType: "TargetTrackingScaling",
                TargetTrackingConfiguration: {
                    TargetValue: 10,
                    PredefinedMetricSpecification: {
                        PredefinedMetricType: "ALBRequestCountPerTarget",
                        ResourceLabel: { "Fn::Join": ["", [
                                    { "Fn::Select": [1, arnParts] },
                                    "/",
                                    { "Fn::Select": [2, arnParts] },
                                    "/",
                                    { "Fn::Select": [3, arnParts] },
                                    "/",
                                    { "Fn::GetAtt": ["ALBListenerTargetsGroup01D7716A", "TargetGroupFullName"] }
                                ]
                            ]
                        }
                    },
                },
            }));
            test.done();
        },
        'custom metric'(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const fixture = new ASGFixture(stack, 'Fixture');
            // WHEN
            fixture.asg.scaleToTrackMetric('Metric', {
                metric: new cloudwatch.Metric({
                    metricName: 'Henk',
                    namespace: 'Test',
                    dimensions: {
                        Mustache: 'Bushy'
                    }
                }),
                targetValue: 2
            });
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource('AWS::AutoScaling::ScalingPolicy', {
                PolicyType: "TargetTrackingScaling",
                TargetTrackingConfiguration: {
                    CustomizedMetricSpecification: {
                        Dimensions: [{ Name: 'Mustache', Value: 'Bushy' }],
                        MetricName: "Henk",
                        Namespace: "Test",
                        Statistic: "Average"
                    },
                    TargetValue: 2
                }
            }));
            test.done();
        },
    },
    'step scaling'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const fixture = new ASGFixture(stack, 'Fixture');
        // WHEN
        fixture.asg.scaleOnMetric('Metric', {
            metric: new cloudwatch.Metric({
                metricName: 'Legs',
                namespace: 'Henk',
                dimensions: { Mustache: 'Bushy' }
            }),
            // Adjust the number of legs to be closer to 2
            scalingSteps: [
                { lower: 0, upper: 2, change: +1 },
                { lower: 3, upper: 5, change: -1 },
                { lower: 5, change: -2 } // Must work harder to remove legs
            ]
        });
        // THEN: scaling in policy
        assert_1.expect(stack).to(assert_1.haveResource('AWS::AutoScaling::ScalingPolicy', {
            MetricAggregationType: "Average",
            PolicyType: "StepScaling",
            StepAdjustments: [
                {
                    MetricIntervalLowerBound: 0,
                    MetricIntervalUpperBound: 2,
                    ScalingAdjustment: -1
                },
                {
                    MetricIntervalLowerBound: 2,
                    ScalingAdjustment: -2
                }
            ]
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::CloudWatch::Alarm', {
            ComparisonOperator: "GreaterThanOrEqualToThreshold",
            Threshold: 3,
            AlarmActions: [{ Ref: "FixtureASGMetricUpperPolicyC464CAFB" }],
            AlarmDescription: "Upper threshold scaling alarm",
        }));
        // THEN: scaling out policy
        assert_1.expect(stack).to(assert_1.haveResource('AWS::AutoScaling::ScalingPolicy', {
            MetricAggregationType: "Average",
            PolicyType: "StepScaling",
            StepAdjustments: [
                {
                    MetricIntervalUpperBound: 0,
                    ScalingAdjustment: 1
                }
            ]
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::CloudWatch::Alarm', {
            ComparisonOperator: "LessThanOrEqualToThreshold",
            Threshold: 2,
            AlarmActions: [{ Ref: "FixtureASGMetricLowerPolicy4A1CDE42" }],
            AlarmDescription: "Lower threshold scaling alarm",
        }));
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5zY2FsaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC5zY2FsaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0Q0FBdUQ7QUFDdkQsc0RBQXNEO0FBQ3RELHdDQUF3QztBQUN4Qyw2REFBNkQ7QUFDN0QscUNBQXFDO0FBRXJDLHNDQUFzQztBQTJOdEMsTUFBTSxVQUFXLFNBQVEsR0FBRyxDQUFDLFNBQVM7SUFJcEMsWUFBWSxLQUFvQixFQUFFLEVBQVU7UUFDMUMsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFO1lBQ3ZELEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRztZQUNiLFlBQVksRUFBRSxHQUFHLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQztZQUMvRSxZQUFZLEVBQUUsSUFBSSxHQUFHLENBQUMsZ0JBQWdCLEVBQUU7U0FDekMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBdk9ELGlCQUFTO0lBQ1AsMEJBQTBCLEVBQUU7UUFDMUIsaUJBQWlCLENBQUMsSUFBVTtZQUMxQixRQUFRO1lBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDOUIsTUFBTSxPQUFPLEdBQUcsSUFBSSxVQUFVLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1lBRWpELE9BQU87WUFDUCxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLFVBQVUsRUFBRTtnQkFDNUMsd0JBQXdCLEVBQUUs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b0JBQ0Usd0JBQXdCLEVBQUUsQ0FBQztvQkFDM0IsaUJBQWlCLEVBQUUsQ0FBQztpQkFDckI7YUFDRjtTQUNGLENBQUMsQ0FBQyxDQUFDO1FBRUosZUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxxQkFBWSxDQUFDLHdCQUF3QixFQUFFO1lBQ3RELGtCQUFrQixFQUFFLDRCQUE0QjtZQUNoRCxTQUFTLEVBQUUsQ0FBQztZQUNaLFlBQVksRUFBRSxDQUFFLEVBQUUsR0FBRyxFQUFFLHFDQUFxQyxFQUFFLENBQUU7WUFDaEUsZ0JBQWdCLEVBQUUsK0JBQStCO1NBQ2xELENBQUMsQ0FBQyxDQUFDO1FBRUosSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleHBlY3QsIGhhdmVSZXNvdXJjZSB9IGZyb20gJ0Bhd3MtY2RrL2Fzc2VydCc7XG5pbXBvcnQgKiBhcyBjbG91ZHdhdGNoIGZyb20gJ0Bhd3MtY2RrL2F3cy1jbG91ZHdhdGNoJztcbmltcG9ydCAqIGFzIGVjMiBmcm9tICdAYXdzLWNkay9hd3MtZWMyJztcbmltcG9ydCAqIGFzIGVsYnYyIGZyb20gJ0Bhd3MtY2RrL2F3cy1lbGFzdGljbG9hZGJhbGFuY2luZ3YyJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCB7IFRlc3QgfSBmcm9tICdub2RldW5pdCc7XG5pbXBvcnQgKiBhcyBhdXRvc2NhbGluZyBmcm9tICcuLi9saWInO1xuXG5leHBvcnQgPSB7XG4gICd0YXJnZXQgdHJhY2tpbmcgcG9saWNpZXMnOiB7XG4gICAgJ2NwdSB1dGlsaXphdGlvbicodGVzdDogVGVzdCkge1xuICAgICAgLy8gR0lWRU5cbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgICAgY29uc3QgZml4dHVyZSA9IG5ldyBBU0dGaXh0dXJlKHN0YWNrLCAnRml4dHVyZScpO1xuXG4gICAgICAvLyBXSEVOXG4gICAgICBmaXh0dXJlLmFzZy5zY2FsZU9uQ3B1VXRpbGl6YXRpb24oJ1NjYWxlQ3B1Jywge1xuICAgICAgICB0YXJnZXRVdGlsaXphdGlvblBlcmNlbnQ6IDMwXG4gICAgICB9KTtcblxuICAgICAgLy8gVEhFTlxuICAgICAgZXhwZWN0KHN0YWNrKS50byhoYXZlUmVzb3VyY2UoJ0FXUzo6QXV0b1NjYWxpbmc6OlNjYWxpbmdQb2xpY3knLCB7XG4gICAgICAgIFBvbGljeVR5cGU6IFwiVGFyZ2V0VHJhY2tpbmdTY2FsaW5nXCIsXG4gICAgICAgIFRhcmdldFRyYWNraW5nQ29uZmlndXJhdGlvbjoge1xuICAgICAgICAgIFByZWRlZmluZWRNZXRyaWNTcGVjaWZpY2F0aW9uOiB7IFByZWRlZmluZWRNZXRyaWNUeXBlOiBcIkFTR0F2ZXJhZ2VDUFVVdGlsaXphdGlvblwiIH0sXG4gICAgICAgICAgVGFyZ2V0VmFsdWU6IDMwXG4gICAgICAgIH1cbiAgICAgIH0pKTtcblxuICAgICAgdGVzdC5kb25lKCk7XG4gICAgfSxcblxuICAgICduZXR3b3JrIGluZ3Jlc3MnKHRlc3Q6IFRlc3QpIHtcbiAgICAgIC8vIEdJVkVOXG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICAgIGNvbnN0IGZpeHR1cmUgPSBuZXcgQVNHRml4dHVyZShzdGFjaywgJ0ZpeHR1cmUnKTtcblxuICAgICAgLy8gV0hFTlxuICAgICAgZml4dHVyZS5hc2cuc2NhbGVPbkluY29taW5nQnl0ZXMoJ1NjYWxlTmV0d29yaycsIHtcbiAgICAgICAgdGFyZ2V0Qnl0ZXNQZXJTZWNvbmQ6IDEwMFxuICAgICAgfSk7XG5cbiAgICAgIC8vIFRIRU5cbiAgICAgIGV4cGVjdChzdGFjaykudG8oaGF2ZVJlc291cmNlKCdBV1M6OkF1dG9TY2FsaW5nOjpTY2FsaW5nUG9saWN5Jywge1xuICAgICAgICBQb2xpY3lUeXBlOiBcIlRhcmdldFRyYWNraW5nU2NhbGluZ1wiLFxuICAgICAgICBUYXJnZXRUcmFja2luZ0NvbmZpZ3VyYXRpb246IHtcbiAgICAgICAgICBQcmVkZWZpbmVkTWV0cmljU3BlY2lmaWNhdGlvbjogeyBQcmVkZWZpbmVkTWV0cmljVHlwZTogXCJBU0dBdmVyYWdlTmV0d29ya0luXCIgfSxcbiAgICAgICAgICBUYXJnZXRWYWx1ZTogMTAwXG4gICAgICAgIH1cbiAgICAgIH0pKTtcblxuICAgICAgdGVzdC5kb25lKCk7XG4gICAgfSxcblxuICAgICduZXR3b3JrIGVncmVzcycodGVzdDogVGVzdCkge1xuICAgICAgLy8gR0lWRU5cbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgICAgY29uc3QgZml4dHVyZSA9IG5ldyBBU0dGaXh0dXJlKHN0YWNrLCAnRml4dHVyZScpO1xuXG4gICAgICAvLyBXSEVOXG4gICAgICBmaXh0dXJlLmFzZy5zY2FsZU9uT3V0Z29pbmdCeXRlcygnU2NhbGVOZXR3b3JrJywge1xuICAgICAgICB0YXJnZXRCeXRlc1BlclNlY29uZDogMTAwXG4gICAgICB9KTtcblxuICAgICAgLy8gVEhFTlxuICAgICAgZXhwZWN0KHN0YWNrKS50byhoYXZlUmVzb3VyY2UoJ0FXUzo6QXV0b1NjYWxpbmc6OlNjYWxpbmdQb2xpY3knLCB7XG4gICAgICAgIFBvbGljeVR5cGU6IFwiVGFyZ2V0VHJhY2tpbmdTY2FsaW5nXCIsXG4gICAgICAgIFRhcmdldFRyYWNraW5nQ29uZmlndXJhdGlvbjoge1xuICAgICAgICAgIFByZWRlZmluZWRNZXRyaWNTcGVjaWZpY2F0aW9uOiB7IFByZWRlZmluZWRNZXRyaWNUeXBlOiBcIkFTR0F2ZXJhZ2VOZXR3b3JrT3V0XCIgfSxcbiAgICAgICAgICBUYXJnZXRWYWx1ZTogMTAwXG4gICAgICAgIH1cbiAgICAgIH0pKTtcblxuICAgICAgdGVzdC5kb25lKCk7XG4gICAgfSxcblxuICAgICdyZXF1ZXN0IGNvdW50Jyh0ZXN0OiBUZXN0KSB7XG4gICAgICAvLyBHSVZFTlxuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgICBjb25zdCBmaXh0dXJlID0gbmV3IEFTR0ZpeHR1cmUoc3RhY2ssICdGaXh0dXJlJyk7XG4gICAgICBjb25zdCBhbGIgPSBuZXcgZWxidjIuQXBwbGljYXRpb25Mb2FkQmFsYW5jZXIoc3RhY2ssICdBTEInLCB7IHZwYzogZml4dHVyZS52cGMgfSk7XG4gICAgICBjb25zdCBsaXN0ZW5lciA9IGFsYi5hZGRMaXN0ZW5lcignTGlzdGVuZXInLCB7IHBvcnQ6IDgwIH0pO1xuICAgICAgbGlzdGVuZXIuYWRkVGFyZ2V0cygnVGFyZ2V0cycsIHtcbiAgICAgICAgcG9ydDogODAsXG4gICAgICAgIHRhcmdldHM6IFtmaXh0dXJlLmFzZ10sXG4gICAgICB9KTtcblxuICAgICAgLy8gV0hFTlxuICAgICAgZml4dHVyZS5hc2cuc2NhbGVPblJlcXVlc3RDb3VudCgnU2NhbGVSZXF1ZXN0Jywge1xuICAgICAgICB0YXJnZXRSZXF1ZXN0c1BlclNlY29uZDogMTBcbiAgICAgIH0pO1xuXG4gICAgICAvLyBUSEVOXG4gICAgICBjb25zdCBhcm5QYXJ0cyA9IHtcbiAgICAgICAgXCJGbjo6U3BsaXRcIjogW1xuICAgICAgICAgIFwiL1wiLFxuICAgICAgICAgIHsgUmVmOiBcIkFMQkxpc3RlbmVyM0I5OUZGODVcIiB9XG4gICAgICAgIF19O1xuXG4gICAgICBleHBlY3Qoc3RhY2spLnRvKGhhdmVSZXNvdXJjZSgnQVdTOjpBdXRvU2NhbGluZzo6U2NhbGluZ1BvbGljeScsIHtcbiAgICAgICAgUG9saWN5VHlwZTogXCJUYXJnZXRUcmFja2luZ1NjYWxpbmdcIixcbiAgICAgICAgVGFyZ2V0VHJhY2tpbmdDb25maWd1cmF0aW9uOiB7XG4gICAgICAgICAgVGFyZ2V0VmFsdWU6IDEwLFxuICAgICAgICAgIFByZWRlZmluZWRNZXRyaWNTcGVjaWZpY2F0aW9uOiB7XG4gICAgICAgICAgICBQcmVkZWZpbmVkTWV0cmljVHlwZTogXCJBTEJSZXF1ZXN0Q291bnRQZXJUYXJnZXRcIixcbiAgICAgICAgICAgIFJlc291cmNlTGFiZWw6IHsgXCJGbjo6Sm9pblwiOiBbIFwiXCIsIFtcbiAgICAgICAgICAgICAgICAgIHsgXCJGbjo6U2VsZWN0XCI6IFsgMSwgYXJuUGFydHMgXSB9LFxuICAgICAgICAgICAgICAgICAgXCIvXCIsXG4gICAgICAgICAgICAgICAgICB7IFwiRm46OlNlbGVjdFwiOiBbIDIsIGFyblBhcnRzIF0gfSxcbiAgICAgICAgICAgICAgICAgIFwiL1wiLFxuICAgICAgICAgICAgICAgICAgeyBcIkZuOjpTZWxlY3RcIjogWyAzLCBhcm5QYXJ0cyBdIH0sXG4gICAgICAgICAgICAgICAgICBcIi9cIixcbiAgICAgICAgICAgICAgICAgIHsgXCJGbjo6R2V0QXR0XCI6IFsgXCJBTEJMaXN0ZW5lclRhcmdldHNHcm91cDAxRDc3MTZBXCIsIFwiVGFyZ2V0R3JvdXBGdWxsTmFtZVwiIF0gfVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9KSk7XG5cbiAgICAgIHRlc3QuZG9uZSgpO1xuICAgIH0sXG5cbiAgICAnY3VzdG9tIG1ldHJpYycodGVzdDogVGVzdCkge1xuICAgICAgLy8gR0lWRU5cbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgICAgY29uc3QgZml4dHVyZSA9IG5ldyBBU0dGaXh0dXJlKHN0YWNrLCAnRml4dHVyZScpO1xuXG4gICAgICAvLyBXSEVOXG4gICAgICBmaXh0dXJlLmFzZy5zY2FsZVRvVHJhY2tNZXRyaWMoJ01ldHJpYycsIHtcbiAgICAgICAgbWV0cmljOiBuZXcgY2xvdWR3YXRjaC5NZXRyaWMoe1xuICAgICAgICAgIG1ldHJpY05hbWU6ICdIZW5rJyxcbiAgICAgICAgICBuYW1lc3BhY2U6ICdUZXN0JyxcbiAgICAgICAgICBkaW1lbnNpb25zOiB7XG4gICAgICAgICAgICBNdXN0YWNoZTogJ0J1c2h5J1xuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICAgIHRhcmdldFZhbHVlOiAyXG4gICAgICB9KTtcblxuICAgICAgLy8gVEhFTlxuICAgICAgZXhwZWN0KHN0YWNrKS50byhoYXZlUmVzb3VyY2UoJ0FXUzo6QXV0b1NjYWxpbmc6OlNjYWxpbmdQb2xpY3knLCB7XG4gICAgICAgIFBvbGljeVR5cGU6IFwiVGFyZ2V0VHJhY2tpbmdTY2FsaW5nXCIsXG4gICAgICAgIFRhcmdldFRyYWNraW5nQ29uZmlndXJhdGlvbjoge1xuICAgICAgICAgIEN1c3RvbWl6ZWRNZXRyaWNTcGVjaWZpY2F0aW9uOiB7XG4gICAgICAgICAgICBEaW1lbnNpb25zOiBbeyBOYW1lOiAnTXVzdGFjaGUnLCBWYWx1ZTogJ0J1c2h5JyB9XSxcbiAgICAgICAgICAgIE1ldHJpY05hbWU6IFwiSGVua1wiLFxuICAgICAgICAgICAgTmFtZXNwYWNlOiBcIlRlc3RcIixcbiAgICAgICAgICAgIFN0YXRpc3RpYzogXCJBdmVyYWdlXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFRhcmdldFZhbHVlOiAyXG4gICAgICAgIH1cbiAgICAgIH0pKTtcblxuICAgICAgdGVzdC5kb25lKCk7XG4gICAgfSxcbiAgfSxcblxuICAnc3RlcCBzY2FsaW5nJyh0ZXN0OiBUZXN0KSB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICBjb25zdCBmaXh0dXJlID0gbmV3IEFTR0ZpeHR1cmUoc3RhY2ssICdGaXh0dXJlJyk7XG5cbiAgICAvLyBXSEVOXG4gICAgZml4dHVyZS5hc2cuc2NhbGVPbk1ldHJpYygnTWV0cmljJywge1xuICAgICAgbWV0cmljOiBuZXcgY2xvdWR3YXRjaC5NZXRyaWMoe1xuICAgICAgICBtZXRyaWNOYW1lOiAnTGVncycsXG4gICAgICAgIG5hbWVzcGFjZTogJ0hlbmsnLFxuICAgICAgICBkaW1lbnNpb25zOiB7IE11c3RhY2hlOiAnQnVzaHknIH1cbiAgICAgIH0pLFxuICAgICAgLy8gQWRqdXN0IHRoZSBudW1iZXIgb2YgbGVncyB0byBiZSBjbG9zZXIgdG8gMlxuICAgICAgc2NhbGluZ1N0ZXBzOiBbXG4gICAgICAgIHsgbG93ZXI6IDAsIHVwcGVyOiAyLCBjaGFuZ2U6ICsxIH0sXG4gICAgICAgIHsgbG93ZXI6IDMsIHVwcGVyOiA1LCBjaGFuZ2U6IC0xIH0sXG4gICAgICAgIHsgbG93ZXI6IDUsIGNoYW5nZTogLTIgfSAvLyBNdXN0IHdvcmsgaGFyZGVyIHRvIHJlbW92ZSBsZWdzXG4gICAgICBdXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOOiBzY2FsaW5nIGluIHBvbGljeVxuICAgIGV4cGVjdChzdGFjaykudG8oaGF2ZVJlc291cmNlKCdBV1M6OkF1dG9TY2FsaW5nOjpTY2FsaW5nUG9saWN5Jywge1xuICAgICAgTWV0cmljQWdncmVnYXRpb25UeXBlOiBcIkF2ZXJhZ2VcIixcbiAgICAgIFBvbGljeVR5cGU6IFwiU3RlcFNjYWxpbmdcIixcbiAgICAgIFN0ZXBBZGp1c3RtZW50czogW1xuICAgICAgICB7XG4gICAgICAgICAgTWV0cmljSW50ZXJ2YWxMb3dlckJvdW5kOiAwLFxuICAgICAgICAgIE1ldHJpY0ludGVydmFsVXBwZXJCb3VuZDogMixcbiAgICAgICAgICBTY2FsaW5nQWRqdXN0bWVudDogLTFcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIE1ldHJpY0ludGVydmFsTG93ZXJCb3VuZDogMixcbiAgICAgICAgICBTY2FsaW5nQWRqdXN0bWVudDogLTJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0pKTtcblxuICAgIGV4cGVjdChzdGFjaykudG8oaGF2ZVJlc291cmNlKCdBV1M6OkNsb3VkV2F0Y2g6OkFsYXJtJywge1xuICAgICAgQ29tcGFyaXNvbk9wZXJhdG9yOiBcIkdyZWF0ZXJUaGFuT3JFcXVhbFRvVGhyZXNob2xkXCIsXG4gICAgICBUaHJlc2hvbGQ6IDMsXG4gICAgICBBbGFybUFjdGlvbnM6IFsgeyBSZWY6IFwiRml4dHVyZUFTR01ldHJpY1VwcGVyUG9saWN5QzQ2NENBRkJcIiB9IF0sXG4gICAgICBBbGFybURlc2NyaXB0aW9uOiBcIlVwcGVyIHRocmVzaG9sZCBzY2FsaW5nIGFsYXJtXCIsXG4gICAgfSkpO1xuXG4gICAgLy8gVEhFTjogc2NhbGluZyBvdXQgcG9saWN5XG4gICAgZXhwZWN0KHN0YWNrKS50byhoYXZlUmVzb3VyY2UoJ0FXUzo6QXV0b1NjYWxpbmc6OlNjYWxpbmdQb2xpY3knLCB7XG4gICAgICBNZXRyaWNBZ2dyZWdhdGlvblR5cGU6IFwiQXZlcmFnZVwiLFxuICAgICAgUG9saWN5VHlwZTogXCJTdGVwU2NhbGluZ1wiLFxuICAgICAgU3RlcEFkanVzdG1lbnRzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBNZXRyaWNJbnRlcnZhbFVwcGVyQm91bmQ6IDAsXG4gICAgICAgICAgU2NhbGluZ0FkanVzdG1lbnQ6IDFcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0pKTtcblxuICAgIGV4cGVjdChzdGFjaykudG8oaGF2ZVJlc291cmNlKCdBV1M6OkNsb3VkV2F0Y2g6OkFsYXJtJywge1xuICAgICAgQ29tcGFyaXNvbk9wZXJhdG9yOiBcIkxlc3NUaGFuT3JFcXVhbFRvVGhyZXNob2xkXCIsXG4gICAgICBUaHJlc2hvbGQ6IDIsXG4gICAgICBBbGFybUFjdGlvbnM6IFsgeyBSZWY6IFwiRml4dHVyZUFTR01ldHJpY0xvd2VyUG9saWN5NEExQ0RFNDJcIiB9IF0sXG4gICAgICBBbGFybURlc2NyaXB0aW9uOiBcIkxvd2VyIHRocmVzaG9sZCBzY2FsaW5nIGFsYXJtXCIsXG4gICAgfSkpO1xuXG4gICAgdGVzdC5kb25lKCk7XG4gIH1cbn07XG5cbmNsYXNzIEFTR0ZpeHR1cmUgZXh0ZW5kcyBjZGsuQ29uc3RydWN0IHtcbiAgcHVibGljIHJlYWRvbmx5IHZwYzogZWMyLlZwYztcbiAgcHVibGljIHJlYWRvbmx5IGFzZzogYXV0b3NjYWxpbmcuQXV0b1NjYWxpbmdHcm91cDtcblxuICBjb25zdHJ1Y3RvcihzY29wZTogY2RrLkNvbnN0cnVjdCwgaWQ6IHN0cmluZykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICB0aGlzLnZwYyA9IG5ldyBlYzIuVnBjKHRoaXMsICdWUEMnKTtcbiAgICB0aGlzLmFzZyA9IG5ldyBhdXRvc2NhbGluZy5BdXRvU2NhbGluZ0dyb3VwKHRoaXMsICdBU0cnLCB7XG4gICAgICB2cGM6IHRoaXMudnBjLFxuICAgICAgaW5zdGFuY2VUeXBlOiBlYzIuSW5zdGFuY2VUeXBlLm9mKGVjMi5JbnN0YW5jZUNsYXNzLk00LCBlYzIuSW5zdGFuY2VTaXplLk1JQ1JPKSxcbiAgICAgIG1hY2hpbmVJbWFnZTogbmV3IGVjMi5BbWF6b25MaW51eEltYWdlKCksXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==