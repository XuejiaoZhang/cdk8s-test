"use strict";
const assert_1 = require("@aws-cdk/assert");
const ec2 = require("@aws-cdk/aws-ec2");
const elbv2 = require("@aws-cdk/aws-elasticloadbalancingv2");
const core_1 = require("@aws-cdk/core");
const ecs = require("../../lib");
// Test various cross-stack Cluster/Service/ALB scenario's
let app;
let stack1;
let stack2;
let cluster;
let service;
function expectIngress(stack) {
    assert_1.expect(stack).to(assert_1.haveResource('AWS::EC2::SecurityGroupIngress', {
        FromPort: 32768,
        ToPort: 65535,
        GroupId: { "Fn::ImportValue": "Stack1:ExportsOutputFnGetAttClusterDefaultAutoScalingGroupInstanceSecurityGroup1D15236AGroupIdEAB9C5E1" },
    }));
}
module.exports = {
    "setUp"(cb) {
        app = new core_1.App();
        stack1 = new core_1.Stack(app, 'Stack1');
        const vpc = new ec2.Vpc(stack1, 'Vpc');
        cluster = new ecs.Cluster(stack1, 'Cluster', {
            vpc,
            capacity: { instanceType: new ec2.InstanceType('t2.micro'), }
        });
        stack2 = new core_1.Stack(app, 'Stack2');
        const taskDefinition = new ecs.Ec2TaskDefinition(stack2, 'TD');
        const container = taskDefinition.addContainer('Main', {
            image: ecs.ContainerImage.fromRegistry('asdf'),
            memoryLimitMiB: 512
        });
        container.addPortMappings({ containerPort: 8000 });
        service = new ecs.Ec2Service(stack2, 'Service', {
            cluster,
            taskDefinition,
        });
        cb();
    },
    "ALB next to Service"(test) {
        // WHEN
        const lb = new elbv2.ApplicationLoadBalancer(stack2, "ALB", { vpc: cluster.vpc });
        const listener = lb.addListener("listener", { port: 80 });
        listener.addTargets("target", {
            port: 80,
            targets: [service]
        });
        // THEN: it shouldn't throw due to cyclic dependencies
        assert_1.expect(stack2).to(assert_1.haveResource('AWS::ECS::Service'));
        expectIngress(stack2);
        test.done();
    },
    "ALB next to Cluster"(test) {
        // WHEN
        const lb = new elbv2.ApplicationLoadBalancer(stack1, "ALB", { vpc: cluster.vpc });
        const listener = lb.addListener("listener", { port: 80 });
        listener.addTargets("target", {
            port: 80,
            targets: [service]
        });
        // THEN: it shouldn't throw due to cyclic dependencies
        assert_1.expect(stack2).to(assert_1.haveResource('AWS::ECS::Service'));
        expectIngress(stack2);
        test.done();
    },
    "ALB in its own stack"(test) {
        // WHEN
        const stack3 = new core_1.Stack(app, 'Stack3');
        const lb = new elbv2.ApplicationLoadBalancer(stack3, "ALB", { vpc: cluster.vpc });
        const listener = lb.addListener("listener", { port: 80 });
        listener.addTargets("target", {
            port: 80,
            targets: [service]
        });
        // THEN: it shouldn't throw due to cyclic dependencies
        assert_1.expect(stack2).to(assert_1.haveResource('AWS::ECS::Service'));
        expectIngress(stack2);
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5jcm9zcy1zdGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRlc3QuY3Jvc3Mtc3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDRDQUF1RDtBQUN2RCx3Q0FBd0M7QUFDeEMsNkRBQTZEO0FBQzdELHdDQUEyQztBQUUzQyxpQ0FBaUM7QUFFakMsMERBQTBEO0FBRTFELElBQUksR0FBUSxDQUFDO0FBQ2IsSUFBSSxNQUFhLENBQUM7QUFDbEIsSUFBSSxNQUFhLENBQUM7QUFDbEIsSUFBSSxPQUFvQixDQUFDO0FBQ3pCLElBQUksT0FBdUIsQ0FBQztBQWdGNUIsU0FBUyxhQUFhLENBQUMsS0FBWTtJQUNqQyxlQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLHFCQUFZLENBQUMsZ0NBQWdDLEVBQUU7UUFDOUQsUUFBUSxFQUFFLEtBQUs7UUFDZixNQUFNLEVBQUUsS0FBSztRQUNiLE9BQU8sRUFBRSxFQUFFLGlCQUFpQixFQUFFLHdHQUF3RyxFQUFFO0tBQ3pJLENBQUMsQ0FBQyxDQUFDO0FBQ04sQ0FBQztBQXBGRCxpQkFBUztJQUNQLE9BQU8sQ0FBQyxFQUFjO1FBQ3BCLEdBQUcsR0FBRyxJQUFJLFVBQUcsRUFBRSxDQUFDO1FBRWhCLE1BQU0sR0FBRyxJQUFJLFlBQUssQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDbEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN2QyxPQUFPLEdBQUcsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUU7WUFDM0MsR0FBRztZQUNILFFBQVEsRUFBRSxFQUFFLFlBQVksRUFBRSxJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLEdBQUc7U0FDOUQsQ0FBQyxDQUFDO1FBRUgsTUFBTSxHQUFHLElBQUksWUFBSyxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNsQyxNQUFNLGNBQWMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDL0QsTUFBTSxTQUFTLEdBQUcsY0FBYyxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUU7WUFDcEQsS0FBSyxFQUFFLEdBQUcsQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztZQUM5QyxjQUFjLEVBQUUsR0FBRztTQUNwQixDQUFDLENBQUM7UUFDSCxTQUFTLENBQUMsZUFBZSxDQUFDLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFFbkQsT0FBTyxHQUFHLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsU0FBUyxFQUFFO1lBQzlDLE9BQU87WUFDUCxjQUFjO1NBQ2YsQ0FBQyxDQUFDO1FBRUgsRUFBRSxFQUFFLENBQUM7SUFDUCxDQUFDO0lBRUQscUJBQXFCLENBQUMsSUFBVTtRQUM5QixPQUFPO1FBQ1AsTUFBTSxFQUFFLEdBQUcsSUFBSSxLQUFLLENBQUMsdUJBQXVCLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUNsRixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzFELFFBQVEsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFO1lBQzVCLElBQUksRUFBRSxFQUFFO1lBQ1IsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDO1NBQ25CLENBQUMsQ0FBQztRQUVILHNEQUFzRDtRQUN0RCxlQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLHFCQUFZLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDO1FBRXJELGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV0QixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQscUJBQXFCLENBQUMsSUFBVTtRQUM5QixPQUFPO1FBQ1AsTUFBTSxFQUFFLEdBQUcsSUFBSSxLQUFLLENBQUMsdUJBQXVCLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUNsRixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzFELFFBQVEsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFO1lBQzVCLElBQUksRUFBRSxFQUFFO1lBQ1IsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDO1NBQ25CLENBQUMsQ0FBQztRQUVILHNEQUFzRDtRQUN0RCxlQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLHFCQUFZLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDO1FBQ3JELGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV0QixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQsc0JBQXNCLENBQUMsSUFBVTtRQUMvQixPQUFPO1FBQ1AsTUFBTSxNQUFNLEdBQUcsSUFBSSxZQUFLLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sRUFBRSxHQUFHLElBQUksS0FBSyxDQUFDLHVCQUF1QixDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDbEYsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMxRCxRQUFRLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRTtZQUM1QixJQUFJLEVBQUUsRUFBRTtZQUNSLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQztTQUNuQixDQUFDLENBQUM7UUFFSCxzREFBc0Q7UUFDdEQsZUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxxQkFBWSxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQztRQUNyRCxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFdEIsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleHBlY3QsIGhhdmVSZXNvdXJjZSB9IGZyb20gJ0Bhd3MtY2RrL2Fzc2VydCc7XG5pbXBvcnQgKiBhcyBlYzIgZnJvbSAnQGF3cy1jZGsvYXdzLWVjMic7XG5pbXBvcnQgKiBhcyBlbGJ2MiBmcm9tICdAYXdzLWNkay9hd3MtZWxhc3RpY2xvYWRiYWxhbmNpbmd2Mic7XG5pbXBvcnQgeyBBcHAsIFN0YWNrIH0gZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgeyBUZXN0IH0gZnJvbSAnbm9kZXVuaXQnO1xuaW1wb3J0ICogYXMgZWNzIGZyb20gJy4uLy4uL2xpYic7XG5cbi8vIFRlc3QgdmFyaW91cyBjcm9zcy1zdGFjayBDbHVzdGVyL1NlcnZpY2UvQUxCIHNjZW5hcmlvJ3NcblxubGV0IGFwcDogQXBwO1xubGV0IHN0YWNrMTogU3RhY2s7XG5sZXQgc3RhY2syOiBTdGFjaztcbmxldCBjbHVzdGVyOiBlY3MuQ2x1c3RlcjtcbmxldCBzZXJ2aWNlOiBlY3MuRWMyU2VydmljZTtcblxuZXhwb3J0ID0ge1xuICBcInNldFVwXCIoY2I6ICgpID0+IHZvaWQpIHtcbiAgICBhcHAgPSBuZXcgQXBwKCk7XG5cbiAgICBzdGFjazEgPSBuZXcgU3RhY2soYXBwLCAnU3RhY2sxJyk7XG4gICAgY29uc3QgdnBjID0gbmV3IGVjMi5WcGMoc3RhY2sxLCAnVnBjJyk7XG4gICAgY2x1c3RlciA9IG5ldyBlY3MuQ2x1c3RlcihzdGFjazEsICdDbHVzdGVyJywge1xuICAgICAgdnBjLFxuICAgICAgY2FwYWNpdHk6IHsgaW5zdGFuY2VUeXBlOiBuZXcgZWMyLkluc3RhbmNlVHlwZSgndDIubWljcm8nKSwgfVxuICAgIH0pO1xuXG4gICAgc3RhY2syID0gbmV3IFN0YWNrKGFwcCwgJ1N0YWNrMicpO1xuICAgIGNvbnN0IHRhc2tEZWZpbml0aW9uID0gbmV3IGVjcy5FYzJUYXNrRGVmaW5pdGlvbihzdGFjazIsICdURCcpO1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IHRhc2tEZWZpbml0aW9uLmFkZENvbnRhaW5lcignTWFpbicsIHtcbiAgICAgIGltYWdlOiBlY3MuQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KCdhc2RmJyksXG4gICAgICBtZW1vcnlMaW1pdE1pQjogNTEyXG4gICAgfSk7XG4gICAgY29udGFpbmVyLmFkZFBvcnRNYXBwaW5ncyh7IGNvbnRhaW5lclBvcnQ6IDgwMDAgfSk7XG5cbiAgICBzZXJ2aWNlID0gbmV3IGVjcy5FYzJTZXJ2aWNlKHN0YWNrMiwgJ1NlcnZpY2UnLCB7XG4gICAgICBjbHVzdGVyLFxuICAgICAgdGFza0RlZmluaXRpb24sXG4gICAgfSk7XG5cbiAgICBjYigpO1xuICB9LFxuXG4gIFwiQUxCIG5leHQgdG8gU2VydmljZVwiKHRlc3Q6IFRlc3QpIHtcbiAgICAvLyBXSEVOXG4gICAgY29uc3QgbGIgPSBuZXcgZWxidjIuQXBwbGljYXRpb25Mb2FkQmFsYW5jZXIoc3RhY2syLCBcIkFMQlwiLCB7IHZwYzogY2x1c3Rlci52cGMgfSk7XG4gICAgY29uc3QgbGlzdGVuZXIgPSBsYi5hZGRMaXN0ZW5lcihcImxpc3RlbmVyXCIsIHsgcG9ydDogODAgfSk7XG4gICAgbGlzdGVuZXIuYWRkVGFyZ2V0cyhcInRhcmdldFwiLCB7XG4gICAgICBwb3J0OiA4MCxcbiAgICAgIHRhcmdldHM6IFtzZXJ2aWNlXVxuICAgIH0pO1xuXG4gICAgLy8gVEhFTjogaXQgc2hvdWxkbid0IHRocm93IGR1ZSB0byBjeWNsaWMgZGVwZW5kZW5jaWVzXG4gICAgZXhwZWN0KHN0YWNrMikudG8oaGF2ZVJlc291cmNlKCdBV1M6OkVDUzo6U2VydmljZScpKTtcblxuICAgIGV4cGVjdEluZ3Jlc3Moc3RhY2syKTtcblxuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuXG4gIFwiQUxCIG5leHQgdG8gQ2x1c3RlclwiKHRlc3Q6IFRlc3QpIHtcbiAgICAvLyBXSEVOXG4gICAgY29uc3QgbGIgPSBuZXcgZWxidjIuQXBwbGljYXRpb25Mb2FkQmFsYW5jZXIoc3RhY2sxLCBcIkFMQlwiLCB7IHZwYzogY2x1c3Rlci52cGMgfSk7XG4gICAgY29uc3QgbGlzdGVuZXIgPSBsYi5hZGRMaXN0ZW5lcihcImxpc3RlbmVyXCIsIHsgcG9ydDogODAgfSk7XG4gICAgbGlzdGVuZXIuYWRkVGFyZ2V0cyhcInRhcmdldFwiLCB7XG4gICAgICBwb3J0OiA4MCxcbiAgICAgIHRhcmdldHM6IFtzZXJ2aWNlXVxuICAgIH0pO1xuXG4gICAgLy8gVEhFTjogaXQgc2hvdWxkbid0IHRocm93IGR1ZSB0byBjeWNsaWMgZGVwZW5kZW5jaWVzXG4gICAgZXhwZWN0KHN0YWNrMikudG8oaGF2ZVJlc291cmNlKCdBV1M6OkVDUzo6U2VydmljZScpKTtcbiAgICBleHBlY3RJbmdyZXNzKHN0YWNrMik7XG5cbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcblxuICBcIkFMQiBpbiBpdHMgb3duIHN0YWNrXCIodGVzdDogVGVzdCkge1xuICAgIC8vIFdIRU5cbiAgICBjb25zdCBzdGFjazMgPSBuZXcgU3RhY2soYXBwLCAnU3RhY2szJyk7XG4gICAgY29uc3QgbGIgPSBuZXcgZWxidjIuQXBwbGljYXRpb25Mb2FkQmFsYW5jZXIoc3RhY2szLCBcIkFMQlwiLCB7IHZwYzogY2x1c3Rlci52cGMgfSk7XG4gICAgY29uc3QgbGlzdGVuZXIgPSBsYi5hZGRMaXN0ZW5lcihcImxpc3RlbmVyXCIsIHsgcG9ydDogODAgfSk7XG4gICAgbGlzdGVuZXIuYWRkVGFyZ2V0cyhcInRhcmdldFwiLCB7XG4gICAgICBwb3J0OiA4MCxcbiAgICAgIHRhcmdldHM6IFtzZXJ2aWNlXVxuICAgIH0pO1xuXG4gICAgLy8gVEhFTjogaXQgc2hvdWxkbid0IHRocm93IGR1ZSB0byBjeWNsaWMgZGVwZW5kZW5jaWVzXG4gICAgZXhwZWN0KHN0YWNrMikudG8oaGF2ZVJlc291cmNlKCdBV1M6OkVDUzo6U2VydmljZScpKTtcbiAgICBleHBlY3RJbmdyZXNzKHN0YWNrMik7XG5cbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcbn07XG5cbmZ1bmN0aW9uIGV4cGVjdEluZ3Jlc3Moc3RhY2s6IFN0YWNrKSB7XG4gIGV4cGVjdChzdGFjaykudG8oaGF2ZVJlc291cmNlKCdBV1M6OkVDMjo6U2VjdXJpdHlHcm91cEluZ3Jlc3MnLCB7XG4gICAgRnJvbVBvcnQ6IDMyNzY4LFxuICAgIFRvUG9ydDogNjU1MzUsXG4gICAgR3JvdXBJZDogeyBcIkZuOjpJbXBvcnRWYWx1ZVwiOiBcIlN0YWNrMTpFeHBvcnRzT3V0cHV0Rm5HZXRBdHRDbHVzdGVyRGVmYXVsdEF1dG9TY2FsaW5nR3JvdXBJbnN0YW5jZVNlY3VyaXR5R3JvdXAxRDE1MjM2QUdyb3VwSWRFQUI5QzVFMVwiIH0sXG4gIH0pKTtcbn0iXX0=