"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const log_driver_1 = require("./log-driver");
const utils_1 = require("./utils");
/**
 * A log driver that sends log information to syslog Logs.
 */
class SyslogLogDriver extends log_driver_1.LogDriver {
    /**
     * Constructs a new instance of the SyslogLogDriver class.
     *
     * @param props the syslog log driver configuration options.
     */
    constructor(props = {}) {
        super();
        this.props = props;
    }
    /**
     * Called when the log driver is configured on a container
     */
    bind(_scope, _containerDefinition) {
        return {
            logDriver: 'syslog',
            options: utils_1.stringifyOptions({
                'syslog-address': this.props.address,
                'syslog-facility': this.props.facility,
                'syslog-tls-ca-cert': this.props.tlsCaCert,
                'syslog-tls-cert': this.props.tlsCert,
                'syslog-tls-key': this.props.tlsKey,
                'syslog-tls-skip-verify': this.props.tlsSkipVerify,
                'syslog-format': this.props.format,
                ...utils_1.renderCommonLogDriverOptions(this.props)
            }),
        };
    }
}
exports.SyslogLogDriver = SyslogLogDriver;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3lzbG9nLWxvZy1kcml2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzeXNsb2ctbG9nLWRyaXZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUdBLDZDQUEwRDtBQUMxRCxtQ0FBeUU7QUFvRXpFOztHQUVHO0FBQ0gsTUFBYSxlQUFnQixTQUFRLHNCQUFTO0lBQzVDOzs7O09BSUc7SUFDSCxZQUE2QixRQUE4QixFQUFFO1FBQzNELEtBQUssRUFBRSxDQUFDO1FBRG1CLFVBQUssR0FBTCxLQUFLLENBQTJCO0lBRTdELENBQUM7SUFFRDs7T0FFRztJQUNJLElBQUksQ0FBQyxNQUFpQixFQUFFLG9CQUF5QztRQUN0RSxPQUFPO1lBQ0wsU0FBUyxFQUFFLFFBQVE7WUFDbkIsT0FBTyxFQUFFLHdCQUFnQixDQUFDO2dCQUN4QixnQkFBZ0IsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU87Z0JBQ3BDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUTtnQkFDdEMsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTO2dCQUMxQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU87Z0JBQ3JDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTTtnQkFDbkMsd0JBQXdCLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhO2dCQUNsRCxlQUFlLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNO2dCQUNsQyxHQUFHLG9DQUE0QixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7YUFDNUMsQ0FBQztTQUNILENBQUM7SUFDSixDQUFDO0NBQ0Y7QUE1QkQsMENBNEJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgeyBDb250YWluZXJEZWZpbml0aW9uIH0gZnJvbSAnLi4vY29udGFpbmVyLWRlZmluaXRpb24nO1xuaW1wb3J0IHsgQmFzZUxvZ0RyaXZlclByb3BzIH0gZnJvbSAnLi9iYXNlLWxvZy1kcml2ZXInO1xuaW1wb3J0IHsgTG9nRHJpdmVyLCBMb2dEcml2ZXJDb25maWcgfSBmcm9tIFwiLi9sb2ctZHJpdmVyXCI7XG5pbXBvcnQgeyByZW5kZXJDb21tb25Mb2dEcml2ZXJPcHRpb25zLCBzdHJpbmdpZnlPcHRpb25zIH0gZnJvbSAnLi91dGlscyc7XG5cbi8qKlxuICogU3BlY2lmaWVzIHRoZSBzeXNsb2cgbG9nIGRyaXZlciBjb25maWd1cmF0aW9uIG9wdGlvbnMuXG4gKlxuICogW1NvdXJjZV0oaHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vY29uZmlnL2NvbnRhaW5lcnMvbG9nZ2luZy9zeXNsb2cvKVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFN5c2xvZ0xvZ0RyaXZlclByb3BzIGV4dGVuZHMgQmFzZUxvZ0RyaXZlclByb3BzIHtcbiAgLyoqXG4gICAqIFRoZSBhZGRyZXNzIG9mIGFuIGV4dGVybmFsIHN5c2xvZyBzZXJ2ZXIuIFRoZSBVUkkgc3BlY2lmaWVyIG1heSBiZVxuICAgKiBbdGNwfHVkcHx0Y3ArdGxzXTovL2hvc3Q6cG9ydCwgdW5peDovL3BhdGgsIG9yIHVuaXhncmFtOi8vcGF0aC5cbiAgICpcbiAgICogQGRlZmF1bHQgLSBJZiB0aGUgdHJhbnNwb3J0IGlzIHRjcCwgdWRwLCBvciB0Y3ArdGxzLCB0aGUgZGVmYXVsdCBwb3J0IGlzIDUxNC5cbiAgICovXG4gIHJlYWRvbmx5IGFkZHJlc3M/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBzeXNsb2cgZmFjaWxpdHkgdG8gdXNlLiBDYW4gYmUgdGhlIG51bWJlciBvciBuYW1lIGZvciBhbnkgdmFsaWRcbiAgICogc3lzbG9nIGZhY2lsaXR5LiBTZWUgdGhlIHN5c2xvZyBkb2N1bWVudGF0aW9uOlxuICAgKiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNTQyNCNzZWN0aW9uLTYuMi4xLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIGZhY2lsaXR5IG5vdCBzZXRcbiAgICovXG4gIHJlYWRvbmx5IGZhY2lsaXR5Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgYWJzb2x1dGUgcGF0aCB0byB0aGUgdHJ1c3QgY2VydGlmaWNhdGVzIHNpZ25lZCBieSB0aGUgQ0EuIElnbm9yZWRcbiAgICogaWYgdGhlIGFkZHJlc3MgcHJvdG9jb2wgaXMgbm90IHRjcCt0bHMuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gdGxzQ2FDZXJ0IG5vdCBzZXRcbiAgICovXG4gIHJlYWRvbmx5IHRsc0NhQ2VydD86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGFic29sdXRlIHBhdGggdG8gdGhlIFRMUyBjZXJ0aWZpY2F0ZSBmaWxlLiBJZ25vcmVkIGlmIHRoZSBhZGRyZXNzXG4gICAqIHByb3RvY29sIGlzIG5vdCB0Y3ArdGxzLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIHRsc0NlcnQgbm90IHNldFxuICAgKi9cbiAgcmVhZG9ubHkgdGxzQ2VydD86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGFic29sdXRlIHBhdGggdG8gdGhlIFRMUyBrZXkgZmlsZS4gSWdub3JlZCBpZiB0aGUgYWRkcmVzcyBwcm90b2NvbFxuICAgKiBpcyBub3QgdGNwK3Rscy5cbiAgICpcbiAgICogQGRlZmF1bHQgLSB0bHNLZXkgbm90IHNldFxuICAgKi9cbiAgcmVhZG9ubHkgdGxzS2V5Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBJZiBzZXQgdG8gdHJ1ZSwgVExTIHZlcmlmaWNhdGlvbiBpcyBza2lwcGVkIHdoZW4gY29ubmVjdGluZyB0byB0aGUgc3lzbG9nXG4gICAqIGRhZW1vbi4gSWdub3JlZCBpZiB0aGUgYWRkcmVzcyBwcm90b2NvbCBpcyBub3QgdGNwK3Rscy5cbiAgICpcbiAgICogQGRlZmF1bHQgLSBmYWxzZVxuICAgKi9cbiAgcmVhZG9ubHkgdGxzU2tpcFZlcmlmeT86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoZSBzeXNsb2cgbWVzc2FnZSBmb3JtYXQgdG8gdXNlLiBJZiBub3Qgc3BlY2lmaWVkIHRoZSBsb2NhbCBVTklYIHN5c2xvZ1xuICAgKiBmb3JtYXQgaXMgdXNlZCwgd2l0aG91dCBhIHNwZWNpZmllZCBob3N0bmFtZS4gU3BlY2lmeSByZmMzMTY0IGZvciB0aGUgUkZDLTMxNjRcbiAgICogY29tcGF0aWJsZSBmb3JtYXQsIHJmYzU0MjQgZm9yIFJGQy01NDI0IGNvbXBhdGlibGUgZm9ybWF0LCBvciByZmM1NDI0bWljcm9cbiAgICogZm9yIFJGQy01NDI0IGNvbXBhdGlibGUgZm9ybWF0IHdpdGggbWljcm9zZWNvbmQgdGltZXN0YW1wIHJlc29sdXRpb24uXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gZm9ybWF0IG5vdCBzZXRcbiAgICovXG4gIHJlYWRvbmx5IGZvcm1hdD86IHN0cmluZztcbn1cblxuLyoqXG4gKiBBIGxvZyBkcml2ZXIgdGhhdCBzZW5kcyBsb2cgaW5mb3JtYXRpb24gdG8gc3lzbG9nIExvZ3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBTeXNsb2dMb2dEcml2ZXIgZXh0ZW5kcyBMb2dEcml2ZXIge1xuICAvKipcbiAgICogQ29uc3RydWN0cyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgU3lzbG9nTG9nRHJpdmVyIGNsYXNzLlxuICAgKlxuICAgKiBAcGFyYW0gcHJvcHMgdGhlIHN5c2xvZyBsb2cgZHJpdmVyIGNvbmZpZ3VyYXRpb24gb3B0aW9ucy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgcHJvcHM6IFN5c2xvZ0xvZ0RyaXZlclByb3BzID0ge30pIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIHRoZSBsb2cgZHJpdmVyIGlzIGNvbmZpZ3VyZWQgb24gYSBjb250YWluZXJcbiAgICovXG4gIHB1YmxpYyBiaW5kKF9zY29wZTogQ29uc3RydWN0LCBfY29udGFpbmVyRGVmaW5pdGlvbjogQ29udGFpbmVyRGVmaW5pdGlvbik6IExvZ0RyaXZlckNvbmZpZyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxvZ0RyaXZlcjogJ3N5c2xvZycsXG4gICAgICBvcHRpb25zOiBzdHJpbmdpZnlPcHRpb25zKHtcbiAgICAgICAgJ3N5c2xvZy1hZGRyZXNzJzogdGhpcy5wcm9wcy5hZGRyZXNzLFxuICAgICAgICAnc3lzbG9nLWZhY2lsaXR5JzogdGhpcy5wcm9wcy5mYWNpbGl0eSxcbiAgICAgICAgJ3N5c2xvZy10bHMtY2EtY2VydCc6IHRoaXMucHJvcHMudGxzQ2FDZXJ0LFxuICAgICAgICAnc3lzbG9nLXRscy1jZXJ0JzogdGhpcy5wcm9wcy50bHNDZXJ0LFxuICAgICAgICAnc3lzbG9nLXRscy1rZXknOiB0aGlzLnByb3BzLnRsc0tleSxcbiAgICAgICAgJ3N5c2xvZy10bHMtc2tpcC12ZXJpZnknOiB0aGlzLnByb3BzLnRsc1NraXBWZXJpZnksXG4gICAgICAgICdzeXNsb2ctZm9ybWF0JzogdGhpcy5wcm9wcy5mb3JtYXQsXG4gICAgICAgIC4uLnJlbmRlckNvbW1vbkxvZ0RyaXZlck9wdGlvbnModGhpcy5wcm9wcylcbiAgICAgIH0pLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==