"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const log_driver_1 = require("./log-driver");
const utils_1 = require("./utils");
/**
 * The type of compression the GELF driver uses to compress each log message.
 */
var GelfCompressionType;
(function (GelfCompressionType) {
    GelfCompressionType["GZIP"] = "gzip";
    GelfCompressionType["ZLIB"] = "zlib";
    GelfCompressionType["NONE"] = "none";
})(GelfCompressionType = exports.GelfCompressionType || (exports.GelfCompressionType = {}));
/**
 * A log driver that sends log information to journald Logs.
 */
class GelfLogDriver extends log_driver_1.LogDriver {
    /**
     * Constructs a new instance of the GelfLogDriver class.
     *
     * @param props the gelf log driver configuration options.
     */
    constructor(props) {
        super();
        this.props = props;
        // Validation
        if (props.compressionLevel) {
            utils_1.ensureInRange(props.compressionLevel, -1, 9);
        }
        if (props.tcpMaxReconnect) {
            utils_1.ensurePositiveInteger(props.tcpMaxReconnect);
        }
    }
    /**
     * Called when the log driver is configured on a container
     */
    bind(_scope, _containerDefinition) {
        return {
            logDriver: 'gelf',
            options: utils_1.stringifyOptions({
                'gelf-address': this.props.address,
                'gelf-compression-type': this.props.compressionType,
                'gelf-compression-level': this.props.compressionLevel,
                'gelf-tcp-max-reconnect': this.props.tcpMaxReconnect,
                'gelf-tcp-reconnect-delay': this.props.tcpReconnectDelay && this.props.tcpReconnectDelay.toSeconds(),
                ...utils_1.renderCommonLogDriverOptions(this.props)
            }),
        };
    }
}
exports.GelfLogDriver = GelfLogDriver;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VsZi1sb2ctZHJpdmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZ2VsZi1sb2ctZHJpdmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0EsNkNBQTBEO0FBQzFELG1DQUErRztBQUUvRzs7R0FFRztBQUNILElBQVksbUJBSVg7QUFKRCxXQUFZLG1CQUFtQjtJQUM3QixvQ0FBYSxDQUFBO0lBQ2Isb0NBQWEsQ0FBQTtJQUNiLG9DQUFhLENBQUE7QUFDZixDQUFDLEVBSlcsbUJBQW1CLEdBQW5CLDJCQUFtQixLQUFuQiwyQkFBbUIsUUFJOUI7QUFnREQ7O0dBRUc7QUFDSCxNQUFhLGFBQWMsU0FBUSxzQkFBUztJQUMxQzs7OztPQUlHO0lBQ0gsWUFBNkIsS0FBeUI7UUFDcEQsS0FBSyxFQUFFLENBQUM7UUFEbUIsVUFBSyxHQUFMLEtBQUssQ0FBb0I7UUFHcEQsYUFBYTtRQUNiLElBQUksS0FBSyxDQUFDLGdCQUFnQixFQUFFO1lBQzFCLHFCQUFhLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQzlDO1FBRUQsSUFBSSxLQUFLLENBQUMsZUFBZSxFQUFFO1lBQ3pCLDZCQUFxQixDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztTQUM5QztJQUNILENBQUM7SUFFRDs7T0FFRztJQUNJLElBQUksQ0FBQyxNQUFpQixFQUFFLG9CQUF5QztRQUN0RSxPQUFPO1lBQ0wsU0FBUyxFQUFFLE1BQU07WUFDakIsT0FBTyxFQUFFLHdCQUFnQixDQUFDO2dCQUN4QixjQUFjLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPO2dCQUNsQyx1QkFBdUIsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLGVBQWU7Z0JBQ25ELHdCQUF3QixFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCO2dCQUNyRCx3QkFBd0IsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLGVBQWU7Z0JBQ3BELDBCQUEwQixFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQWlCLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLEVBQUU7Z0JBQ3BHLEdBQUcsb0NBQTRCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQzthQUM1QyxDQUFDO1NBQ0gsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQW5DRCxzQ0FtQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QsIER1cmF0aW9uIH0gZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgeyBDb250YWluZXJEZWZpbml0aW9uIH0gZnJvbSAnLi4vY29udGFpbmVyLWRlZmluaXRpb24nO1xuaW1wb3J0IHsgQmFzZUxvZ0RyaXZlclByb3BzIH0gZnJvbSAnLi9iYXNlLWxvZy1kcml2ZXInO1xuaW1wb3J0IHsgTG9nRHJpdmVyLCBMb2dEcml2ZXJDb25maWcgfSBmcm9tIFwiLi9sb2ctZHJpdmVyXCI7XG5pbXBvcnQgeyBlbnN1cmVJblJhbmdlLCBlbnN1cmVQb3NpdGl2ZUludGVnZXIsIHJlbmRlckNvbW1vbkxvZ0RyaXZlck9wdGlvbnMsIHN0cmluZ2lmeU9wdGlvbnMgfSBmcm9tICcuL3V0aWxzJztcblxuLyoqXG4gKiBUaGUgdHlwZSBvZiBjb21wcmVzc2lvbiB0aGUgR0VMRiBkcml2ZXIgdXNlcyB0byBjb21wcmVzcyBlYWNoIGxvZyBtZXNzYWdlLlxuICovXG5leHBvcnQgZW51bSBHZWxmQ29tcHJlc3Npb25UeXBlIHtcbiAgR1pJUCA9ICdnemlwJyxcbiAgWkxJQiA9ICd6bGliJyxcbiAgTk9ORSA9ICdub25lJ1xufVxuXG4vKipcbiAqIFNwZWNpZmllcyB0aGUgam91cm5hbGQgbG9nIGRyaXZlciBjb25maWd1cmF0aW9uIG9wdGlvbnMuXG4gKlxuICogW1NvdXJjZV0oaHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vY29uZmlnL2NvbnRhaW5lcnMvbG9nZ2luZy9nZWxmLylcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBHZWxmTG9nRHJpdmVyUHJvcHMgZXh0ZW5kcyBCYXNlTG9nRHJpdmVyUHJvcHMge1xuICAvKipcbiAgICogVGhlIGFkZHJlc3Mgb2YgdGhlIEdFTEYgc2VydmVyLiB0Y3AgYW5kIHVkcCBhcmUgdGhlIG9ubHkgc3VwcG9ydGVkIFVSSVxuICAgKiBzcGVjaWZpZXIgYW5kIHlvdSBtdXN0IHNwZWNpZnkgdGhlIHBvcnQuXG4gICAqL1xuICByZWFkb25seSBhZGRyZXNzOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFVEUCBPbmx5IFRoZSB0eXBlIG9mIGNvbXByZXNzaW9uIHRoZSBHRUxGIGRyaXZlciB1c2VzIHRvIGNvbXByZXNzIGVhY2hcbiAgICogbG9nIG1lc3NhZ2UuIEFsbG93ZWQgdmFsdWVzIGFyZSBnemlwLCB6bGliIGFuZCBub25lLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIGd6aXBcbiAgICovXG4gIHJlYWRvbmx5IGNvbXByZXNzaW9uVHlwZT86IEdlbGZDb21wcmVzc2lvblR5cGU7XG5cbiAgLyoqXG4gICAqIFVEUCBPbmx5IFRoZSBsZXZlbCBvZiBjb21wcmVzc2lvbiB3aGVuIGd6aXAgb3IgemxpYiBpcyB0aGUgZ2VsZi1jb21wcmVzc2lvbi10eXBlLlxuICAgKiBBbiBpbnRlZ2VyIGluIHRoZSByYW5nZSBvZiAtMSB0byA5IChCZXN0Q29tcHJlc3Npb24pLiBIaWdoZXIgbGV2ZWxzIHByb3ZpZGUgbW9yZVxuICAgKiBjb21wcmVzc2lvbiBhdCBsb3dlciBzcGVlZC4gRWl0aGVyIC0xIG9yIDAgZGlzYWJsZXMgY29tcHJlc3Npb24uXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gMVxuICAgKi9cbiAgcmVhZG9ubHkgY29tcHJlc3Npb25MZXZlbD86IG51bWJlcjtcblxuICAvKipcbiAgICogVENQIE9ubHkgVGhlIG1heGltdW0gbnVtYmVyIG9mIHJlY29ubmVjdGlvbiBhdHRlbXB0cyB3aGVuIHRoZSBjb25uZWN0aW9uIGRyb3AuXG4gICAqIEEgcG9zaXRpdmUgaW50ZWdlci5cbiAgICpcbiAgICogQGRlZmF1bHQgLSAzXG4gICAqL1xuICByZWFkb25seSB0Y3BNYXhSZWNvbm5lY3Q/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRDUCBPbmx5IFRoZSBudW1iZXIgb2Ygc2Vjb25kcyB0byB3YWl0IGJldHdlZW4gcmVjb25uZWN0aW9uIGF0dGVtcHRzLlxuICAgKiBBIHBvc2l0aXZlIGludGVnZXIuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gMVxuICAgKi9cbiAgcmVhZG9ubHkgdGNwUmVjb25uZWN0RGVsYXk/OiBEdXJhdGlvbjtcbn1cblxuLyoqXG4gKiBBIGxvZyBkcml2ZXIgdGhhdCBzZW5kcyBsb2cgaW5mb3JtYXRpb24gdG8gam91cm5hbGQgTG9ncy5cbiAqL1xuZXhwb3J0IGNsYXNzIEdlbGZMb2dEcml2ZXIgZXh0ZW5kcyBMb2dEcml2ZXIge1xuICAvKipcbiAgICogQ29uc3RydWN0cyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgR2VsZkxvZ0RyaXZlciBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIHByb3BzIHRoZSBnZWxmIGxvZyBkcml2ZXIgY29uZmlndXJhdGlvbiBvcHRpb25zLlxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBwcm9wczogR2VsZkxvZ0RyaXZlclByb3BzKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIC8vIFZhbGlkYXRpb25cbiAgICBpZiAocHJvcHMuY29tcHJlc3Npb25MZXZlbCkge1xuICAgICAgZW5zdXJlSW5SYW5nZShwcm9wcy5jb21wcmVzc2lvbkxldmVsLCAtMSwgOSk7XG4gICAgfVxuXG4gICAgaWYgKHByb3BzLnRjcE1heFJlY29ubmVjdCkge1xuICAgICAgZW5zdXJlUG9zaXRpdmVJbnRlZ2VyKHByb3BzLnRjcE1heFJlY29ubmVjdCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIHRoZSBsb2cgZHJpdmVyIGlzIGNvbmZpZ3VyZWQgb24gYSBjb250YWluZXJcbiAgICovXG4gIHB1YmxpYyBiaW5kKF9zY29wZTogQ29uc3RydWN0LCBfY29udGFpbmVyRGVmaW5pdGlvbjogQ29udGFpbmVyRGVmaW5pdGlvbik6IExvZ0RyaXZlckNvbmZpZyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxvZ0RyaXZlcjogJ2dlbGYnLFxuICAgICAgb3B0aW9uczogc3RyaW5naWZ5T3B0aW9ucyh7XG4gICAgICAgICdnZWxmLWFkZHJlc3MnOiB0aGlzLnByb3BzLmFkZHJlc3MsXG4gICAgICAgICdnZWxmLWNvbXByZXNzaW9uLXR5cGUnOiB0aGlzLnByb3BzLmNvbXByZXNzaW9uVHlwZSxcbiAgICAgICAgJ2dlbGYtY29tcHJlc3Npb24tbGV2ZWwnOiB0aGlzLnByb3BzLmNvbXByZXNzaW9uTGV2ZWwsXG4gICAgICAgICdnZWxmLXRjcC1tYXgtcmVjb25uZWN0JzogdGhpcy5wcm9wcy50Y3BNYXhSZWNvbm5lY3QsXG4gICAgICAgICdnZWxmLXRjcC1yZWNvbm5lY3QtZGVsYXknOiB0aGlzLnByb3BzLnRjcFJlY29ubmVjdERlbGF5ICYmIHRoaXMucHJvcHMudGNwUmVjb25uZWN0RGVsYXkudG9TZWNvbmRzKCksXG4gICAgICAgIC4uLnJlbmRlckNvbW1vbkxvZ0RyaXZlck9wdGlvbnModGhpcy5wcm9wcylcbiAgICAgIH0pLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==