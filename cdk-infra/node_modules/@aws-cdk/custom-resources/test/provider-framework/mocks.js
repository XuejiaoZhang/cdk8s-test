"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const url_1 = require("url");
const consts = require("../../lib/provider-framework/runtime/consts");
exports.MOCK_REQUEST = {
    ResponseURL: "http://pre-signed-S3-url-for-response/path/in/bucket",
    LogicalResourceId: 'MyTestResource',
    RequestId: "uniqueid-for-this-create-request",
    StackId: 'arn:aws:cloudformation:us-west-2:123456789012:stack/stack-name/guid',
};
exports.MOCK_ON_EVENT_FUNCTION_ARN = 'arn:lambda:user:on:event';
exports.MOCK_IS_COMPLETE_FUNCTION_ARN = 'arn:lambda:user:is:complete';
exports.MOCK_SFN_ARN = 'arn:of:state:machine';
exports.stringifyPayload = true;
function setup() {
    process.env[consts.WAITER_STATE_MACHINE_ARN_ENV] = exports.MOCK_SFN_ARN;
    exports.stringifyPayload = true;
    exports.onEventImplMock = undefined;
    exports.isCompleteImplMock = undefined;
    exports.cfnResponse = {};
    exports.startStateMachineInput = undefined;
}
exports.setup = setup;
async function httpRequestMock(options, body) {
    const responseUrl = url_1.parse(exports.MOCK_REQUEST.ResponseURL);
    expect(options.method).toEqual('PUT');
    expect(options.path).toEqual(responseUrl.path);
    expect(options.hostname).toEqual(responseUrl.hostname);
    const headers = options.headers || {};
    expect(headers['content-length']).toEqual(body.length);
    expect(headers['content-type']).toStrictEqual("");
    exports.cfnResponse = JSON.parse(body);
    if (!exports.cfnResponse) {
        throw new Error('unexpected');
    }
    // we always expect a physical resource id
    expect(exports.cfnResponse.PhysicalResourceId).toBeTruthy();
    // we always expect a reason
    expect(exports.cfnResponse.Reason).toBeTruthy();
    expect(exports.cfnResponse.LogicalResourceId).toEqual(exports.MOCK_REQUEST.LogicalResourceId);
    expect(exports.cfnResponse.RequestId).toEqual(exports.MOCK_REQUEST.RequestId);
    expect(exports.cfnResponse.StackId).toEqual(exports.MOCK_REQUEST.StackId);
    expect(exports.cfnResponse.Status === 'FAILED' || exports.cfnResponse.Status === 'SUCCESS').toBeTruthy();
}
exports.httpRequestMock = httpRequestMock;
async function invokeFunctionMock(req) {
    if (!req.Payload || typeof (req.Payload) !== 'string') {
        throw new Error(`invalid payload of type ${typeof (req.Payload)}}`);
    }
    const input = JSON.parse(req.Payload);
    try {
        let ret;
        switch (req.FunctionName) {
            case exports.MOCK_ON_EVENT_FUNCTION_ARN:
                if (!exports.onEventImplMock) {
                    throw new Error(`Trying to trigger "onEvent" but it is not implemented`);
                }
                ret = await exports.onEventImplMock(input);
                break;
            case exports.MOCK_IS_COMPLETE_FUNCTION_ARN:
                if (!exports.isCompleteImplMock) {
                    throw new Error(`Trying to trigger "isComplete" but it is not implemented`);
                }
                ret = await exports.isCompleteImplMock(input);
                break;
            default:
                throw new Error(`unknown mock function`);
        }
        return {
            Payload: exports.stringifyPayload ? JSON.stringify(ret) : ret
        };
    }
    catch (e) {
        return {
            FunctionError: 'Unhandled',
            Payload: JSON.stringify({
                errorType: e.name,
                errorMessage: e.message,
                trace: [
                    "AccessDenied: Access Denied",
                    "    at Request.extractError (/var/runtime/node_modules/aws-sdk/lib/services/s3.js:585:35)",
                    "    at Request.callListeners (/var/runtime/node_modules/aws-sdk/lib/sequential_executor.js:106:20)",
                    "    at Request.emit (/var/runtime/node_modules/aws-sdk/lib/sequential_executor.js:78:10)",
                    "    at Request.emit (/var/runtime/node_modules/aws-sdk/lib/request.js:683:14)",
                    "    at Request.transition (/var/runtime/node_modules/aws-sdk/lib/request.js:22:10)",
                    "    at AcceptorStateMachine.runTo (/var/runtime/node_modules/aws-sdk/lib/state_machine.js:14:12)",
                    "    at /var/runtime/node_modules/aws-sdk/lib/state_machine.js:26:10",
                    "    at Request.<anonymous> (/var/runtime/node_modules/aws-sdk/lib/request.js:38:9)",
                    "    at Request.<anonymous> (/var/runtime/node_modules/aws-sdk/lib/request.js:685:12)",
                    "    at Request.callListeners (/var/runtime/node_modules/aws-sdk/lib/sequential_executor.js:116:18)"
                ]
            })
        };
    }
}
exports.invokeFunctionMock = invokeFunctionMock;
function prepareForExecution() {
    exports.startStateMachineInput = undefined;
    if (exports.onEventImplMock) {
        process.env[consts.USER_ON_EVENT_FUNCTION_ARN_ENV] = exports.MOCK_ON_EVENT_FUNCTION_ARN;
    }
    else {
        delete process.env[consts.USER_ON_EVENT_FUNCTION_ARN_ENV];
    }
    if (exports.isCompleteImplMock) {
        process.env[consts.USER_IS_COMPLETE_FUNCTION_ARN_ENV] = exports.MOCK_IS_COMPLETE_FUNCTION_ARN;
    }
    else {
        delete process.env[consts.USER_IS_COMPLETE_FUNCTION_ARN_ENV];
    }
}
exports.prepareForExecution = prepareForExecution;
async function startExecutionMock(req) {
    exports.startStateMachineInput = req;
    expect(req.stateMachineArn).toEqual(exports.MOCK_SFN_ARN);
    return {
        executionArn: req.stateMachineArn + '/execution',
        startDate: new Date(),
    };
}
exports.startExecutionMock = startExecutionMock;
//# sourceMappingURL=data:application/json;base64,