"use strict";
const autoscaling = require("@aws-cdk/aws-autoscaling");
const ec2 = require("@aws-cdk/aws-ec2");
const core_1 = require("@aws-cdk/core");
const user_data_1 = require("../lib/user-data");
function newFixtures(spot = false) {
    const app = new core_1.App();
    const stack = new core_1.Stack(app, 'my-stack', { env: { region: 'us-west-33' } });
    const vpc = new ec2.Vpc(stack, 'vpc');
    const asg = new autoscaling.AutoScalingGroup(stack, 'ASG', {
        instanceType: new ec2.InstanceType('m4.xlarge'),
        machineImage: new ec2.AmazonLinuxImage(),
        spotPrice: spot ? '0.01' : undefined,
        vpc
    });
    return { stack, vpc, asg };
}
module.exports = {
    'default user data'(test) {
        // GIVEN
        const { asg, stack } = newFixtures();
        // WHEN
        const userData = stack.resolve(user_data_1.renderUserData('my-cluster-name', asg));
        // THEN
        test.deepEqual(userData, [
            'set -o xtrace',
            '/etc/eks/bootstrap.sh my-cluster-name --kubelet-extra-args "--node-labels lifecycle=OnDemand" --use-max-pods true',
            '/opt/aws/bin/cfn-signal --exit-code $? --stack my-stack --resource ASG46ED3070 --region us-west-33'
        ]);
        test.done();
    },
    '--use-max-pods=true'(test) {
        // GIVEN
        const { asg, stack } = newFixtures();
        // WHEN
        const userData = stack.resolve(user_data_1.renderUserData('my-cluster-name', asg, {
            useMaxPods: true
        }));
        // THEN
        test.deepEqual(userData[1], '/etc/eks/bootstrap.sh my-cluster-name --kubelet-extra-args "--node-labels lifecycle=OnDemand" --use-max-pods true');
        test.done();
    },
    '--use-max-pods=false'(test) {
        // GIVEN
        const { asg, stack } = newFixtures();
        // WHEN
        const userData = stack.resolve(user_data_1.renderUserData('my-cluster-name', asg, {
            useMaxPods: false
        }));
        // THEN
        test.deepEqual(userData[1], '/etc/eks/bootstrap.sh my-cluster-name --kubelet-extra-args "--node-labels lifecycle=OnDemand" --use-max-pods false');
        test.done();
    },
    '--aws-api-retry-attempts'(test) {
        // GIVEN
        const { asg, stack } = newFixtures();
        // WHEN
        const userData = stack.resolve(user_data_1.renderUserData('my-cluster-name', asg, {
            awsApiRetryAttempts: 123
        }));
        // THEN
        test.deepEqual(userData[1], '/etc/eks/bootstrap.sh my-cluster-name --kubelet-extra-args "--node-labels lifecycle=OnDemand" --use-max-pods true --aws-api-retry-attempts 123');
        test.done();
    },
    '--docker-config-json'(test) {
        // GIVEN
        const { asg } = newFixtures();
        // WHEN
        const userData = user_data_1.renderUserData('my-cluster-name', asg, {
            dockerConfigJson: '{"docker":123}'
        });
        // THEN
        test.deepEqual(userData[1], `/etc/eks/bootstrap.sh my-cluster-name --kubelet-extra-args "--node-labels lifecycle=OnDemand" --use-max-pods true --docker-config-json '{"docker":123}'`);
        test.done();
    },
    '--enable-docker-bridge=true'(test) {
        // GIVEN
        const { asg, stack } = newFixtures();
        // WHEN
        const userData = stack.resolve(user_data_1.renderUserData('my-cluster-name', asg, {
            enableDockerBridge: true
        }));
        // THEN
        test.deepEqual(userData[1], `/etc/eks/bootstrap.sh my-cluster-name --kubelet-extra-args "--node-labels lifecycle=OnDemand" --use-max-pods true --enable-docker-bridge`);
        test.done();
    },
    '--enable-docker-bridge=false'(test) {
        // GIVEN
        const { asg, stack } = newFixtures();
        // WHEN
        const userData = stack.resolve(user_data_1.renderUserData('my-cluster-name', asg, {
            enableDockerBridge: false
        }));
        // THEN
        test.deepEqual(userData[1], `/etc/eks/bootstrap.sh my-cluster-name --kubelet-extra-args "--node-labels lifecycle=OnDemand" --use-max-pods true`);
        test.done();
    },
    '--kubelet-extra-args'(test) {
        // GIVEN
        const { asg, stack } = newFixtures();
        // WHEN
        const userData = stack.resolve(user_data_1.renderUserData('my-cluster-name', asg, {
            kubeletExtraArgs: '--extra-args-for --kubelet'
        }));
        // THEN
        test.deepEqual(userData[1], `/etc/eks/bootstrap.sh my-cluster-name --kubelet-extra-args "--node-labels lifecycle=OnDemand  --extra-args-for --kubelet" --use-max-pods true`);
        test.done();
    },
    'arbitrary additional bootstrap arguments can be passed through "additionalArgs"'(test) {
        // GIVEN
        const { asg, stack } = newFixtures();
        // WHEN
        const userData = stack.resolve(user_data_1.renderUserData('my-cluster-name', asg, {
            additionalArgs: '--apiserver-endpoint 1111 --foo-bar'
        }));
        // THEN
        test.deepEqual(userData[1], `/etc/eks/bootstrap.sh my-cluster-name --kubelet-extra-args "--node-labels lifecycle=OnDemand" --use-max-pods true --apiserver-endpoint 1111 --foo-bar`);
        test.done();
    },
    'if asg has spot instances, the correct label and taint is used'(test) {
        // GIVEN
        const { asg, stack } = newFixtures(true);
        // WHEN
        const userData = stack.resolve(user_data_1.renderUserData('my-cluster-name', asg, {
            kubeletExtraArgs: '--node-labels X=y'
        }));
        // THEN
        test.deepEqual(userData[1], `/etc/eks/bootstrap.sh my-cluster-name --kubelet-extra-args "--node-labels lifecycle=Ec2Spot --register-with-taints=spotInstance=true:PreferNoSchedule --node-labels X=y" --use-max-pods true`);
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,