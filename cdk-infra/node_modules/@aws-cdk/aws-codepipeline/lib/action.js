"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ActionCategory;
(function (ActionCategory) {
    ActionCategory["SOURCE"] = "Source";
    ActionCategory["BUILD"] = "Build";
    ActionCategory["TEST"] = "Test";
    ActionCategory["APPROVAL"] = "Approval";
    ActionCategory["DEPLOY"] = "Deploy";
    ActionCategory["INVOKE"] = "Invoke";
})(ActionCategory = exports.ActionCategory || (exports.ActionCategory = {}));
/**
 * The CodePipeline variables that are global,
 * not bound to a specific action.
 * This class defines a bunch of static fields that represent the different variables.
 * These can be used can be used in any action configuration.
 */
class GlobalVariables {
}
exports.GlobalVariables = GlobalVariables;
/** The identifier of the current pipeline execution. */
GlobalVariables.executionId = '#{codepipeline.PipelineExecutionId}';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBTUEsSUFBWSxjQU9YO0FBUEQsV0FBWSxjQUFjO0lBQ3hCLG1DQUFpQixDQUFBO0lBQ2pCLGlDQUFlLENBQUE7SUFDZiwrQkFBYSxDQUFBO0lBQ2IsdUNBQXFCLENBQUE7SUFDckIsbUNBQWlCLENBQUE7SUFDakIsbUNBQWlCLENBQUE7QUFDbkIsQ0FBQyxFQVBXLGNBQWMsR0FBZCxzQkFBYyxLQUFkLHNCQUFjLFFBT3pCO0FBZ0JEOzs7OztHQUtHO0FBQ0gsTUFBYSxlQUFlOztBQUE1QiwwQ0FHQztBQUZDLHdEQUF3RDtBQUNqQywyQkFBVyxHQUFHLHFDQUFxQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZXZlbnRzIGZyb20gJ0Bhd3MtY2RrL2F3cy1ldmVudHMnO1xuaW1wb3J0ICogYXMgaWFtIGZyb20gJ0Bhd3MtY2RrL2F3cy1pYW0nO1xuaW1wb3J0ICogYXMgczMgZnJvbSAnQGF3cy1jZGsvYXdzLXMzJztcbmltcG9ydCB7IENvbnN0cnVjdCwgSVJlc291cmNlIH0gZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgeyBBcnRpZmFjdCB9IGZyb20gJy4vYXJ0aWZhY3QnO1xuXG5leHBvcnQgZW51bSBBY3Rpb25DYXRlZ29yeSB7XG4gIFNPVVJDRSA9ICdTb3VyY2UnLFxuICBCVUlMRCA9ICdCdWlsZCcsXG4gIFRFU1QgPSAnVGVzdCcsXG4gIEFQUFJPVkFMID0gJ0FwcHJvdmFsJyxcbiAgREVQTE9ZID0gJ0RlcGxveScsXG4gIElOVk9LRSA9ICdJbnZva2UnXG59XG5cbi8qKlxuICogU3BlY2lmaWVzIHRoZSBjb25zdHJhaW50cyBvbiB0aGUgbnVtYmVyIG9mIGlucHV0IGFuZCBvdXRwdXRcbiAqIGFydGlmYWN0cyBhbiBhY3Rpb24gY2FuIGhhdmUuXG4gKlxuICogVGhlIGNvbnN0cmFpbnRzIGZvciBlYWNoIGFjdGlvbiB0eXBlIGFyZSBkb2N1bWVudGVkIG9uIHRoZVxuICoge0BsaW5rIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9jb2RlcGlwZWxpbmUvbGF0ZXN0L3VzZXJndWlkZS9yZWZlcmVuY2UtcGlwZWxpbmUtc3RydWN0dXJlLmh0bWwgUGlwZWxpbmUgU3RydWN0dXJlIFJlZmVyZW5jZX0gcGFnZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBY3Rpb25BcnRpZmFjdEJvdW5kcyB7XG4gIHJlYWRvbmx5IG1pbklucHV0czogbnVtYmVyO1xuICByZWFkb25seSBtYXhJbnB1dHM6IG51bWJlcjtcbiAgcmVhZG9ubHkgbWluT3V0cHV0czogbnVtYmVyO1xuICByZWFkb25seSBtYXhPdXRwdXRzOiBudW1iZXI7XG59XG5cbi8qKlxuICogVGhlIENvZGVQaXBlbGluZSB2YXJpYWJsZXMgdGhhdCBhcmUgZ2xvYmFsLFxuICogbm90IGJvdW5kIHRvIGEgc3BlY2lmaWMgYWN0aW9uLlxuICogVGhpcyBjbGFzcyBkZWZpbmVzIGEgYnVuY2ggb2Ygc3RhdGljIGZpZWxkcyB0aGF0IHJlcHJlc2VudCB0aGUgZGlmZmVyZW50IHZhcmlhYmxlcy5cbiAqIFRoZXNlIGNhbiBiZSB1c2VkIGNhbiBiZSB1c2VkIGluIGFueSBhY3Rpb24gY29uZmlndXJhdGlvbi5cbiAqL1xuZXhwb3J0IGNsYXNzIEdsb2JhbFZhcmlhYmxlcyB7XG4gIC8qKiBUaGUgaWRlbnRpZmllciBvZiB0aGUgY3VycmVudCBwaXBlbGluZSBleGVjdXRpb24uICovXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgZXhlY3V0aW9uSWQgPSAnI3tjb2RlcGlwZWxpbmUuUGlwZWxpbmVFeGVjdXRpb25JZH0nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFjdGlvblByb3BlcnRpZXMge1xuICByZWFkb25seSBhY3Rpb25OYW1lOiBzdHJpbmc7XG4gIHJlYWRvbmx5IHJvbGU/OiBpYW0uSVJvbGU7XG5cbiAgLyoqXG4gICAqIFRoZSBBV1MgcmVnaW9uIHRoZSBnaXZlbiBBY3Rpb24gcmVzaWRlcyBpbi5cbiAgICogTm90ZSB0aGF0IGEgY3Jvc3MtcmVnaW9uIFBpcGVsaW5lIHJlcXVpcmVzIHJlcGxpY2F0aW9uIGJ1Y2tldHMgdG8gZnVuY3Rpb24gY29ycmVjdGx5LlxuICAgKiBZb3UgY2FuIHByb3ZpZGUgdGhlaXIgbmFtZXMgd2l0aCB0aGUge0BsaW5rIFBpcGVsaW5lUHJvcHMjY3Jvc3NSZWdpb25SZXBsaWNhdGlvbkJ1Y2tldHN9IHByb3BlcnR5LlxuICAgKiBJZiB5b3UgZG9uJ3QsIHRoZSBDb2RlUGlwZWxpbmUgQ29uc3RydWN0IHdpbGwgY3JlYXRlIG5ldyBTdGFja3MgaW4geW91ciBDREsgYXBwIGNvbnRhaW5pbmcgdGhvc2UgYnVja2V0cyxcbiAgICogdGhhdCB5b3Ugd2lsbCBuZWVkIHRvIGBjZGsgZGVwbG95YCBiZWZvcmUgZGVwbG95aW5nIHRoZSBtYWluLCBQaXBlbGluZS1jb250YWluaW5nIFN0YWNrLlxuICAgKlxuICAgKiBAZGVmYXVsdCB0aGUgQWN0aW9uIHJlc2lkZXMgaW4gdGhlIHNhbWUgcmVnaW9uIGFzIHRoZSBQaXBlbGluZVxuICAgKi9cbiAgcmVhZG9ubHkgcmVnaW9uPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgYWNjb3VudCB0aGUgQWN0aW9uIGlzIHN1cHBvc2VkIHRvIGxpdmUgaW4uXG4gICAqIEZvciBBY3Rpb25zIGJhY2tlZCBieSByZXNvdXJjZXMsXG4gICAqIHRoaXMgaXMgaW5mZXJyZWQgZnJvbSB0aGUgU3RhY2sge0BsaW5rIHJlc291cmNlfSBpcyBwYXJ0IG9mLlxuICAgKiBIb3dldmVyLCBzb21lIEFjdGlvbnMsIGxpa2UgdGhlIENsb3VkRm9ybWF0aW9uIG9uZXMsXG4gICAqIGFyZSBub3QgYmFja2VkIGJ5IGFueSByZXNvdXJjZSwgYW5kIHRoZXkgc3RpbGwgbWlnaHQgd2FudCB0byBiZSBjcm9zcy1hY2NvdW50LlxuICAgKiBJbiBnZW5lcmFsLCBhIGNvbmNyZXRlIEFjdGlvbiBjbGFzcyBzaG91bGQgc3BlY2lmeSBlaXRoZXIge0BsaW5rIHJlc291cmNlfSxcbiAgICogb3Ige0BsaW5rIGFjY291bnR9IC0gYnV0IG5vdCBib3RoLlxuICAgKi9cbiAgcmVhZG9ubHkgYWNjb3VudD86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIG9wdGlvbmFsIHJlc291cmNlIHRoYXQgaXMgYmFja2luZyB0aGlzIEFjdGlvbi5cbiAgICogVGhpcyBpcyB1c2VkIGZvciBhdXRvbWF0aWNhbGx5IGhhbmRsaW5nIEFjdGlvbnMgYmFja2VkIGJ5XG4gICAqIHJlc291cmNlcyBmcm9tIGEgZGlmZmVyZW50IGFjY291bnQgYW5kL29yIHJlZ2lvbi5cbiAgICovXG4gIHJlYWRvbmx5IHJlc291cmNlPzogSVJlc291cmNlO1xuXG4gIC8qKlxuICAgKiBUaGUgY2F0ZWdvcnkgb2YgdGhlIGFjdGlvbi5cbiAgICogVGhlIGNhdGVnb3J5IGRlZmluZXMgd2hpY2ggYWN0aW9uIHR5cGUgdGhlIG93bmVyXG4gICAqICh0aGUgZW50aXR5IHRoYXQgcGVyZm9ybXMgdGhlIGFjdGlvbikgcGVyZm9ybXMuXG4gICAqL1xuICByZWFkb25seSBjYXRlZ29yeTogQWN0aW9uQ2F0ZWdvcnk7XG5cbiAgLyoqXG4gICAqIFRoZSBzZXJ2aWNlIHByb3ZpZGVyIHRoYXQgdGhlIGFjdGlvbiBjYWxscy5cbiAgICovXG4gIHJlYWRvbmx5IHByb3ZpZGVyOiBzdHJpbmc7XG4gIHJlYWRvbmx5IG93bmVyPzogc3RyaW5nO1xuICByZWFkb25seSB2ZXJzaW9uPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgb3JkZXIgaW4gd2hpY2ggQVdTIENvZGVQaXBlbGluZSBydW5zIHRoaXMgYWN0aW9uLlxuICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBBV1MgQ29kZVBpcGVsaW5lIFVzZXIgR3VpZGUuXG4gICAqXG4gICAqIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9jb2RlcGlwZWxpbmUvbGF0ZXN0L3VzZXJndWlkZS9yZWZlcmVuY2UtcGlwZWxpbmUtc3RydWN0dXJlLmh0bWwjYWN0aW9uLXJlcXVpcmVtZW50c1xuICAgKi9cbiAgcmVhZG9ubHkgcnVuT3JkZXI/OiBudW1iZXI7XG4gIHJlYWRvbmx5IGFydGlmYWN0Qm91bmRzOiBBY3Rpb25BcnRpZmFjdEJvdW5kcztcbiAgcmVhZG9ubHkgaW5wdXRzPzogQXJ0aWZhY3RbXTtcbiAgcmVhZG9ubHkgb3V0cHV0cz86IEFydGlmYWN0W107XG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBuYW1lc3BhY2UgdG8gdXNlIGZvciB2YXJpYWJsZXMgZW1pdHRlZCBieSB0aGlzIGFjdGlvbi5cbiAgICpcbiAgICogQGRlZmF1bHQgLSBhIG5hbWUgd2lsbCBiZSBnZW5lcmF0ZWQsIGJhc2VkIG9uIHRoZSBzdGFnZSBhbmQgYWN0aW9uIG5hbWVzXG4gICAqL1xuICByZWFkb25seSB2YXJpYWJsZXNOYW1lc3BhY2U/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWN0aW9uQmluZE9wdGlvbnMge1xuICByZWFkb25seSByb2xlOiBpYW0uSVJvbGU7XG5cbiAgcmVhZG9ubHkgYnVja2V0OiBzMy5JQnVja2V0O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFjdGlvbkNvbmZpZyB7XG4gIHJlYWRvbmx5IGNvbmZpZ3VyYXRpb24/OiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUFjdGlvbiB7XG4gIHJlYWRvbmx5IGFjdGlvblByb3BlcnRpZXM6IEFjdGlvblByb3BlcnRpZXM7XG5cbiAgYmluZChzY29wZTogQ29uc3RydWN0LCBzdGFnZTogSVN0YWdlLCBvcHRpb25zOiBBY3Rpb25CaW5kT3B0aW9ucyk6IEFjdGlvbkNvbmZpZztcblxuICBvblN0YXRlQ2hhbmdlKG5hbWU6IHN0cmluZywgdGFyZ2V0PzogZXZlbnRzLklSdWxlVGFyZ2V0LCBvcHRpb25zPzogZXZlbnRzLlJ1bGVQcm9wcyk6IGV2ZW50cy5SdWxlO1xufVxuXG4vKipcbiAqIFRoZSBhYnN0cmFjdCB2aWV3IG9mIGFuIEFXUyBDb2RlUGlwZWxpbmUgYXMgcmVxdWlyZWQgYW5kIHVzZWQgYnkgQWN0aW9ucy5cbiAqIEl0IGV4dGVuZHMge0BsaW5rIGV2ZW50cy5JUnVsZVRhcmdldH0sXG4gKiBzbyB0aGlzIGludGVyZmFjZSBjYW4gYmUgdXNlZCBhcyBhIFRhcmdldCBmb3IgQ2xvdWRXYXRjaCBFdmVudHMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVBpcGVsaW5lIGV4dGVuZHMgSVJlc291cmNlIHtcbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBQaXBlbGluZS5cbiAgICpcbiAgICogQGF0dHJpYnV0ZVxuICAgKi9cbiAgcmVhZG9ubHkgcGlwZWxpbmVOYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBBUk4gb2YgdGhlIFBpcGVsaW5lLlxuICAgKlxuICAgKiBAYXR0cmlidXRlXG4gICAqL1xuICByZWFkb25seSBwaXBlbGluZUFybjogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBEZWZpbmUgYW4gZXZlbnQgcnVsZSB0cmlnZ2VyZWQgYnkgdGhpcyBDb2RlUGlwZWxpbmUuXG4gICAqXG4gICAqIEBwYXJhbSBpZCBJZGVudGlmaWVyIGZvciB0aGlzIGV2ZW50IGhhbmRsZXIuXG4gICAqIEBwYXJhbSBvcHRpb25zIEFkZGl0aW9uYWwgb3B0aW9ucyB0byBwYXNzIHRvIHRoZSBldmVudCBydWxlLlxuICAgKi9cbiAgb25FdmVudChpZDogc3RyaW5nLCBvcHRpb25zPzogZXZlbnRzLk9uRXZlbnRPcHRpb25zKTogZXZlbnRzLlJ1bGU7XG5cbiAgLyoqXG4gICAqIERlZmluZSBhbiBldmVudCBydWxlIHRyaWdnZXJlZCBieSB0aGUgXCJDb2RlUGlwZWxpbmUgUGlwZWxpbmUgRXhlY3V0aW9uXG4gICAqIFN0YXRlIENoYW5nZVwiIGV2ZW50IGVtaXR0ZWQgZnJvbSB0aGlzIHBpcGVsaW5lLlxuICAgKlxuICAgKiBAcGFyYW0gaWQgSWRlbnRpZmllciBmb3IgdGhpcyBldmVudCBoYW5kbGVyLlxuICAgKiBAcGFyYW0gb3B0aW9ucyBBZGRpdGlvbmFsIG9wdGlvbnMgdG8gcGFzcyB0byB0aGUgZXZlbnQgcnVsZS5cbiAgICovXG4gIG9uU3RhdGVDaGFuZ2UoaWQ6IHN0cmluZywgb3B0aW9ucz86IGV2ZW50cy5PbkV2ZW50T3B0aW9ucyk6IGV2ZW50cy5SdWxlO1xufVxuXG4vKipcbiAqIFRoZSBhYnN0cmFjdCBpbnRlcmZhY2Ugb2YgYSBQaXBlbGluZSBTdGFnZSB0aGF0IGlzIHVzZWQgYnkgQWN0aW9ucy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJU3RhZ2Uge1xuICAvKipcbiAgICogVGhlIHBoeXNpY2FsLCBodW1hbi1yZWFkYWJsZSBuYW1lIG9mIHRoaXMgUGlwZWxpbmUgU3RhZ2UuXG4gICAqL1xuICByZWFkb25seSBzdGFnZU5hbWU6IHN0cmluZztcblxuICByZWFkb25seSBwaXBlbGluZTogSVBpcGVsaW5lO1xuXG4gIC8qKlxuICAgKiBUaGUgYWN0aW9ucyBiZWxvbmdpbmcgdG8gdGhpcyBzdGFnZS5cbiAgICovXG4gIHJlYWRvbmx5IGFjdGlvbnM6IElBY3Rpb25bXTtcblxuICBhZGRBY3Rpb24oYWN0aW9uOiBJQWN0aW9uKTogdm9pZDtcblxuICBvblN0YXRlQ2hhbmdlKG5hbWU6IHN0cmluZywgdGFyZ2V0PzogZXZlbnRzLklSdWxlVGFyZ2V0LCBvcHRpb25zPzogZXZlbnRzLlJ1bGVQcm9wcyk6IGV2ZW50cy5SdWxlO1xufVxuXG4vKipcbiAqIENvbW1vbiBwcm9wZXJ0aWVzIHNoYXJlZCBieSBhbGwgQWN0aW9ucy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb21tb25BY3Rpb25Qcm9wcyB7XG4gIC8qKlxuICAgKiBUaGUgcGh5c2ljYWwsIGh1bWFuLXJlYWRhYmxlIG5hbWUgb2YgdGhlIEFjdGlvbi5cbiAgICogTm90ZSB0aGF0IEFjdGlvbiBuYW1lcyBtdXN0IGJlIHVuaXF1ZSB3aXRoaW4gYSBzaW5nbGUgU3RhZ2UuXG4gICAqL1xuICByZWFkb25seSBhY3Rpb25OYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBydW5PcmRlciBwcm9wZXJ0eSBmb3IgdGhpcyBBY3Rpb24uXG4gICAqIFJ1bk9yZGVyIGRldGVybWluZXMgdGhlIHJlbGF0aXZlIG9yZGVyIGluIHdoaWNoIG11bHRpcGxlIEFjdGlvbnMgaW4gdGhlIHNhbWUgU3RhZ2UgZXhlY3V0ZS5cbiAgICpcbiAgICogQGRlZmF1bHQgMVxuICAgKiBAc2VlIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9jb2RlcGlwZWxpbmUvbGF0ZXN0L3VzZXJndWlkZS9yZWZlcmVuY2UtcGlwZWxpbmUtc3RydWN0dXJlLmh0bWxcbiAgICovXG4gIHJlYWRvbmx5IHJ1bk9yZGVyPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgbmFtZXNwYWNlIHRvIHVzZSBmb3IgdmFyaWFibGVzIGVtaXR0ZWQgYnkgdGhpcyBhY3Rpb24uXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gYSBuYW1lIHdpbGwgYmUgZ2VuZXJhdGVkLCBiYXNlZCBvbiB0aGUgc3RhZ2UgYW5kIGFjdGlvbiBuYW1lcyxcbiAgICogICBpZiBhbnkgb2YgdGhlIGFjdGlvbidzIHZhcmlhYmxlcyB3ZXJlIHJlZmVyZW5jZWQgLSBvdGhlcndpc2UsXG4gICAqICAgbm8gbmFtZXNwYWNlIHdpbGwgYmUgc2V0XG4gICAqL1xuICByZWFkb25seSB2YXJpYWJsZXNOYW1lc3BhY2U/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQ29tbW9uIHByb3BlcnRpZXMgc2hhcmVkIGJ5IGFsbCBBY3Rpb25zIHdob3NlIHtAbGluayBBY3Rpb25Qcm9wZXJ0aWVzLm93bmVyfSBmaWVsZCBpcyAnQVdTJ1xuICogKG9yIHVuc2V0LCBhcyAnQVdTJyBpcyB0aGUgZGVmYXVsdCkuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29tbW9uQXdzQWN0aW9uUHJvcHMgZXh0ZW5kcyBDb21tb25BY3Rpb25Qcm9wcyB7XG4gIC8qKlxuICAgKiBUaGUgUm9sZSBpbiB3aGljaCBjb250ZXh0J3MgdGhpcyBBY3Rpb24gd2lsbCBiZSBleGVjdXRpbmcgaW4uXG4gICAqIFRoZSBQaXBlbGluZSdzIFJvbGUgd2lsbCBhc3N1bWUgdGhpcyBSb2xlXG4gICAqICh0aGUgcmVxdWlyZWQgcGVybWlzc2lvbnMgZm9yIHRoYXQgd2lsbCBiZSBncmFudGVkIGF1dG9tYXRpY2FsbHkpXG4gICAqIHJpZ2h0IGJlZm9yZSBleGVjdXRpbmcgdGhpcyBBY3Rpb24uXG4gICAqIFRoaXMgQWN0aW9uIHdpbGwgYmUgcGFzc2VkIGludG8geW91ciB7QGxpbmsgSUFjdGlvbi5iaW5kfVxuICAgKiBtZXRob2QgaW4gdGhlIHtAbGluayBBY3Rpb25CaW5kT3B0aW9ucy5yb2xlfSBwcm9wZXJ0eS5cbiAgICpcbiAgICogQGRlZmF1bHQgYSBuZXcgUm9sZSB3aWxsIGJlIGdlbmVyYXRlZFxuICAgKi9cbiAgcmVhZG9ubHkgcm9sZT86IGlhbS5JUm9sZTtcbn1cbiJdfQ==