"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Artifacts definition for a CodeBuild Project.
 */
class Artifacts {
    constructor(props) {
        this.identifier = props.identifier;
    }
    static s3(props) {
        return new S3Artifacts(props);
    }
    bind(_scope, _project) {
        return {
            artifactsProperty: {
                artifactIdentifier: this.identifier,
                type: this.type,
            },
        };
    }
}
exports.Artifacts = Artifacts;
/**
 * S3 Artifact definition for a CodeBuild Project.
 */
class S3Artifacts extends Artifacts {
    constructor(props) {
        super(props);
        this.props = props;
        this.type = 'S3';
    }
    bind(_scope, project) {
        this.props.bucket.grantReadWrite(project);
        const superConfig = super.bind(_scope, project);
        return {
            artifactsProperty: {
                ...superConfig.artifactsProperty,
                location: this.props.bucket.bucketName,
                path: this.props.path,
                namespaceType: this.props.includeBuildId === false ? 'NONE' : 'BUILD_ID',
                name: this.props.name,
                packaging: this.props.packageZip === false ? 'NONE' : 'ZIP',
                encryptionDisabled: this.props.encryption === false ? true : undefined,
            }
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJ0aWZhY3RzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXJ0aWZhY3RzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBbURBOztHQUVHO0FBQ0gsTUFBc0IsU0FBUztJQVE3QixZQUFzQixLQUFxQjtRQUN6QyxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUM7SUFDckMsQ0FBQztJQVRNLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBdUI7UUFDdEMsT0FBTyxJQUFJLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBU00sSUFBSSxDQUFDLE1BQWlCLEVBQUUsUUFBa0I7UUFDL0MsT0FBTztZQUNMLGlCQUFpQixFQUFFO2dCQUNqQixrQkFBa0IsRUFBRSxJQUFJLENBQUMsVUFBVTtnQkFDbkMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO2FBQ2hCO1NBQ0YsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQXBCRCw4QkFvQkM7QUFtREQ7O0dBRUc7QUFDSCxNQUFNLFdBQVksU0FBUSxTQUFTO0lBR2pDLFlBQTZCLEtBQXVCO1FBQ2xELEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQURjLFVBQUssR0FBTCxLQUFLLENBQWtCO1FBRnBDLFNBQUksR0FBRyxJQUFJLENBQUM7SUFJNUIsQ0FBQztJQUVNLElBQUksQ0FBQyxNQUFpQixFQUFFLE9BQWlCO1FBQzlDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxQyxNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNoRCxPQUFPO1lBQ0wsaUJBQWlCLEVBQUU7Z0JBQ2pCLEdBQUcsV0FBVyxDQUFDLGlCQUFpQjtnQkFDaEMsUUFBUSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQVU7Z0JBQ3RDLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUk7Z0JBQ3JCLGFBQWEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsVUFBVTtnQkFDeEUsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSTtnQkFDckIsU0FBUyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLO2dCQUMzRCxrQkFBa0IsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUzthQUN2RTtTQUNGLENBQUM7SUFDSixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBzMyBmcm9tICdAYXdzLWNkay9hd3MtczMnO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgeyBDZm5Qcm9qZWN0IH0gZnJvbSAnLi9jb2RlYnVpbGQuZ2VuZXJhdGVkJztcbmltcG9ydCB7IElQcm9qZWN0IH0gZnJvbSAnLi9wcm9qZWN0JztcblxuLyoqXG4gKiBUaGUgdHlwZSByZXR1cm5lZCBmcm9tIHtAbGluayBJQXJ0aWZhY3RzI2JpbmR9LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFydGlmYWN0c0NvbmZpZyB7XG4gIC8qKlxuICAgKiBUaGUgbG93LWxldmVsIENsb3VkRm9ybWF0aW9uIGFydGlmYWN0cyBwcm9wZXJ0eS5cbiAgICovXG4gIHJlYWRvbmx5IGFydGlmYWN0c1Byb3BlcnR5OiBDZm5Qcm9qZWN0LkFydGlmYWN0c1Byb3BlcnR5O1xufVxuXG4vKipcbiAqIFRoZSBhYnN0cmFjdCBpbnRlcmZhY2Ugb2YgYSBDb2RlQnVpbGQgYnVpbGQgb3V0cHV0LlxuICogSW1wbGVtZW50ZWQgYnkge0BsaW5rIEFydGlmYWN0c30uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUFydGlmYWN0cyB7XG4gIC8qKlxuICAgKiBUaGUgYXJ0aWZhY3QgaWRlbnRpZmllci5cbiAgICogVGhpcyBwcm9wZXJ0eSBpcyByZXF1aXJlZCBvbiBzZWNvbmRhcnkgYXJ0aWZhY3RzLlxuICAgKi9cbiAgcmVhZG9ubHkgaWRlbnRpZmllcj86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIENvZGVCdWlsZCB0eXBlIG9mIHRoaXMgYXJ0aWZhY3QuXG4gICAqL1xuICByZWFkb25seSB0eXBlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIHdoZW4gYW4gQXJ0aWZhY3RzIGNsYXNzIGlzIHVzZWQgaW4gYSBDb2RlQnVpbGQgUHJvamVjdC5cbiAgICpcbiAgICogQHBhcmFtIHNjb3BlIGEgcm9vdCBDb25zdHJ1Y3QgdGhhdCBhbGxvd3MgY3JlYXRpbmcgbmV3IENvbnN0cnVjdHNcbiAgICogQHBhcmFtIHByb2plY3QgdGhlIFByb2plY3QgdGhpcyBBcnRpZmFjdHMgaXMgdXNlZCBpblxuICAgKi9cbiAgYmluZChzY29wZTogQ29uc3RydWN0LCBwcm9qZWN0OiBJUHJvamVjdCk6IEFydGlmYWN0c0NvbmZpZztcbn1cblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGNvbW1vbiB0byBhbGwgQXJ0aWZhY3RzIGNsYXNzZXMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXJ0aWZhY3RzUHJvcHMge1xuICAvKipcbiAgICogVGhlIGFydGlmYWN0IGlkZW50aWZpZXIuXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgcmVxdWlyZWQgb24gc2Vjb25kYXJ5IGFydGlmYWN0cy5cbiAgICovXG4gIHJlYWRvbmx5IGlkZW50aWZpZXI/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQXJ0aWZhY3RzIGRlZmluaXRpb24gZm9yIGEgQ29kZUJ1aWxkIFByb2plY3QuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBcnRpZmFjdHMgaW1wbGVtZW50cyBJQXJ0aWZhY3RzIHtcbiAgcHVibGljIHN0YXRpYyBzMyhwcm9wczogUzNBcnRpZmFjdHNQcm9wcyk6IElBcnRpZmFjdHMge1xuICAgIHJldHVybiBuZXcgUzNBcnRpZmFjdHMocHJvcHMpO1xuICB9XG5cbiAgcHVibGljIHJlYWRvbmx5IGlkZW50aWZpZXI/OiBzdHJpbmc7XG4gIHB1YmxpYyBhYnN0cmFjdCByZWFkb25seSB0eXBlOiBzdHJpbmc7XG5cbiAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKHByb3BzOiBBcnRpZmFjdHNQcm9wcykge1xuICAgIHRoaXMuaWRlbnRpZmllciA9IHByb3BzLmlkZW50aWZpZXI7XG4gIH1cblxuICBwdWJsaWMgYmluZChfc2NvcGU6IENvbnN0cnVjdCwgX3Byb2plY3Q6IElQcm9qZWN0KTogQXJ0aWZhY3RzQ29uZmlnIHtcbiAgICByZXR1cm4ge1xuICAgICAgYXJ0aWZhY3RzUHJvcGVydHk6IHtcbiAgICAgICAgYXJ0aWZhY3RJZGVudGlmaWVyOiB0aGlzLmlkZW50aWZpZXIsXG4gICAgICAgIHR5cGU6IHRoaXMudHlwZSxcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxufVxuXG4vKipcbiAqIENvbnN0cnVjdGlvbiBwcm9wZXJ0aWVzIGZvciB7QGxpbmsgUzNBcnRpZmFjdHN9LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFMzQXJ0aWZhY3RzUHJvcHMgZXh0ZW5kcyBBcnRpZmFjdHNQcm9wcyB7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgb3V0cHV0IGJ1Y2tldC5cbiAgICovXG4gIHJlYWRvbmx5IGJ1Y2tldDogczMuSUJ1Y2tldDtcblxuICAvKipcbiAgICogVGhlIHBhdGggaW5zaWRlIG9mIHRoZSBidWNrZXQgZm9yIHRoZSBidWlsZCBvdXRwdXQgLnppcCBmaWxlIG9yIGZvbGRlci5cbiAgICogSWYgYSB2YWx1ZSBpcyBub3Qgc3BlY2lmaWVkLCB0aGVuIGJ1aWxkIG91dHB1dCB3aWxsIGJlIHN0b3JlZCBhdCB0aGUgcm9vdCBvZiB0aGVcbiAgICogYnVja2V0IChvciB1bmRlciB0aGUgPGJ1aWxkLWlkPiBkaXJlY3RvcnkgaWYgYGluY2x1ZGVCdWlsZElkYCBpcyBzZXQgdG8gdHJ1ZSkuXG4gICAqL1xuICByZWFkb25seSBwYXRoPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgYnVpbGQgb3V0cHV0IFpJUCBmaWxlIG9yIGZvbGRlciBpbnNpZGUgdGhlIGJ1Y2tldC5cbiAgICpcbiAgICogVGhlIGZ1bGwgUzMgb2JqZWN0IGtleSB3aWxsIGJlIFwiPHBhdGg+LzxidWlsZC1pZD4vPG5hbWU+XCIgb3JcbiAgICogXCI8cGF0aD4vPG5hbWU+XCIgZGVwZW5kaW5nIG9uIHdoZXRoZXIgYGluY2x1ZGVCdWlsZElkYCBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcblxuICAvKipcbiAgICogSW5kaWNhdGVzIGlmIHRoZSBidWlsZCBJRCBzaG91bGQgYmUgaW5jbHVkZWQgaW4gdGhlIHBhdGguIElmIHRoaXMgaXMgc2V0IHRvIHRydWUsXG4gICAqIHRoZW4gdGhlIGJ1aWxkIGFydGlmYWN0IHdpbGwgYmUgc3RvcmVkIGluIFwiPHBhdGg+LzxidWlsZC1pZD4vPG5hbWU+XCIuXG4gICAqXG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIHJlYWRvbmx5IGluY2x1ZGVCdWlsZElkPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogSWYgdGhpcyBpcyB0cnVlLCBhbGwgYnVpbGQgb3V0cHV0IHdpbGwgYmUgcGFja2FnZWQgaW50byBhIHNpbmdsZSAuemlwIGZpbGUuXG4gICAqIE90aGVyd2lzZSwgYWxsIGZpbGVzIHdpbGwgYmUgdXBsb2FkZWQgdG8gPHBhdGg+LzxuYW1lPlxuICAgKlxuICAgKiBAZGVmYXVsdCB0cnVlIC0gZmlsZXMgd2lsbCBiZSBhcmNoaXZlZFxuICAgKi9cbiAgcmVhZG9ubHkgcGFja2FnZVppcD86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIElmIHRoaXMgaXMgZmFsc2UsIGJ1aWxkIG91dHB1dCB3aWxsIG5vdCBiZSBlbmNyeXB0ZWQuXG4gICAqIFRoaXMgaXMgdXNlZnVsIGlmIHRoZSBhcnRpZmFjdCB0byBwdWJsaXNoIGEgc3RhdGljIHdlYnNpdGUgb3Igc2hhcmluZyBjb250ZW50IHdpdGggb3RoZXJzXG4gICAqXG4gICAqIEBkZWZhdWx0IHRydWUgLSBvdXRwdXQgd2lsbCBiZSBlbmNyeXB0ZWRcbiAgICovXG4gIHJlYWRvbmx5IGVuY3J5cHRpb24/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIFMzIEFydGlmYWN0IGRlZmluaXRpb24gZm9yIGEgQ29kZUJ1aWxkIFByb2plY3QuXG4gKi9cbmNsYXNzIFMzQXJ0aWZhY3RzIGV4dGVuZHMgQXJ0aWZhY3RzIHtcbiAgcHVibGljIHJlYWRvbmx5IHR5cGUgPSAnUzMnO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgcHJvcHM6IFMzQXJ0aWZhY3RzUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gIH1cblxuICBwdWJsaWMgYmluZChfc2NvcGU6IENvbnN0cnVjdCwgcHJvamVjdDogSVByb2plY3QpOiBBcnRpZmFjdHNDb25maWcge1xuICAgIHRoaXMucHJvcHMuYnVja2V0LmdyYW50UmVhZFdyaXRlKHByb2plY3QpO1xuICAgIGNvbnN0IHN1cGVyQ29uZmlnID0gc3VwZXIuYmluZChfc2NvcGUsIHByb2plY3QpO1xuICAgIHJldHVybiB7XG4gICAgICBhcnRpZmFjdHNQcm9wZXJ0eToge1xuICAgICAgICAuLi5zdXBlckNvbmZpZy5hcnRpZmFjdHNQcm9wZXJ0eSxcbiAgICAgICAgbG9jYXRpb246IHRoaXMucHJvcHMuYnVja2V0LmJ1Y2tldE5hbWUsXG4gICAgICAgIHBhdGg6IHRoaXMucHJvcHMucGF0aCxcbiAgICAgICAgbmFtZXNwYWNlVHlwZTogdGhpcy5wcm9wcy5pbmNsdWRlQnVpbGRJZCA9PT0gZmFsc2UgPyAnTk9ORScgOiAnQlVJTERfSUQnLFxuICAgICAgICBuYW1lOiB0aGlzLnByb3BzLm5hbWUsXG4gICAgICAgIHBhY2thZ2luZzogdGhpcy5wcm9wcy5wYWNrYWdlWmlwID09PSBmYWxzZSA/ICdOT05FJyA6ICdaSVAnLFxuICAgICAgICBlbmNyeXB0aW9uRGlzYWJsZWQ6IHRoaXMucHJvcHMuZW5jcnlwdGlvbiA9PT0gZmFsc2UgPyB0cnVlIDogdW5kZWZpbmVkLFxuICAgICAgfVxuICAgIH07XG4gIH1cbn1cbiJdfQ==