"use strict";
const assert_1 = require("@aws-cdk/assert");
const codecommit = require("@aws-cdk/aws-codecommit");
const ec2 = require("@aws-cdk/aws-ec2");
const kms = require("@aws-cdk/aws-kms");
const s3 = require("@aws-cdk/aws-s3");
const cdk = require("@aws-cdk/core");
const codebuild = require("../lib");
const codepipeline_source_1 = require("../lib/codepipeline-source");
const no_source_1 = require("../lib/no-source");
module.exports = {
    'default properties': {
        'with CodePipeline source'(test) {
            const stack = new cdk.Stack();
            new codebuild.PipelineProject(stack, 'MyProject');
            assert_1.expect(stack).toMatch({
                "Resources": {
                    "MyProjectRole9BBE5233": {
                        "Type": "AWS::IAM::Role",
                        "Properties": {
                            "AssumeRolePolicyDocument": {
                                "Statement": [
                                    {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": {
                                            "Service": "codebuild.amazonaws.com"
                                        }
                                    }
                                ],
                                "Version": "2012-10-17"
                            }
                        }
                    },
                    "MyProjectRoleDefaultPolicyB19B7C29": {
                        "Type": "AWS::IAM::Policy",
                        "Properties": {
                            "PolicyDocument": {
                                "Statement": [
                                    {
                                        "Action": [
                                            "logs:CreateLogGroup",
                                            "logs:CreateLogStream",
                                            "logs:PutLogEvents"
                                        ],
                                        "Effect": "Allow",
                                        "Resource": [
                                            {
                                                "Fn::Join": [
                                                    "",
                                                    [
                                                        "arn:",
                                                        {
                                                            "Ref": "AWS::Partition"
                                                        },
                                                        ":logs:",
                                                        {
                                                            "Ref": "AWS::Region"
                                                        },
                                                        ":",
                                                        {
                                                            "Ref": "AWS::AccountId"
                                                        },
                                                        ":log-group:/aws/codebuild/",
                                                        {
                                                            "Ref": "MyProject39F7B0AE"
                                                        }
                                                    ]
                                                ]
                                            },
                                            {
                                                "Fn::Join": [
                                                    "",
                                                    [
                                                        "arn:",
                                                        {
                                                            "Ref": "AWS::Partition"
                                                        },
                                                        ":logs:",
                                                        {
                                                            "Ref": "AWS::Region"
                                                        },
                                                        ":",
                                                        {
                                                            "Ref": "AWS::AccountId"
                                                        },
                                                        ":log-group:/aws/codebuild/",
                                                        {
                                                            "Ref": "MyProject39F7B0AE"
                                                        },
                                                        ":*"
                                                    ]
                                                ]
                                            }
                                        ]
                                    }
                                ],
                                "Version": "2012-10-17"
                            },
                            "PolicyName": "MyProjectRoleDefaultPolicyB19B7C29",
                            "Roles": [
                                {
                                    "Ref": "MyProjectRole9BBE5233"
                                }
                            ]
                        }
                    },
                    "MyProject39F7B0AE": {
                        "Type": "AWS::CodeBuild::Project",
                        "Properties": {
                            "Source": {
                                "Type": "CODEPIPELINE"
                            },
                            "Artifacts": {
                                "Type": "CODEPIPELINE"
                            },
                            "ServiceRole": {
                                "Fn::GetAtt": [
                                    "MyProjectRole9BBE5233",
                                    "Arn"
                                ]
                            },
                            "Environment": {
                                "Type": "LINUX_CONTAINER",
                                "PrivilegedMode": false,
                                "Image": "aws/codebuild/standard:1.0",
                                "ComputeType": "BUILD_GENERAL1_SMALL"
                            }
                        }
                    }
                }
            });
            test.done();
        },
        'with CodeCommit source'(test) {
            const stack = new cdk.Stack();
            const repo = new codecommit.Repository(stack, 'MyRepo', {
                repositoryName: 'hello-cdk',
            });
            const source = codebuild.Source.codeCommit({ repository: repo, cloneDepth: 2 });
            new codebuild.Project(stack, 'MyProject', {
                source
            });
            assert_1.expect(stack).toMatch({
                "Resources": {
                    "MyRepoF4F48043": {
                        "Type": "AWS::CodeCommit::Repository",
                        "Properties": {
                            "RepositoryName": "hello-cdk"
                        }
                    },
                    "MyProjectRole9BBE5233": {
                        "Type": "AWS::IAM::Role",
                        "Properties": {
                            "AssumeRolePolicyDocument": {
                                "Statement": [
                                    {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": {
                                            "Service": "codebuild.amazonaws.com"
                                        }
                                    }
                                ],
                                "Version": "2012-10-17"
                            }
                        }
                    },
                    "MyProjectRoleDefaultPolicyB19B7C29": {
                        "Type": "AWS::IAM::Policy",
                        "Properties": {
                            "PolicyDocument": {
                                "Statement": [
                                    {
                                        "Action": "codecommit:GitPull",
                                        "Effect": "Allow",
                                        "Resource": {
                                            "Fn::GetAtt": [
                                                "MyRepoF4F48043",
                                                "Arn"
                                            ]
                                        }
                                    },
                                    {
                                        "Action": [
                                            "logs:CreateLogGroup",
                                            "logs:CreateLogStream",
                                            "logs:PutLogEvents"
                                        ],
                                        "Effect": "Allow",
                                        "Resource": [
                                            {
                                                "Fn::Join": [
                                                    "",
                                                    [
                                                        "arn:",
                                                        {
                                                            "Ref": "AWS::Partition"
                                                        },
                                                        ":logs:",
                                                        {
                                                            "Ref": "AWS::Region"
                                                        },
                                                        ":",
                                                        {
                                                            "Ref": "AWS::AccountId"
                                                        },
                                                        ":log-group:/aws/codebuild/",
                                                        {
                                                            "Ref": "MyProject39F7B0AE"
                                                        }
                                                    ]
                                                ]
                                            },
                                            {
                                                "Fn::Join": [
                                                    "",
                                                    [
                                                        "arn:",
                                                        {
                                                            "Ref": "AWS::Partition"
                                                        },
                                                        ":logs:",
                                                        {
                                                            "Ref": "AWS::Region"
                                                        },
                                                        ":",
                                                        {
                                                            "Ref": "AWS::AccountId"
                                                        },
                                                        ":log-group:/aws/codebuild/",
                                                        {
                                                            "Ref": "MyProject39F7B0AE"
                                                        },
                                                        ":*"
                                                    ]
                                                ]
                                            }
                                        ]
                                    }
                                ],
                                "Version": "2012-10-17"
                            },
                            "PolicyName": "MyProjectRoleDefaultPolicyB19B7C29",
                            "Roles": [
                                {
                                    "Ref": "MyProjectRole9BBE5233"
                                }
                            ]
                        }
                    },
                    "MyProject39F7B0AE": {
                        "Type": "AWS::CodeBuild::Project",
                        "Properties": {
                            "Artifacts": {
                                "Type": "NO_ARTIFACTS"
                            },
                            "Environment": {
                                "ComputeType": "BUILD_GENERAL1_SMALL",
                                "Image": "aws/codebuild/standard:1.0",
                                "PrivilegedMode": false,
                                "Type": "LINUX_CONTAINER"
                            },
                            "ServiceRole": {
                                "Fn::GetAtt": [
                                    "MyProjectRole9BBE5233",
                                    "Arn"
                                ]
                            },
                            "Source": {
                                "Location": {
                                    "Fn::GetAtt": [
                                        "MyRepoF4F48043",
                                        "CloneUrlHttp"
                                    ]
                                },
                                "GitCloneDepth": 2,
                                "Type": "CODECOMMIT"
                            }
                        }
                    }
                }
            });
            test.done();
        },
        'with S3Bucket source'(test) {
            const stack = new cdk.Stack();
            const bucket = new s3.Bucket(stack, 'MyBucket');
            new codebuild.Project(stack, 'MyProject', {
                source: codebuild.Source.s3({
                    bucket,
                    path: 'path/to/source.zip',
                }),
                environment: {
                    buildImage: codebuild.WindowsBuildImage.WIN_SERVER_CORE_2016_BASE,
                },
            });
            assert_1.expect(stack).toMatch({
                "Resources": {
                    "MyBucketF68F3FF0": {
                        "Type": "AWS::S3::Bucket",
                        "DeletionPolicy": "Retain",
                        "UpdateReplacePolicy": "Retain"
                    },
                    "MyProjectRole9BBE5233": {
                        "Type": "AWS::IAM::Role",
                        "Properties": {
                            "AssumeRolePolicyDocument": {
                                "Statement": [
                                    {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": {
                                            "Service": "codebuild.amazonaws.com"
                                        }
                                    }
                                ],
                                "Version": "2012-10-17"
                            }
                        }
                    },
                    "MyProjectRoleDefaultPolicyB19B7C29": {
                        "Type": "AWS::IAM::Policy",
                        "Properties": {
                            "PolicyDocument": {
                                "Statement": [
                                    {
                                        "Action": [
                                            "s3:GetObject*",
                                            "s3:GetBucket*",
                                            "s3:List*"
                                        ],
                                        "Effect": "Allow",
                                        "Resource": [
                                            {
                                                "Fn::GetAtt": [
                                                    "MyBucketF68F3FF0",
                                                    "Arn"
                                                ]
                                            },
                                            {
                                                "Fn::Join": [
                                                    "",
                                                    [
                                                        {
                                                            "Fn::GetAtt": [
                                                                "MyBucketF68F3FF0",
                                                                "Arn"
                                                            ]
                                                        },
                                                        "/*"
                                                    ]
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "Action": [
                                            "logs:CreateLogGroup",
                                            "logs:CreateLogStream",
                                            "logs:PutLogEvents"
                                        ],
                                        "Effect": "Allow",
                                        "Resource": [
                                            {
                                                "Fn::Join": [
                                                    "",
                                                    [
                                                        "arn:",
                                                        {
                                                            "Ref": "AWS::Partition"
                                                        },
                                                        ":logs:",
                                                        {
                                                            "Ref": "AWS::Region"
                                                        },
                                                        ":",
                                                        {
                                                            "Ref": "AWS::AccountId"
                                                        },
                                                        ":log-group:/aws/codebuild/",
                                                        {
                                                            "Ref": "MyProject39F7B0AE"
                                                        }
                                                    ]
                                                ]
                                            },
                                            {
                                                "Fn::Join": [
                                                    "",
                                                    [
                                                        "arn:",
                                                        {
                                                            "Ref": "AWS::Partition"
                                                        },
                                                        ":logs:",
                                                        {
                                                            "Ref": "AWS::Region"
                                                        },
                                                        ":",
                                                        {
                                                            "Ref": "AWS::AccountId"
                                                        },
                                                        ":log-group:/aws/codebuild/",
                                                        {
                                                            "Ref": "MyProject39F7B0AE"
                                                        },
                                                        ":*"
                                                    ]
                                                ]
                                            }
                                        ]
                                    }
                                ],
                                "Version": "2012-10-17"
                            },
                            "PolicyName": "MyProjectRoleDefaultPolicyB19B7C29",
                            "Roles": [
                                {
                                    "Ref": "MyProjectRole9BBE5233"
                                }
                            ]
                        }
                    },
                    "MyProject39F7B0AE": {
                        "Type": "AWS::CodeBuild::Project",
                        "Properties": {
                            "Artifacts": {
                                "Type": "NO_ARTIFACTS"
                            },
                            "Environment": {
                                "ComputeType": "BUILD_GENERAL1_MEDIUM",
                                "Image": "aws/codebuild/windows-base:1.0",
                                "PrivilegedMode": false,
                                "Type": "WINDOWS_CONTAINER"
                            },
                            "ServiceRole": {
                                "Fn::GetAtt": [
                                    "MyProjectRole9BBE5233",
                                    "Arn"
                                ]
                            },
                            "Source": {
                                "Location": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Ref": "MyBucketF68F3FF0"
                                            },
                                            "/path/to/source.zip"
                                        ]
                                    ]
                                },
                                "Type": "S3"
                            }
                        }
                    }
                }
            });
            test.done();
        },
        'with GitHub source'(test) {
            const stack = new cdk.Stack();
            new codebuild.Project(stack, 'Project', {
                source: codebuild.Source.gitHub({
                    owner: 'testowner',
                    repo: 'testrepo',
                    cloneDepth: 3,
                    webhook: true,
                    reportBuildStatus: false,
                    webhookFilters: [
                        codebuild.FilterGroup.inEventOf(codebuild.EventAction.PUSH).andTagIsNot('stable'),
                        codebuild.FilterGroup.inEventOf(codebuild.EventAction.PULL_REQUEST_REOPENED).andBaseBranchIs('master'),
                    ],
                })
            });
            assert_1.expect(stack).to(assert_1.haveResource('AWS::CodeBuild::Project', {
                Source: {
                    Type: "GITHUB",
                    Location: 'https://github.com/testowner/testrepo.git',
                    ReportBuildStatus: false,
                    GitCloneDepth: 3,
                }
            }));
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodeBuild::Project', {
                Triggers: {
                    Webhook: true,
                    FilterGroups: [
                        [
                            { Type: 'EVENT', Pattern: 'PUSH' },
                            { Type: 'HEAD_REF', Pattern: 'refs/tags/stable', ExcludeMatchedPattern: true },
                        ],
                        [
                            { Type: 'EVENT', Pattern: 'PULL_REQUEST_REOPENED' },
                            { Type: 'BASE_REF', Pattern: 'refs/heads/master' },
                        ],
                    ],
                },
            }));
            test.done();
        },
        'with GitHubEnterprise source'(test) {
            const stack = new cdk.Stack();
            const pushFilterGroup = codebuild.FilterGroup.inEventOf(codebuild.EventAction.PUSH);
            new codebuild.Project(stack, 'MyProject', {
                source: codebuild.Source.gitHubEnterprise({
                    httpsCloneUrl: 'https://github.testcompany.com/testowner/testrepo',
                    ignoreSslErrors: true,
                    cloneDepth: 4,
                    webhook: true,
                    reportBuildStatus: false,
                    webhookFilters: [
                        pushFilterGroup.andBranchIs('master'),
                        pushFilterGroup.andBranchIs('develop'),
                        pushFilterGroup.andFilePathIs('ReadMe.md'),
                    ],
                })
            });
            assert_1.expect(stack).to(assert_1.haveResource('AWS::CodeBuild::Project', {
                Source: {
                    Type: "GITHUB_ENTERPRISE",
                    InsecureSsl: true,
                    GitCloneDepth: 4,
                    ReportBuildStatus: false,
                    Location: 'https://github.testcompany.com/testowner/testrepo'
                }
            }));
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodeBuild::Project', {
                Triggers: {
                    Webhook: true,
                    FilterGroups: [
                        [
                            { Type: 'EVENT', Pattern: 'PUSH' },
                            { Type: 'HEAD_REF', Pattern: 'refs/heads/master' },
                        ],
                        [
                            { Type: 'EVENT', Pattern: 'PUSH' },
                            { Type: 'HEAD_REF', Pattern: 'refs/heads/develop' },
                        ],
                        [
                            { Type: 'EVENT', Pattern: 'PUSH' },
                            { Type: 'FILE_PATH', Pattern: 'ReadMe.md' },
                        ],
                    ],
                },
            }));
            test.done();
        },
        'with Bitbucket source'(test) {
            const stack = new cdk.Stack();
            new codebuild.Project(stack, 'Project', {
                source: codebuild.Source.bitBucket({
                    owner: 'testowner',
                    repo: 'testrepo',
                    cloneDepth: 5,
                    reportBuildStatus: false,
                    webhookFilters: [
                        codebuild.FilterGroup.inEventOf(codebuild.EventAction.PULL_REQUEST_CREATED, codebuild.EventAction.PULL_REQUEST_UPDATED, codebuild.EventAction.PULL_REQUEST_MERGED).andTagIs('v.*'),
                        // duplicate event actions are fine
                        codebuild.FilterGroup.inEventOf(codebuild.EventAction.PUSH, codebuild.EventAction.PUSH).andActorAccountIsNot('aws-cdk-dev'),
                    ],
                })
            });
            assert_1.expect(stack).to(assert_1.haveResource('AWS::CodeBuild::Project', {
                Source: {
                    Type: 'BITBUCKET',
                    Location: 'https://bitbucket.org/testowner/testrepo.git',
                    GitCloneDepth: 5,
                    ReportBuildStatus: false,
                },
            }));
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodeBuild::Project', {
                Triggers: {
                    Webhook: true,
                    FilterGroups: [
                        [
                            { Type: 'EVENT', Pattern: 'PULL_REQUEST_CREATED, PULL_REQUEST_UPDATED, PULL_REQUEST_MERGED' },
                            { Type: 'HEAD_REF', Pattern: 'refs/tags/v.*' },
                        ],
                        [
                            { Type: 'EVENT', Pattern: 'PUSH' },
                            { Type: 'ACTOR_ACCOUNT_ID', Pattern: 'aws-cdk-dev', ExcludeMatchedPattern: true },
                        ],
                    ],
                },
            }));
            test.done();
        },
        'fail creating a Project when no build spec is given'(test) {
            const stack = new cdk.Stack();
            test.throws(() => {
                new codebuild.Project(stack, 'MyProject', {});
            }, /buildSpec/);
            test.done();
        },
        'with VPC configuration'(test) {
            const stack = new cdk.Stack();
            const bucket = new s3.Bucket(stack, 'MyBucket');
            const vpc = new ec2.Vpc(stack, 'MyVPC');
            const securityGroup = new ec2.SecurityGroup(stack, 'SecurityGroup1', {
                securityGroupName: 'Bob',
                vpc,
                allowAllOutbound: true,
                description: 'Example',
            });
            const project = new codebuild.Project(stack, 'MyProject', {
                source: codebuild.Source.s3({
                    bucket,
                    path: 'path/to/source.zip',
                }),
                vpc,
                securityGroups: [securityGroup]
            });
            assert_1.expect(stack).to(assert_1.haveResourceLike("AWS::CodeBuild::Project", {
                "VpcConfig": {
                    "SecurityGroupIds": [
                        {
                            "Fn::GetAtt": [
                                "SecurityGroup1F554B36F",
                                "GroupId"
                            ]
                        }
                    ],
                    "Subnets": [
                        {
                            "Ref": "MyVPCPrivateSubnet1Subnet641543F4"
                        },
                        {
                            "Ref": "MyVPCPrivateSubnet2SubnetA420D3F0"
                        }
                    ],
                    "VpcId": {
                        "Ref": "MyVPCAFB07A31"
                    }
                }
            }));
            test.notEqual(project.connections, undefined);
            test.done();
        },
        'without VPC configuration but security group identified'(test) {
            const stack = new cdk.Stack();
            const bucket = new s3.Bucket(stack, 'MyBucket');
            const vpc = new ec2.Vpc(stack, 'MyVPC');
            const securityGroup = new ec2.SecurityGroup(stack, 'SecurityGroup1', {
                securityGroupName: 'Bob',
                vpc,
                allowAllOutbound: true,
                description: 'Example',
            });
            test.throws(() => new codebuild.Project(stack, 'MyProject', {
                source: codebuild.Source.s3({
                    bucket,
                    path: 'path/to/source.zip',
                }),
                securityGroups: [securityGroup]
            }), /Cannot configure 'securityGroup' or 'allowAllOutbound' without configuring a VPC/);
            test.done();
        },
        'with VPC configuration but allowAllOutbound identified'(test) {
            const stack = new cdk.Stack();
            const bucket = new s3.Bucket(stack, 'MyBucket');
            const vpc = new ec2.Vpc(stack, 'MyVPC');
            const securityGroup = new ec2.SecurityGroup(stack, 'SecurityGroup1', {
                securityGroupName: 'Bob',
                vpc,
                allowAllOutbound: true,
                description: 'Example',
            });
            test.throws(() => new codebuild.Project(stack, 'MyProject', {
                source: codebuild.Source.s3({
                    bucket,
                    path: 'path/to/source.zip',
                }),
                vpc,
                allowAllOutbound: true,
                securityGroups: [securityGroup]
            }), /Configure 'allowAllOutbound' directly on the supplied SecurityGroup/);
            test.done();
        },
        'without passing a VPC cannot access the connections property'(test) {
            const stack = new cdk.Stack();
            const project = new codebuild.PipelineProject(stack, 'MyProject');
            test.throws(() => project.connections, /Only VPC-associated Projects have security groups to manage. Supply the "vpc" parameter when creating the Project/);
            test.done();
        },
        'with a KMS Key adds decrypt permissions to the CodeBuild Role'(test) {
            const stack = new cdk.Stack();
            const key = new kms.Key(stack, 'MyKey');
            new codebuild.PipelineProject(stack, 'MyProject', {
                encryptionKey: key,
            });
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::IAM::Policy', {
                "PolicyDocument": {
                    "Statement": [
                        {},
                        {
                            "Action": [
                                "kms:Decrypt",
                                "kms:Encrypt",
                                "kms:ReEncrypt*",
                                "kms:GenerateDataKey*",
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::GetAtt": [
                                    "MyKey6AB29FA6",
                                    "Arn",
                                ],
                            },
                        },
                    ],
                },
                "Roles": [
                    {
                        "Ref": "MyProjectRole9BBE5233",
                    },
                ],
            }));
            test.done();
        },
    },
    'using timeout and path in S3 artifacts sets it correctly'(test) {
        const stack = new cdk.Stack();
        const bucket = new s3.Bucket(stack, 'Bucket');
        new codebuild.Project(stack, 'Project', {
            buildSpec: codebuild.BuildSpec.fromObject({
                version: '0.2',
            }),
            artifacts: codebuild.Artifacts.s3({
                path: 'some/path',
                name: 'some_name',
                bucket,
            }),
            timeout: cdk.Duration.minutes(123),
        });
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodeBuild::Project', {
            "Artifacts": {
                "Path": "some/path",
                "Name": "some_name",
                "Type": "S3",
            },
            "TimeoutInMinutes": 123,
        }));
        test.done();
    },
    'secondary sources': {
        'require providing an identifier when creating a Project'(test) {
            const stack = new cdk.Stack();
            test.throws(() => {
                new codebuild.Project(stack, 'MyProject', {
                    buildSpec: codebuild.BuildSpec.fromObject({
                        version: '0.2',
                    }),
                    secondarySources: [
                        codebuild.Source.s3({
                            bucket: new s3.Bucket(stack, 'MyBucket'),
                            path: 'path',
                        }),
                    ],
                });
            }, /identifier/);
            test.done();
        },
        'are not allowed for a Project with CodePipeline as Source'(test) {
            const stack = new cdk.Stack();
            const project = new codebuild.PipelineProject(stack, 'MyProject');
            project.addSecondarySource(codebuild.Source.s3({
                bucket: new s3.Bucket(stack, 'MyBucket'),
                path: 'some/path',
                identifier: 'id',
            }));
            test.throws(() => {
                assert_1.expect(stack);
            }, /secondary sources/);
            test.done();
        },
        'added with an identifer after the Project has been created are rendered in the template'(test) {
            const stack = new cdk.Stack();
            const bucket = new s3.Bucket(stack, 'MyBucket');
            const project = new codebuild.Project(stack, 'MyProject', {
                source: codebuild.Source.s3({
                    bucket,
                    path: 'some/path',
                }),
            });
            project.addSecondarySource(codebuild.Source.s3({
                bucket,
                path: 'another/path',
                identifier: 'source1',
            }));
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodeBuild::Project', {
                "SecondarySources": [
                    {
                        "SourceIdentifier": "source1",
                        "Type": "S3",
                    },
                ],
            }));
            test.done();
        },
    },
    'secondary source versions': {
        'allow secondary source versions'(test) {
            const stack = new cdk.Stack();
            const bucket = new s3.Bucket(stack, 'MyBucket');
            const project = new codebuild.Project(stack, 'MyProject', {
                source: codebuild.Source.s3({
                    bucket,
                    path: 'some/path',
                }),
            });
            project.addSecondarySource(codebuild.Source.s3({
                bucket,
                path: 'another/path',
                identifier: 'source1',
                version: 'someversion'
            }));
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodeBuild::Project', {
                "SecondarySources": [
                    {
                        "SourceIdentifier": "source1",
                        "Type": "S3",
                    },
                ],
                "SecondarySourceVersions": [
                    {
                        "SourceIdentifier": "source1",
                        "SourceVersion": "someversion"
                    }
                ]
            }));
            test.done();
        },
        'allow not to specify secondary source versions'(test) {
            const stack = new cdk.Stack();
            const bucket = new s3.Bucket(stack, 'MyBucket');
            const project = new codebuild.Project(stack, 'MyProject', {
                source: codebuild.Source.s3({
                    bucket,
                    path: 'some/path',
                }),
            });
            project.addSecondarySource(codebuild.Source.s3({
                bucket,
                path: 'another/path',
                identifier: 'source1',
            }));
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodeBuild::Project', {
                "SecondarySources": [
                    {
                        "SourceIdentifier": "source1",
                        "Type": "S3",
                    },
                ]
            }));
            test.done();
        },
    },
    'secondary artifacts': {
        'require providing an identifier when creating a Project'(test) {
            const stack = new cdk.Stack();
            test.throws(() => {
                new codebuild.Project(stack, 'MyProject', {
                    buildSpec: codebuild.BuildSpec.fromObject({
                        version: '0.2',
                    }),
                    secondaryArtifacts: [
                        codebuild.Artifacts.s3({
                            bucket: new s3.Bucket(stack, 'MyBucket'),
                            path: 'some/path',
                            name: 'name',
                        }),
                    ],
                });
            }, /identifier/);
            test.done();
        },
        'are not allowed for a Project with CodePipeline as Source'(test) {
            const stack = new cdk.Stack();
            const project = new codebuild.PipelineProject(stack, 'MyProject');
            project.addSecondaryArtifact(codebuild.Artifacts.s3({
                bucket: new s3.Bucket(stack, 'MyBucket'),
                path: 'some/path',
                name: 'name',
                identifier: 'id',
            }));
            test.throws(() => {
                assert_1.expect(stack);
            }, /secondary artifacts/);
            test.done();
        },
        'added with an identifier after the Project has been created are rendered in the template'(test) {
            const stack = new cdk.Stack();
            const bucket = new s3.Bucket(stack, 'MyBucket');
            const project = new codebuild.Project(stack, 'MyProject', {
                source: codebuild.Source.s3({
                    bucket,
                    path: 'some/path',
                }),
            });
            project.addSecondaryArtifact(codebuild.Artifacts.s3({
                bucket,
                path: 'another/path',
                name: 'name',
                identifier: 'artifact1',
            }));
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodeBuild::Project', {
                "SecondaryArtifacts": [
                    {
                        "ArtifactIdentifier": "artifact1",
                        "Type": "S3",
                    },
                ],
            }));
            test.done();
        },
        'disabledEncryption is set'(test) {
            const stack = new cdk.Stack();
            const bucket = new s3.Bucket(stack, 'MyBucket');
            const project = new codebuild.Project(stack, 'MyProject', {
                source: codebuild.Source.s3({
                    bucket,
                    path: 'some/path',
                }),
            });
            project.addSecondaryArtifact(codebuild.Artifacts.s3({
                bucket,
                path: 'another/path',
                name: 'name',
                identifier: 'artifact1',
                encryption: false,
            }));
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodeBuild::Project', {
                "SecondaryArtifacts": [
                    {
                        "ArtifactIdentifier": "artifact1",
                        "EncryptionDisabled": true,
                    },
                ],
            }));
            test.done();
        },
    },
    'artifacts': {
        'CodePipeline': {
            'both source and artifacs are set to CodePipeline'(test) {
                const stack = new cdk.Stack();
                new codebuild.PipelineProject(stack, 'MyProject');
                assert_1.expect(stack).to(assert_1.haveResource('AWS::CodeBuild::Project', {
                    "Source": {
                        "Type": "CODEPIPELINE"
                    },
                    "Artifacts": {
                        "Type": "CODEPIPELINE"
                    },
                    "ServiceRole": {
                        "Fn::GetAtt": [
                            "MyProjectRole9BBE5233",
                            "Arn"
                        ]
                    },
                    "Environment": {
                        "Type": "LINUX_CONTAINER",
                        "PrivilegedMode": false,
                        "Image": "aws/codebuild/standard:1.0",
                        "ComputeType": "BUILD_GENERAL1_SMALL"
                    }
                }));
                test.done();
            },
        },
    },
    'events'(test) {
        const stack = new cdk.Stack();
        const project = new codebuild.Project(stack, 'MyProject', {
            source: codebuild.Source.s3({
                bucket: new s3.Bucket(stack, 'MyBucket'),
                path: 'path',
            }),
        });
        project.onBuildFailed('OnBuildFailed', { target: { bind: () => ({ arn: 'ARN', id: 'ID' }) } });
        project.onBuildSucceeded('OnBuildSucceeded', { target: { bind: () => ({ arn: 'ARN', id: 'ID' }) } });
        project.onPhaseChange('OnPhaseChange', { target: { bind: () => ({ arn: 'ARN', id: 'ID' }) } });
        project.onStateChange('OnStateChange', { target: { bind: () => ({ arn: 'ARN', id: 'ID' }) } });
        project.onBuildStarted('OnBuildStarted', { target: { bind: () => ({ arn: 'ARN', id: 'ID' }) } });
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Events::Rule', {
            "EventPattern": {
                "source": [
                    "aws.codebuild"
                ],
                "detail-type": [
                    "CodeBuild Build State Change"
                ],
                "detail": {
                    "project-name": [
                        {
                            "Ref": "MyProject39F7B0AE"
                        }
                    ],
                    "build-status": [
                        "FAILED"
                    ]
                }
            },
            "State": "ENABLED"
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Events::Rule', {
            "EventPattern": {
                "source": [
                    "aws.codebuild"
                ],
                "detail-type": [
                    "CodeBuild Build State Change"
                ],
                "detail": {
                    "project-name": [
                        {
                            "Ref": "MyProject39F7B0AE"
                        }
                    ],
                    "build-status": [
                        "SUCCEEDED"
                    ]
                }
            },
            "State": "ENABLED"
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Events::Rule', {
            "EventPattern": {
                "source": [
                    "aws.codebuild"
                ],
                "detail-type": [
                    "CodeBuild Build Phase Change"
                ],
                "detail": {
                    "project-name": [
                        {
                            "Ref": "MyProject39F7B0AE"
                        }
                    ]
                }
            },
            "State": "ENABLED"
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Events::Rule', {
            "EventPattern": {
                "source": [
                    "aws.codebuild"
                ],
                "detail-type": [
                    "CodeBuild Build State Change"
                ],
                "detail": {
                    "project-name": [
                        {
                            "Ref": "MyProject39F7B0AE"
                        }
                    ]
                }
            },
            "State": "ENABLED"
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Events::Rule', {
            "EventPattern": {
                "source": [
                    "aws.codebuild"
                ],
                "detail-type": [
                    "CodeBuild Build State Change"
                ],
                "detail": {
                    "project-name": [
                        {
                            "Ref": "MyProject39F7B0AE"
                        }
                    ],
                    "build-status": [
                        "IN_PROGRESS"
                    ]
                }
            },
            "State": "ENABLED"
        }));
        test.done();
    },
    'environment variables can be overridden at the project level'(test) {
        const stack = new cdk.Stack();
        new codebuild.PipelineProject(stack, 'Project', {
            environment: {
                environmentVariables: {
                    FOO: { value: '1234' },
                    BAR: { value: `111${cdk.Token.asString({ twotwotwo: '222' })}`, type: codebuild.BuildEnvironmentVariableType.PARAMETER_STORE }
                }
            },
            environmentVariables: {
                GOO: { value: 'ABC' },
                FOO: { value: 'OVERRIDE!' }
            }
        });
        assert_1.expect(stack).to(assert_1.haveResource('AWS::CodeBuild::Project', {
            "Source": {
                "Type": "CODEPIPELINE"
            },
            "Artifacts": {
                "Type": "CODEPIPELINE"
            },
            "ServiceRole": {
                "Fn::GetAtt": [
                    "ProjectRole4CCB274E",
                    "Arn"
                ]
            },
            "Environment": {
                "Type": "LINUX_CONTAINER",
                "EnvironmentVariables": [
                    {
                        "Type": "PLAINTEXT",
                        "Value": "OVERRIDE!",
                        "Name": "FOO"
                    },
                    {
                        "Type": "PARAMETER_STORE",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "111",
                                    { twotwotwo: "222" }
                                ]
                            ]
                        },
                        "Name": "BAR"
                    },
                    {
                        "Type": "PLAINTEXT",
                        "Value": "ABC",
                        "Name": "GOO"
                    }
                ],
                "PrivilegedMode": false,
                "Image": "aws/codebuild/standard:1.0",
                "ComputeType": "BUILD_GENERAL1_SMALL"
            }
        }));
        test.done();
    },
    '.metricXxx() methods can be used to obtain Metrics for CodeBuild projects'(test) {
        const stack = new cdk.Stack();
        const project = new codebuild.Project(stack, 'MyBuildProject', {
            source: codebuild.Source.s3({
                bucket: new s3.Bucket(stack, 'MyBucket'),
                path: 'path',
            }),
        });
        const metricBuilds = project.metricBuilds();
        test.same(metricBuilds.dimensions.ProjectName, project.projectName);
        test.deepEqual(metricBuilds.namespace, 'AWS/CodeBuild');
        test.deepEqual(metricBuilds.statistic, 'Sum', 'default stat is SUM');
        test.deepEqual(metricBuilds.metricName, 'Builds');
        const metricDuration = project.metricDuration({ label: 'hello' });
        test.deepEqual(metricDuration.metricName, 'Duration');
        test.deepEqual(metricDuration.label, 'hello');
        test.deepEqual(project.metricFailedBuilds().metricName, 'FailedBuilds');
        test.deepEqual(project.metricSucceededBuilds().metricName, 'SucceededBuilds');
        test.done();
    },
    'using ComputeType.Small with a Windows image fails validation'(test) {
        const stack = new cdk.Stack();
        const invalidEnvironment = {
            buildImage: codebuild.WindowsBuildImage.WIN_SERVER_CORE_2016_BASE,
            computeType: codebuild.ComputeType.SMALL,
        };
        test.throws(() => {
            new codebuild.Project(stack, 'MyProject', {
                source: codebuild.Source.s3({
                    bucket: new s3.Bucket(stack, 'MyBucket'),
                    path: 'path',
                }),
                environment: invalidEnvironment,
            });
        }, /Windows images do not support the Small ComputeType/);
        test.done();
    },
    'ARM image': {
        'AMAZON_LINUX_2_ARM': {
            'has type ARM_CONTAINER and default ComputeType LARGE'(test) {
                const stack = new cdk.Stack();
                new codebuild.PipelineProject(stack, 'Project', {
                    environment: {
                        buildImage: codebuild.LinuxBuildImage.AMAZON_LINUX_2_ARM,
                    },
                });
                assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodeBuild::Project', {
                    "Environment": {
                        "Type": "ARM_CONTAINER",
                        "ComputeType": "BUILD_GENERAL1_LARGE",
                    },
                }));
                test.done();
            },
            'cannot be used in conjunction with ComputeType SMALL'(test) {
                const stack = new cdk.Stack();
                test.throws(() => {
                    new codebuild.PipelineProject(stack, 'Project', {
                        environment: {
                            buildImage: codebuild.LinuxBuildImage.AMAZON_LINUX_2_ARM,
                            computeType: codebuild.ComputeType.SMALL,
                        },
                    });
                }, /ARM images only support ComputeType 'BUILD_GENERAL1_LARGE' - 'BUILD_GENERAL1_SMALL' was given/);
                test.done();
            },
            'cannot be used in conjunction with ComputeType MEDIUM'(test) {
                const stack = new cdk.Stack();
                test.throws(() => {
                    new codebuild.PipelineProject(stack, 'Project', {
                        environment: {
                            buildImage: codebuild.LinuxBuildImage.AMAZON_LINUX_2_ARM,
                            computeType: codebuild.ComputeType.MEDIUM,
                        },
                    });
                }, /ARM images only support ComputeType 'BUILD_GENERAL1_LARGE' - 'BUILD_GENERAL1_MEDIUM' was given/);
                test.done();
            },
            'cannot be used in conjunction with ComputeType X2_LARGE'(test) {
                const stack = new cdk.Stack();
                test.throws(() => {
                    new codebuild.PipelineProject(stack, 'Project', {
                        environment: {
                            buildImage: codebuild.LinuxBuildImage.AMAZON_LINUX_2_ARM,
                            computeType: codebuild.ComputeType.X2_LARGE,
                        },
                    });
                }, /ARM images only support ComputeType 'BUILD_GENERAL1_LARGE' - 'BUILD_GENERAL1_2XLARGE' was given/);
                test.done();
            },
        },
    },
    'badge support test'(test) {
        const stack = new cdk.Stack();
        const repo = new codecommit.Repository(stack, 'MyRepo', {
            repositoryName: 'hello-cdk',
        });
        const bucket = new s3.Bucket(stack, 'MyBucket');
        const cases = [
            { source: new no_source_1.NoSource(), allowsBadge: false },
            { source: new codepipeline_source_1.CodePipelineSource(), allowsBadge: false },
            { source: codebuild.Source.codeCommit({ repository: repo }), allowsBadge: true },
            { source: codebuild.Source.s3({ bucket, path: 'path/to/source.zip' }), allowsBadge: false },
            { source: codebuild.Source.gitHub({ owner: 'awslabs', repo: 'aws-cdk' }), allowsBadge: true },
            { source: codebuild.Source.gitHubEnterprise({ httpsCloneUrl: 'url' }), allowsBadge: true },
            { source: codebuild.Source.bitBucket({ owner: 'awslabs', repo: 'aws-cdk' }), allowsBadge: true },
        ];
        cases.forEach(testCase => {
            const source = testCase.source;
            const validationBlock = () => { new codebuild.Project(stack, `MyProject-${source.type}`, { source, badge: true }); };
            if (testCase.allowsBadge) {
                test.doesNotThrow(validationBlock);
            }
            else {
                test.throws(validationBlock, /Badge is not supported for source type /);
            }
        });
        test.done();
    },
    'webhook Filters': {
        'a Group cannot be created with an empty set of event actions'(test) {
            test.throws(() => {
                codebuild.FilterGroup.inEventOf();
            }, /A filter group must contain at least one event action/);
            test.done();
        },
        'cannot have base ref conditions if the Group contains the PUSH action'(test) {
            const filterGroup = codebuild.FilterGroup.inEventOf(codebuild.EventAction.PULL_REQUEST_CREATED, codebuild.EventAction.PUSH);
            test.throws(() => {
                filterGroup.andBaseRefIs('.*');
            }, /A base reference condition cannot be added if a Group contains a PUSH event action/);
            test.done();
        },
        'cannot have file path conditions if the Group contains any action other than PUSH'(test) {
            const filterGroup = codebuild.FilterGroup.inEventOf(codebuild.EventAction.PULL_REQUEST_CREATED, codebuild.EventAction.PUSH);
            test.throws(() => {
                filterGroup.andFilePathIsNot('.*\\.java');
            }, /A file path condition cannot be added if a Group contains any event action other than PUSH/);
            test.done();
        },
        'BitBucket sources do not support the PULL_REQUEST_REOPENED event action'(test) {
            const stack = new cdk.Stack();
            test.throws(() => {
                new codebuild.Project(stack, 'Project', {
                    source: codebuild.Source.bitBucket({
                        owner: 'owner',
                        repo: 'repo',
                        webhookFilters: [
                            codebuild.FilterGroup.inEventOf(codebuild.EventAction.PULL_REQUEST_REOPENED),
                        ],
                    }),
                });
            }, /BitBucket sources do not support the PULL_REQUEST_REOPENED webhook event action/);
            test.done();
        },
        'BitBucket sources do not support file path conditions'(test) {
            const stack = new cdk.Stack();
            const filterGroup = codebuild.FilterGroup.inEventOf(codebuild.EventAction.PUSH).andFilePathIs('.*');
            test.throws(() => {
                new codebuild.Project(stack, 'Project', {
                    source: codebuild.Source.bitBucket({
                        owner: 'owner',
                        repo: 'repo',
                        webhookFilters: [filterGroup],
                    }),
                });
            }, /BitBucket sources do not support file path conditions for webhook filters/);
            test.done();
        },
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5jb2RlYnVpbGQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0ZXN0LmNvZGVidWlsZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNENBQXlFO0FBQ3pFLHNEQUFzRDtBQUN0RCx3Q0FBd0M7QUFDeEMsd0NBQXdDO0FBQ3hDLHNDQUFzQztBQUN0QyxxQ0FBcUM7QUFFckMsb0NBQW9DO0FBQ3BDLG9FQUFnRTtBQUNoRSxnREFBNEM7QUFJNUMsaUJBQVM7SUFDUCxvQkFBb0IsRUFBRTtRQUNwQiwwQkFBMEIsQ0FBQyxJQUFVO1lBQ25DLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBRTlCLElBQUksU0FBUyxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFFbEQsZUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQztnQkFDcEIsV0FBVyxFQUFFO29CQUNiLHVCQUF1QixFQUFFO3dCQUN2QixNQUFNLEVBQUUsZ0JBQWdCO3dCQUN4QixZQUFZLEVBQUU7NEJBQ2QsMEJBQTBCLEVBQUU7Z0NBQzFCLFdBQVcsRUFBRTtvQ0FDYjt3Q0FDRSxRQUFRLEVBQUUsZ0JBQWdCO3dDQUMxQixRQUFRLEVBQUUsT0FBTzt3Q0FDakIsV0FBVyxFQUFFOzRDQUNiLFNBQVMsRUFBRSx5QkFBeUI7eUNBQ25DO3FDQUNGO2lDQUNBO2dDQUNELFNBQVMsRUFBRSxZQUFZOzZCQUN4Qjt5QkFDQTtxQkFDRjtvQkFDRCxvQ0FBb0MsRUFBRTt3QkFDcEMsTUFBTSxFQUFFLGtCQUFrQjt3QkFDMUIsWUFBWSxFQUFFOzRCQUNkLGdCQUFnQixFQUFFO2dDQUNoQixXQUFXLEVBQUU7b0NBQ1g7d0NBQ0UsUUFBUSxFQUFFOzRDQUNSLHFCQUFxQjs0Q0FDckIsc0JBQXNCOzRDQUN0QixtQkFBbUI7eUNBQ3BCO3dDQUNELFFBQVEsRUFBRSxPQUFPO3dDQUNqQixVQUFVLEVBQUU7NENBQ1Y7Z0RB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aEYsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2QsQ0FBQztLQUNGO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4cGVjdCwgaGF2ZVJlc291cmNlLCBoYXZlUmVzb3VyY2VMaWtlIH0gZnJvbSAnQGF3cy1jZGsvYXNzZXJ0JztcbmltcG9ydCAqIGFzIGNvZGVjb21taXQgZnJvbSAnQGF3cy1jZGsvYXdzLWNvZGVjb21taXQnO1xuaW1wb3J0ICogYXMgZWMyIGZyb20gJ0Bhd3MtY2RrL2F3cy1lYzInO1xuaW1wb3J0ICogYXMga21zIGZyb20gJ0Bhd3MtY2RrL2F3cy1rbXMnO1xuaW1wb3J0ICogYXMgczMgZnJvbSAnQGF3cy1jZGsvYXdzLXMzJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCB7IFRlc3QgfSBmcm9tICdub2RldW5pdCc7XG5pbXBvcnQgKiBhcyBjb2RlYnVpbGQgZnJvbSAnLi4vbGliJztcbmltcG9ydCB7IENvZGVQaXBlbGluZVNvdXJjZSB9IGZyb20gJy4uL2xpYi9jb2RlcGlwZWxpbmUtc291cmNlJztcbmltcG9ydCB7IE5vU291cmNlIH0gZnJvbSAnLi4vbGliL25vLXNvdXJjZSc7XG5cbi8vIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLWtleS1xdW90ZXNcblxuZXhwb3J0ID0ge1xuICAnZGVmYXVsdCBwcm9wZXJ0aWVzJzoge1xuICAgICd3aXRoIENvZGVQaXBlbGluZSBzb3VyY2UnKHRlc3Q6IFRlc3QpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuXG4gICAgICBuZXcgY29kZWJ1aWxkLlBpcGVsaW5lUHJvamVjdChzdGFjaywgJ015UHJvamVjdCcpO1xuXG4gICAgICBleHBlY3Qoc3RhY2spLnRvTWF0Y2goe1xuICAgICAgICBcIlJlc291cmNlc1wiOiB7XG4gICAgICAgIFwiTXlQcm9qZWN0Um9sZTlCQkU1MjMzXCI6IHtcbiAgICAgICAgICBcIlR5cGVcIjogXCJBV1M6OklBTTo6Um9sZVwiLFxuICAgICAgICAgIFwiUHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJBc3N1bWVSb2xlUG9saWN5RG9jdW1lbnRcIjoge1xuICAgICAgICAgICAgXCJTdGF0ZW1lbnRcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcIkFjdGlvblwiOiBcInN0czpBc3N1bWVSb2xlXCIsXG4gICAgICAgICAgICAgIFwiRWZmZWN0XCI6IFwiQWxsb3dcIixcbiAgICAgICAgICAgICAgXCJQcmluY2lwYWxcIjoge1xuICAgICAgICAgICAgICBcIlNlcnZpY2VcIjogXCJjb2RlYnVpbGQuYW1hem9uYXdzLmNvbVwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlZlcnNpb25cIjogXCIyMDEyLTEwLTE3XCJcbiAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcIk15UHJvamVjdFJvbGVEZWZhdWx0UG9saWN5QjE5QjdDMjlcIjoge1xuICAgICAgICAgIFwiVHlwZVwiOiBcIkFXUzo6SUFNOjpQb2xpY3lcIixcbiAgICAgICAgICBcIlByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiUG9saWN5RG9jdW1lbnRcIjoge1xuICAgICAgICAgICAgXCJTdGF0ZW1lbnRcIjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJBY3Rpb25cIjogW1xuICAgICAgICAgICAgICAgICAgXCJsb2dzOkNyZWF0ZUxvZ0dyb3VwXCIsXG4gICAgICAgICAgICAgICAgICBcImxvZ3M6Q3JlYXRlTG9nU3RyZWFtXCIsXG4gICAgICAgICAgICAgICAgICBcImxvZ3M6UHV0TG9nRXZlbnRzXCJcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiRWZmZWN0XCI6IFwiQWxsb3dcIixcbiAgICAgICAgICAgICAgICBcIlJlc291cmNlXCI6IFtcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJGbjo6Sm9pblwiOiBbXG4gICAgICAgICAgICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICBcImFybjpcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJSZWZcIjogXCJBV1M6OlBhcnRpdGlvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgXCI6bG9nczpcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJSZWZcIjogXCJBV1M6OlJlZ2lvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgXCI6XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiUmVmXCI6IFwiQVdTOjpBY2NvdW50SWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiOmxvZy1ncm91cDovYXdzL2NvZGVidWlsZC9cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJSZWZcIjogXCJNeVByb2plY3QzOUY3QjBBRVwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcIkZuOjpKb2luXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYXJuOlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcIlJlZlwiOiBcIkFXUzo6UGFydGl0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBcIjpsb2dzOlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcIlJlZlwiOiBcIkFXUzo6UmVnaW9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBcIjpcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJSZWZcIjogXCJBV1M6OkFjY291bnRJZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgXCI6bG9nLWdyb3VwOi9hd3MvY29kZWJ1aWxkL1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcIlJlZlwiOiBcIk15UHJvamVjdDM5RjdCMEFFXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBcIjoqXCJcbiAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlZlcnNpb25cIjogXCIyMDEyLTEwLTE3XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiUG9saWN5TmFtZVwiOiBcIk15UHJvamVjdFJvbGVEZWZhdWx0UG9saWN5QjE5QjdDMjlcIixcbiAgICAgICAgICBcIlJvbGVzXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiUmVmXCI6IFwiTXlQcm9qZWN0Um9sZTlCQkU1MjMzXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcIk15UHJvamVjdDM5RjdCMEFFXCI6IHtcbiAgICAgICAgICBcIlR5cGVcIjogXCJBV1M6OkNvZGVCdWlsZDo6UHJvamVjdFwiLFxuICAgICAgICAgIFwiUHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJTb3VyY2VcIjoge1xuICAgICAgICAgICAgXCJUeXBlXCI6IFwiQ09ERVBJUEVMSU5FXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiQXJ0aWZhY3RzXCI6IHtcbiAgICAgICAgICAgIFwiVHlwZVwiOiBcIkNPREVQSVBFTElORVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIlNlcnZpY2VSb2xlXCI6IHtcbiAgICAgICAgICAgIFwiRm46OkdldEF0dFwiOiBbXG4gICAgICAgICAgICBcIk15UHJvamVjdFJvbGU5QkJFNTIzM1wiLFxuICAgICAgICAgICAgXCJBcm5cIlxuICAgICAgICAgICAgXVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJFbnZpcm9ubWVudFwiOiB7XG4gICAgICAgICAgICBcIlR5cGVcIjogXCJMSU5VWF9DT05UQUlORVJcIixcbiAgICAgICAgICAgIFwiUHJpdmlsZWdlZE1vZGVcIjogZmFsc2UsXG4gICAgICAgICAgICBcIkltYWdlXCI6IFwiYXdzL2NvZGVidWlsZC9zdGFuZGFyZDoxLjBcIixcbiAgICAgICAgICAgIFwiQ29tcHV0ZVR5cGVcIjogXCJCVUlMRF9HRU5FUkFMMV9TTUFMTFwiXG4gICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgdGVzdC5kb25lKCk7XG4gICAgfSxcbiAgICAnd2l0aCBDb2RlQ29tbWl0IHNvdXJjZScodGVzdDogVGVzdCkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG5cbiAgICAgIGNvbnN0IHJlcG8gPSBuZXcgY29kZWNvbW1pdC5SZXBvc2l0b3J5KHN0YWNrLCAnTXlSZXBvJywge1xuICAgICAgICByZXBvc2l0b3J5TmFtZTogJ2hlbGxvLWNkaycsXG4gICAgICB9KTtcblxuICAgICAgY29uc3Qgc291cmNlID0gY29kZWJ1aWxkLlNvdXJjZS5jb2RlQ29tbWl0KHsgcmVwb3NpdG9yeTogcmVwbywgY2xvbmVEZXB0aDogMiB9KTtcblxuICAgICAgbmV3IGNvZGVidWlsZC5Qcm9qZWN0KHN0YWNrLCAnTXlQcm9qZWN0Jywge1xuICAgICAgICBzb3VyY2VcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3Qoc3RhY2spLnRvTWF0Y2goe1xuICAgICAgICBcIlJlc291cmNlc1wiOiB7XG4gICAgICAgIFwiTXlSZXBvRjRGNDgwNDNcIjoge1xuICAgICAgICAgIFwiVHlwZVwiOiBcIkFXUzo6Q29kZUNvbW1pdDo6UmVwb3NpdG9yeVwiLFxuICAgICAgICAgIFwiUHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJSZXBvc2l0b3J5TmFtZVwiOiBcImhlbGxvLWNka1wiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcIk15UHJvamVjdFJvbGU5QkJFNTIzM1wiOiB7XG4gICAgICAgICAgXCJUeXBlXCI6IFwiQVdTOjpJQU06OlJvbGVcIixcbiAgICAgICAgICBcIlByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiQXNzdW1lUm9sZVBvbGljeURvY3VtZW50XCI6IHtcbiAgICAgICAgICAgIFwiU3RhdGVtZW50XCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJBY3Rpb25cIjogXCJzdHM6QXNzdW1lUm9sZVwiLFxuICAgICAgICAgICAgICBcIkVmZmVjdFwiOiBcIkFsbG93XCIsXG4gICAgICAgICAgICAgIFwiUHJpbmNpcGFsXCI6IHtcbiAgICAgICAgICAgICAgXCJTZXJ2aWNlXCI6IFwiY29kZWJ1aWxkLmFtYXpvbmF3cy5jb21cIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJWZXJzaW9uXCI6IFwiMjAxMi0xMC0xN1wiXG4gICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJNeVByb2plY3RSb2xlRGVmYXVsdFBvbGljeUIxOUI3QzI5XCI6IHtcbiAgICAgICAgICBcIlR5cGVcIjogXCJBV1M6OklBTTo6UG9saWN5XCIsXG4gICAgICAgICAgXCJQcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcIlBvbGljeURvY3VtZW50XCI6IHtcbiAgICAgICAgICAgIFwiU3RhdGVtZW50XCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJBY3Rpb25cIjogXCJjb2RlY29tbWl0OkdpdFB1bGxcIixcbiAgICAgICAgICAgICAgXCJFZmZlY3RcIjogXCJBbGxvd1wiLFxuICAgICAgICAgICAgICBcIlJlc291cmNlXCI6IHtcbiAgICAgICAgICAgICAgXCJGbjo6R2V0QXR0XCI6IFtcbiAgICAgICAgICAgICAgICBcIk15UmVwb0Y0RjQ4MDQzXCIsXG4gICAgICAgICAgICAgICAgXCJBcm5cIlxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwiQWN0aW9uXCI6IFtcbiAgICAgICAgICAgICAgXCJsb2dzOkNyZWF0ZUxvZ0dyb3VwXCIsXG4gICAgICAgICAgICAgIFwibG9nczpDcmVhdGVMb2dTdHJlYW1cIixcbiAgICAgICAgICAgICAgXCJsb2dzOlB1dExvZ0V2ZW50c1wiXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIFwiRWZmZWN0XCI6IFwiQWxsb3dcIixcbiAgICAgICAgICAgICAgXCJSZXNvdXJjZVwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIkZuOjpKb2luXCI6IFtcbiAgICAgICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgIFwiYXJuOlwiLFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJSZWZcIjogXCJBV1M6OlBhcnRpdGlvblwiXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgXCI6bG9nczpcIixcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFwiUmVmXCI6IFwiQVdTOjpSZWdpb25cIlxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFwiOlwiLFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJSZWZcIjogXCJBV1M6OkFjY291bnRJZFwiXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgXCI6bG9nLWdyb3VwOi9hd3MvY29kZWJ1aWxkL1wiLFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcIlJlZlwiOiBcIk15UHJvamVjdDM5RjdCMEFFXCJcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJGbjo6Sm9pblwiOiBbXG4gICAgICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICBcImFybjpcIixcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFwiUmVmXCI6IFwiQVdTOjpQYXJ0aXRpb25cIlxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFwiOmxvZ3M6XCIsXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcIlJlZlwiOiBcIkFXUzo6UmVnaW9uXCJcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBcIjpcIixcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFwiUmVmXCI6IFwiQVdTOjpBY2NvdW50SWRcIlxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFwiOmxvZy1ncm91cDovYXdzL2NvZGVidWlsZC9cIixcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJSZWZcIjogXCJNeVByb2plY3QzOUY3QjBBRVwiXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgXCI6KlwiXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJWZXJzaW9uXCI6IFwiMjAxMi0xMC0xN1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIlBvbGljeU5hbWVcIjogXCJNeVByb2plY3RSb2xlRGVmYXVsdFBvbGljeUIxOUI3QzI5XCIsXG4gICAgICAgICAgXCJSb2xlc1wiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICBcIlJlZlwiOiBcIk15UHJvamVjdFJvbGU5QkJFNTIzM1wiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJNeVByb2plY3QzOUY3QjBBRVwiOiB7XG4gICAgICAgICAgXCJUeXBlXCI6IFwiQVdTOjpDb2RlQnVpbGQ6OlByb2plY3RcIixcbiAgICAgICAgICBcIlByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiQXJ0aWZhY3RzXCI6IHtcbiAgICAgICAgICAgIFwiVHlwZVwiOiBcIk5PX0FSVElGQUNUU1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIkVudmlyb25tZW50XCI6IHtcbiAgICAgICAgICAgIFwiQ29tcHV0ZVR5cGVcIjogXCJCVUlMRF9HRU5FUkFMMV9TTUFMTFwiLFxuICAgICAgICAgICAgXCJJbWFnZVwiOiBcImF3cy9jb2RlYnVpbGQvc3RhbmRhcmQ6MS4wXCIsXG4gICAgICAgICAgICBcIlByaXZpbGVnZWRNb2RlXCI6IGZhbHNlLFxuICAgICAgICAgICAgXCJUeXBlXCI6IFwiTElOVVhfQ09OVEFJTkVSXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiU2VydmljZVJvbGVcIjoge1xuICAgICAgICAgICAgXCJGbjo6R2V0QXR0XCI6IFtcbiAgICAgICAgICAgIFwiTXlQcm9qZWN0Um9sZTlCQkU1MjMzXCIsXG4gICAgICAgICAgICBcIkFyblwiXG4gICAgICAgICAgICBdXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIlNvdXJjZVwiOiB7XG4gICAgICAgICAgICBcIkxvY2F0aW9uXCI6IHtcbiAgICAgICAgICAgIFwiRm46OkdldEF0dFwiOiBbXG4gICAgICAgICAgICAgIFwiTXlSZXBvRjRGNDgwNDNcIixcbiAgICAgICAgICAgICAgXCJDbG9uZVVybEh0dHBcIlxuICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiR2l0Q2xvbmVEZXB0aFwiOiAyLFxuICAgICAgICAgICAgXCJUeXBlXCI6IFwiQ09ERUNPTU1JVFwiXG4gICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRlc3QuZG9uZSgpO1xuICAgIH0sXG4gICAgJ3dpdGggUzNCdWNrZXQgc291cmNlJyh0ZXN0OiBUZXN0KSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICAgIGNvbnN0IGJ1Y2tldCA9IG5ldyBzMy5CdWNrZXQoc3RhY2ssICdNeUJ1Y2tldCcpO1xuXG4gICAgICBuZXcgY29kZWJ1aWxkLlByb2plY3Qoc3RhY2ssICdNeVByb2plY3QnLCB7XG4gICAgICAgIHNvdXJjZTogY29kZWJ1aWxkLlNvdXJjZS5zMyh7XG4gICAgICAgICAgYnVja2V0LFxuICAgICAgICAgIHBhdGg6ICdwYXRoL3RvL3NvdXJjZS56aXAnLFxuICAgICAgICB9KSxcbiAgICAgICAgZW52aXJvbm1lbnQ6IHtcbiAgICAgICAgICBidWlsZEltYWdlOiBjb2RlYnVpbGQuV2luZG93c0J1aWxkSW1hZ2UuV0lOX1NFUlZFUl9DT1JFXzIwMTZfQkFTRSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3Qoc3RhY2spLnRvTWF0Y2goe1xuICAgICAgICBcIlJlc291cmNlc1wiOiB7XG4gICAgICAgIFwiTXlCdWNrZXRGNjhGM0ZGMFwiOiB7XG4gICAgICAgICAgXCJUeXBlXCI6IFwiQVdTOjpTMzo6QnVja2V0XCIsXG4gICAgICAgICAgXCJEZWxldGlvblBvbGljeVwiOiBcIlJldGFpblwiLFxuICAgICAgICAgIFwiVXBkYXRlUmVwbGFjZVBvbGljeVwiOiBcIlJldGFpblwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiTXlQcm9qZWN0Um9sZTlCQkU1MjMzXCI6IHtcbiAgICAgICAgICBcIlR5cGVcIjogXCJBV1M6OklBTTo6Um9sZVwiLFxuICAgICAgICAgIFwiUHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJBc3N1bWVSb2xlUG9saWN5RG9jdW1lbnRcIjoge1xuICAgICAgICAgICAgXCJTdGF0ZW1lbnRcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcIkFjdGlvblwiOiBcInN0czpBc3N1bWVSb2xlXCIsXG4gICAgICAgICAgICAgIFwiRWZmZWN0XCI6IFwiQWxsb3dcIixcbiAgICAgICAgICAgICAgXCJQcmluY2lwYWxcIjoge1xuICAgICAgICAgICAgICBcIlNlcnZpY2VcIjogXCJjb2RlYnVpbGQuYW1hem9uYXdzLmNvbVwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlZlcnNpb25cIjogXCIyMDEyLTEwLTE3XCJcbiAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcIk15UHJvamVjdFJvbGVEZWZhdWx0UG9saWN5QjE5QjdDMjlcIjoge1xuICAgICAgICAgIFwiVHlwZVwiOiBcIkFXUzo6SUFNOjpQb2xpY3lcIixcbiAgICAgICAgICBcIlByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiUG9saWN5RG9jdW1lbnRcIjoge1xuICAgICAgICAgICAgXCJTdGF0ZW1lbnRcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcIkFjdGlvblwiOiBbXG4gICAgICAgICAgICAgIFwiczM6R2V0T2JqZWN0KlwiLFxuICAgICAgICAgICAgICBcInMzOkdldEJ1Y2tldCpcIixcbiAgICAgICAgICAgICAgXCJzMzpMaXN0KlwiXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIFwiRWZmZWN0XCI6IFwiQWxsb3dcIixcbiAgICAgICAgICAgICAgXCJSZXNvdXJjZVwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIkZuOjpHZXRBdHRcIjogW1xuICAgICAgICAgICAgICAgIFwiTXlCdWNrZXRGNjhGM0ZGMFwiLFxuICAgICAgICAgICAgICAgIFwiQXJuXCJcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIkZuOjpKb2luXCI6IFtcbiAgICAgICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFwiRm46OkdldEF0dFwiOiBbXG4gICAgICAgICAgICAgICAgICAgIFwiTXlCdWNrZXRGNjhGM0ZGMFwiLFxuICAgICAgICAgICAgICAgICAgICBcIkFyblwiXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgXCIvKlwiXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcIkFjdGlvblwiOiBbXG4gICAgICAgICAgICAgIFwibG9nczpDcmVhdGVMb2dHcm91cFwiLFxuICAgICAgICAgICAgICBcImxvZ3M6Q3JlYXRlTG9nU3RyZWFtXCIsXG4gICAgICAgICAgICAgIFwibG9nczpQdXRMb2dFdmVudHNcIlxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICBcIkVmZmVjdFwiOiBcIkFsbG93XCIsXG4gICAgICAgICAgICAgIFwiUmVzb3VyY2VcIjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJGbjo6Sm9pblwiOiBbXG4gICAgICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICBcImFybjpcIixcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFwiUmVmXCI6IFwiQVdTOjpQYXJ0aXRpb25cIlxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFwiOmxvZ3M6XCIsXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcIlJlZlwiOiBcIkFXUzo6UmVnaW9uXCJcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBcIjpcIixcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFwiUmVmXCI6IFwiQVdTOjpBY2NvdW50SWRcIlxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFwiOmxvZy1ncm91cDovYXdzL2NvZGVidWlsZC9cIixcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJSZWZcIjogXCJNeVByb2plY3QzOUY3QjBBRVwiXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiRm46OkpvaW5cIjogW1xuICAgICAgICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgXCJhcm46XCIsXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcIlJlZlwiOiBcIkFXUzo6UGFydGl0aW9uXCJcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBcIjpsb2dzOlwiLFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJSZWZcIjogXCJBV1M6OlJlZ2lvblwiXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgXCI6XCIsXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcIlJlZlwiOiBcIkFXUzo6QWNjb3VudElkXCJcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBcIjpsb2ctZ3JvdXA6L2F3cy9jb2RlYnVpbGQvXCIsXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiUmVmXCI6IFwiTXlQcm9qZWN0MzlGN0IwQUVcIlxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFwiOipcIlxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiVmVyc2lvblwiOiBcIjIwMTItMTAtMTdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJQb2xpY3lOYW1lXCI6IFwiTXlQcm9qZWN0Um9sZURlZmF1bHRQb2xpY3lCMTlCN0MyOVwiLFxuICAgICAgICAgIFwiUm9sZXNcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgXCJSZWZcIjogXCJNeVByb2plY3RSb2xlOUJCRTUyMzNcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIF1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiTXlQcm9qZWN0MzlGN0IwQUVcIjoge1xuICAgICAgICAgIFwiVHlwZVwiOiBcIkFXUzo6Q29kZUJ1aWxkOjpQcm9qZWN0XCIsXG4gICAgICAgICAgXCJQcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcIkFydGlmYWN0c1wiOiB7XG4gICAgICAgICAgICBcIlR5cGVcIjogXCJOT19BUlRJRkFDVFNcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJFbnZpcm9ubWVudFwiOiB7XG4gICAgICAgICAgICBcIkNvbXB1dGVUeXBlXCI6IFwiQlVJTERfR0VORVJBTDFfTUVESVVNXCIsXG4gICAgICAgICAgICBcIkltYWdlXCI6IFwiYXdzL2NvZGVidWlsZC93aW5kb3dzLWJhc2U6MS4wXCIsXG4gICAgICAgICAgICBcIlByaXZpbGVnZWRNb2RlXCI6IGZhbHNlLFxuICAgICAgICAgICAgXCJUeXBlXCI6IFwiV0lORE9XU19DT05UQUlORVJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJTZXJ2aWNlUm9sZVwiOiB7XG4gICAgICAgICAgICBcIkZuOjpHZXRBdHRcIjogW1xuICAgICAgICAgICAgXCJNeVByb2plY3RSb2xlOUJCRTUyMzNcIixcbiAgICAgICAgICAgIFwiQXJuXCJcbiAgICAgICAgICAgIF1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiU291cmNlXCI6IHtcbiAgICAgICAgICAgIFwiTG9jYXRpb25cIjoge1xuICAgICAgICAgICAgXCJGbjo6Sm9pblwiOiBbXG4gICAgICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiUmVmXCI6IFwiTXlCdWNrZXRGNjhGM0ZGMFwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwiL3BhdGgvdG8vc291cmNlLnppcFwiXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIlR5cGVcIjogXCJTM1wiXG4gICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRlc3QuZG9uZSgpO1xuICAgIH0sXG4gICAgJ3dpdGggR2l0SHViIHNvdXJjZScodGVzdDogVGVzdCkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG5cbiAgICAgIG5ldyBjb2RlYnVpbGQuUHJvamVjdChzdGFjaywgJ1Byb2plY3QnLCB7XG4gICAgICAgIHNvdXJjZTogY29kZWJ1aWxkLlNvdXJjZS5naXRIdWIoe1xuICAgICAgICAgIG93bmVyOiAndGVzdG93bmVyJyxcbiAgICAgICAgICByZXBvOiAndGVzdHJlcG8nLFxuICAgICAgICAgIGNsb25lRGVwdGg6IDMsXG4gICAgICAgICAgd2ViaG9vazogdHJ1ZSxcbiAgICAgICAgICByZXBvcnRCdWlsZFN0YXR1czogZmFsc2UsXG4gICAgICAgICAgd2ViaG9va0ZpbHRlcnM6IFtcbiAgICAgICAgICAgIGNvZGVidWlsZC5GaWx0ZXJHcm91cC5pbkV2ZW50T2YoY29kZWJ1aWxkLkV2ZW50QWN0aW9uLlBVU0gpLmFuZFRhZ0lzTm90KCdzdGFibGUnKSxcbiAgICAgICAgICAgIGNvZGVidWlsZC5GaWx0ZXJHcm91cC5pbkV2ZW50T2YoY29kZWJ1aWxkLkV2ZW50QWN0aW9uLlBVTExfUkVRVUVTVF9SRU9QRU5FRCkuYW5kQmFzZUJyYW5jaElzKCdtYXN0ZXInKSxcbiAgICAgICAgICBdLFxuICAgICAgICB9KVxuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChzdGFjaykudG8oaGF2ZVJlc291cmNlKCdBV1M6OkNvZGVCdWlsZDo6UHJvamVjdCcsIHtcbiAgICAgICAgU291cmNlOiB7XG4gICAgICAgICAgVHlwZTogXCJHSVRIVUJcIixcbiAgICAgICAgICBMb2NhdGlvbjogJ2h0dHBzOi8vZ2l0aHViLmNvbS90ZXN0b3duZXIvdGVzdHJlcG8uZ2l0JyxcbiAgICAgICAgICBSZXBvcnRCdWlsZFN0YXR1czogZmFsc2UsXG4gICAgICAgICAgR2l0Q2xvbmVEZXB0aDogMyxcbiAgICAgICAgfVxuICAgICAgfSkpO1xuXG4gICAgICBleHBlY3Qoc3RhY2spLnRvKGhhdmVSZXNvdXJjZUxpa2UoJ0FXUzo6Q29kZUJ1aWxkOjpQcm9qZWN0Jywge1xuICAgICAgICBUcmlnZ2Vyczoge1xuICAgICAgICAgIFdlYmhvb2s6IHRydWUsXG4gICAgICAgICAgRmlsdGVyR3JvdXBzOiBbXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgIHsgVHlwZTogJ0VWRU5UJywgUGF0dGVybjogJ1BVU0gnIH0sXG4gICAgICAgICAgICAgIHsgVHlwZTogJ0hFQURfUkVGJywgUGF0dGVybjogJ3JlZnMvdGFncy9zdGFibGUnLCBFeGNsdWRlTWF0Y2hlZFBhdHRlcm46IHRydWUgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgIHsgVHlwZTogJ0VWRU5UJywgUGF0dGVybjogJ1BVTExfUkVRVUVTVF9SRU9QRU5FRCcgfSxcbiAgICAgICAgICAgICAgeyBUeXBlOiAnQkFTRV9SRUYnLCBQYXR0ZXJuOiAncmVmcy9oZWFkcy9tYXN0ZXInIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICB9KSk7XG5cbiAgICAgIHRlc3QuZG9uZSgpO1xuICAgIH0sXG4gICAgJ3dpdGggR2l0SHViRW50ZXJwcmlzZSBzb3VyY2UnKHRlc3Q6IFRlc3QpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuXG4gICAgICBjb25zdCBwdXNoRmlsdGVyR3JvdXAgPSBjb2RlYnVpbGQuRmlsdGVyR3JvdXAuaW5FdmVudE9mKGNvZGVidWlsZC5FdmVudEFjdGlvbi5QVVNIKTtcbiAgICAgIG5ldyBjb2RlYnVpbGQuUHJvamVjdChzdGFjaywgJ015UHJvamVjdCcsIHtcbiAgICAgICAgc291cmNlOiBjb2RlYnVpbGQuU291cmNlLmdpdEh1YkVudGVycHJpc2Uoe1xuICAgICAgICAgIGh0dHBzQ2xvbmVVcmw6ICdodHRwczovL2dpdGh1Yi50ZXN0Y29tcGFueS5jb20vdGVzdG93bmVyL3Rlc3RyZXBvJyxcbiAgICAgICAgICBpZ25vcmVTc2xFcnJvcnM6IHRydWUsXG4gICAgICAgICAgY2xvbmVEZXB0aDogNCxcbiAgICAgICAgICB3ZWJob29rOiB0cnVlLFxuICAgICAgICAgIHJlcG9ydEJ1aWxkU3RhdHVzOiBmYWxzZSxcbiAgICAgICAgICB3ZWJob29rRmlsdGVyczogW1xuICAgICAgICAgICAgcHVzaEZpbHRlckdyb3VwLmFuZEJyYW5jaElzKCdtYXN0ZXInKSxcbiAgICAgICAgICAgIHB1c2hGaWx0ZXJHcm91cC5hbmRCcmFuY2hJcygnZGV2ZWxvcCcpLFxuICAgICAgICAgICAgcHVzaEZpbHRlckdyb3VwLmFuZEZpbGVQYXRoSXMoJ1JlYWRNZS5tZCcpLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0pXG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KHN0YWNrKS50byhoYXZlUmVzb3VyY2UoJ0FXUzo6Q29kZUJ1aWxkOjpQcm9qZWN0Jywge1xuICAgICAgICBTb3VyY2U6IHtcbiAgICAgICAgICBUeXBlOiBcIkdJVEhVQl9FTlRFUlBSSVNFXCIsXG4gICAgICAgICAgSW5zZWN1cmVTc2w6IHRydWUsXG4gICAgICAgICAgR2l0Q2xvbmVEZXB0aDogNCxcbiAgICAgICAgICBSZXBvcnRCdWlsZFN0YXR1czogZmFsc2UsXG4gICAgICAgICAgTG9jYXRpb246ICdodHRwczovL2dpdGh1Yi50ZXN0Y29tcGFueS5jb20vdGVzdG93bmVyL3Rlc3RyZXBvJ1xuICAgICAgICB9XG4gICAgICB9KSk7XG5cbiAgICAgIGV4cGVjdChzdGFjaykudG8oaGF2ZVJlc291cmNlTGlrZSgnQVdTOjpDb2RlQnVpbGQ6OlByb2plY3QnLCB7XG4gICAgICAgIFRyaWdnZXJzOiB7XG4gICAgICAgICAgV2ViaG9vazogdHJ1ZSxcbiAgICAgICAgICBGaWx0ZXJHcm91cHM6IFtcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgeyBUeXBlOiAnRVZFTlQnLCBQYXR0ZXJuOiAnUFVTSCcgfSxcbiAgICAgICAgICAgICAgeyBUeXBlOiAnSEVBRF9SRUYnLCBQYXR0ZXJuOiAncmVmcy9oZWFkcy9tYXN0ZXInIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICB7IFR5cGU6ICdFVkVOVCcsIFBhdHRlcm46ICdQVVNIJyB9LFxuICAgICAgICAgICAgICB7IFR5cGU6ICdIRUFEX1JFRicsIFBhdHRlcm46ICdyZWZzL2hlYWRzL2RldmVsb3AnIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICB7IFR5cGU6ICdFVkVOVCcsIFBhdHRlcm46ICdQVVNIJyB9LFxuICAgICAgICAgICAgICB7IFR5cGU6ICdGSUxFX1BBVEgnLCBQYXR0ZXJuOiAnUmVhZE1lLm1kJyB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgfSkpO1xuXG4gICAgICB0ZXN0LmRvbmUoKTtcbiAgICB9LFxuICAgICd3aXRoIEJpdGJ1Y2tldCBzb3VyY2UnKHRlc3Q6IFRlc3QpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuXG4gICAgICBuZXcgY29kZWJ1aWxkLlByb2plY3Qoc3RhY2ssICdQcm9qZWN0Jywge1xuICAgICAgICBzb3VyY2U6IGNvZGVidWlsZC5Tb3VyY2UuYml0QnVja2V0KHtcbiAgICAgICAgICBvd25lcjogJ3Rlc3Rvd25lcicsXG4gICAgICAgICAgcmVwbzogJ3Rlc3RyZXBvJyxcbiAgICAgICAgICBjbG9uZURlcHRoOiA1LFxuICAgICAgICAgIHJlcG9ydEJ1aWxkU3RhdHVzOiBmYWxzZSxcbiAgICAgICAgICB3ZWJob29rRmlsdGVyczogW1xuICAgICAgICAgICAgY29kZWJ1aWxkLkZpbHRlckdyb3VwLmluRXZlbnRPZihcbiAgICAgICAgICAgICAgY29kZWJ1aWxkLkV2ZW50QWN0aW9uLlBVTExfUkVRVUVTVF9DUkVBVEVELFxuICAgICAgICAgICAgICBjb2RlYnVpbGQuRXZlbnRBY3Rpb24uUFVMTF9SRVFVRVNUX1VQREFURUQsXG4gICAgICAgICAgICAgIGNvZGVidWlsZC5FdmVudEFjdGlvbi5QVUxMX1JFUVVFU1RfTUVSR0VELFxuICAgICAgICAgICAgKS5hbmRUYWdJcygndi4qJyksXG4gICAgICAgICAgICAvLyBkdXBsaWNhdGUgZXZlbnQgYWN0aW9ucyBhcmUgZmluZVxuICAgICAgICAgICAgY29kZWJ1aWxkLkZpbHRlckdyb3VwLmluRXZlbnRPZihjb2RlYnVpbGQuRXZlbnRBY3Rpb24uUFVTSCwgY29kZWJ1aWxkLkV2ZW50QWN0aW9uLlBVU0gpLmFuZEFjdG9yQWNjb3VudElzTm90KCdhd3MtY2RrLWRldicpLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0pXG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KHN0YWNrKS50byhoYXZlUmVzb3VyY2UoJ0FXUzo6Q29kZUJ1aWxkOjpQcm9qZWN0Jywge1xuICAgICAgICBTb3VyY2U6IHtcbiAgICAgICAgICBUeXBlOiAnQklUQlVDS0VUJyxcbiAgICAgICAgICBMb2NhdGlvbjogJ2h0dHBzOi8vYml0YnVja2V0Lm9yZy90ZXN0b3duZXIvdGVzdHJlcG8uZ2l0JyxcbiAgICAgICAgICBHaXRDbG9uZURlcHRoOiA1LFxuICAgICAgICAgIFJlcG9ydEJ1aWxkU3RhdHVzOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgIH0pKTtcblxuICAgICAgZXhwZWN0KHN0YWNrKS50byhoYXZlUmVzb3VyY2VMaWtlKCdBV1M6OkNvZGVCdWlsZDo6UHJvamVjdCcsIHtcbiAgICAgICAgVHJpZ2dlcnM6IHtcbiAgICAgICAgICBXZWJob29rOiB0cnVlLFxuICAgICAgICAgIEZpbHRlckdyb3VwczogW1xuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICB7IFR5cGU6ICdFVkVOVCcsIFBhdHRlcm46ICdQVUxMX1JFUVVFU1RfQ1JFQVRFRCwgUFVMTF9SRVFVRVNUX1VQREFURUQsIFBVTExfUkVRVUVTVF9NRVJHRUQnIH0sXG4gICAgICAgICAgICAgIHsgVHlwZTogJ0hFQURfUkVGJywgUGF0dGVybjogJ3JlZnMvdGFncy92LionIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICB7IFR5cGU6ICdFVkVOVCcsIFBhdHRlcm46ICdQVVNIJyB9LFxuICAgICAgICAgICAgICB7IFR5cGU6ICdBQ1RPUl9BQ0NPVU5UX0lEJywgUGF0dGVybjogJ2F3cy1jZGstZGV2JywgRXhjbHVkZU1hdGNoZWRQYXR0ZXJuOiB0cnVlIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICB9KSk7XG5cbiAgICAgIHRlc3QuZG9uZSgpO1xuICAgIH0sXG4gICAgJ2ZhaWwgY3JlYXRpbmcgYSBQcm9qZWN0IHdoZW4gbm8gYnVpbGQgc3BlYyBpcyBnaXZlbicodGVzdDogVGVzdCkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG5cbiAgICAgIHRlc3QudGhyb3dzKCgpID0+IHtcbiAgICAgICAgbmV3IGNvZGVidWlsZC5Qcm9qZWN0KHN0YWNrLCAnTXlQcm9qZWN0Jywge1xuICAgICAgICB9KTtcbiAgICAgIH0sIC9idWlsZFNwZWMvKTtcblxuICAgICAgdGVzdC5kb25lKCk7XG4gICAgfSxcbiAgICAnd2l0aCBWUEMgY29uZmlndXJhdGlvbicodGVzdDogVGVzdCkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG5cbiAgICAgIGNvbnN0IGJ1Y2tldCA9IG5ldyBzMy5CdWNrZXQoc3RhY2ssICdNeUJ1Y2tldCcpO1xuICAgICAgY29uc3QgdnBjID0gbmV3IGVjMi5WcGMoc3RhY2ssICdNeVZQQycpO1xuICAgICAgY29uc3Qgc2VjdXJpdHlHcm91cCA9IG5ldyBlYzIuU2VjdXJpdHlHcm91cChzdGFjaywgJ1NlY3VyaXR5R3JvdXAxJywge1xuICAgICAgICAgIHNlY3VyaXR5R3JvdXBOYW1lOiAnQm9iJyxcbiAgICAgICAgICB2cGMsXG4gICAgICAgICAgYWxsb3dBbGxPdXRib3VuZDogdHJ1ZSxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0V4YW1wbGUnLFxuICAgICAgfSk7XG4gICAgICBjb25zdCBwcm9qZWN0ID0gbmV3IGNvZGVidWlsZC5Qcm9qZWN0KHN0YWNrLCAnTXlQcm9qZWN0Jywge1xuICAgICAgICBzb3VyY2U6IGNvZGVidWlsZC5Tb3VyY2UuczMoe1xuICAgICAgICAgIGJ1Y2tldCxcbiAgICAgICAgICBwYXRoOiAncGF0aC90by9zb3VyY2UuemlwJyxcbiAgICAgICAgfSksXG4gICAgICAgIHZwYyxcbiAgICAgICAgc2VjdXJpdHlHcm91cHM6IFtzZWN1cml0eUdyb3VwXVxuICAgICAgfSk7XG4gICAgICBleHBlY3Qoc3RhY2spLnRvKGhhdmVSZXNvdXJjZUxpa2UoXCJBV1M6OkNvZGVCdWlsZDo6UHJvamVjdFwiLCB7XG4gICAgICAgIFwiVnBjQ29uZmlnXCI6IHtcbiAgICAgICAgICBcIlNlY3VyaXR5R3JvdXBJZHNcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcIkZuOjpHZXRBdHRcIjogW1xuICAgICAgICAgICAgICAgIFwiU2VjdXJpdHlHcm91cDFGNTU0QjM2RlwiLFxuICAgICAgICAgICAgICAgIFwiR3JvdXBJZFwiXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdLFxuICAgICAgICAgIFwiU3VibmV0c1wiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwiUmVmXCI6IFwiTXlWUENQcml2YXRlU3VibmV0MVN1Ym5ldDY0MTU0M0Y0XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwiUmVmXCI6IFwiTXlWUENQcml2YXRlU3VibmV0MlN1Ym5ldEE0MjBEM0YwXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdLFxuICAgICAgICAgIFwiVnBjSWRcIjoge1xuICAgICAgICAgICAgXCJSZWZcIjogXCJNeVZQQ0FGQjA3QTMxXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pKTtcblxuICAgICAgdGVzdC5ub3RFcXVhbChwcm9qZWN0LmNvbm5lY3Rpb25zLCB1bmRlZmluZWQpO1xuXG4gICAgICB0ZXN0LmRvbmUoKTtcbiAgICB9LFxuICAgICd3aXRob3V0IFZQQyBjb25maWd1cmF0aW9uIGJ1dCBzZWN1cml0eSBncm91cCBpZGVudGlmaWVkJyh0ZXN0OiBUZXN0KSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcblxuICAgICAgY29uc3QgYnVja2V0ID0gbmV3IHMzLkJ1Y2tldChzdGFjaywgJ015QnVja2V0Jyk7XG4gICAgICBjb25zdCB2cGMgPSBuZXcgZWMyLlZwYyhzdGFjaywgJ015VlBDJyk7XG4gICAgICBjb25zdCBzZWN1cml0eUdyb3VwID0gbmV3IGVjMi5TZWN1cml0eUdyb3VwKHN0YWNrLCAnU2VjdXJpdHlHcm91cDEnLCB7XG4gICAgICAgICAgc2VjdXJpdHlHcm91cE5hbWU6ICdCb2InLFxuICAgICAgICAgIHZwYyxcbiAgICAgICAgICBhbGxvd0FsbE91dGJvdW5kOiB0cnVlLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRXhhbXBsZScsXG4gICAgICB9KTtcblxuICAgICAgdGVzdC50aHJvd3MoKCkgPT5cbiAgICAgICAgbmV3IGNvZGVidWlsZC5Qcm9qZWN0KHN0YWNrLCAnTXlQcm9qZWN0Jywge1xuICAgICAgICAgIHNvdXJjZTogY29kZWJ1aWxkLlNvdXJjZS5zMyh7XG4gICAgICAgICAgICBidWNrZXQsXG4gICAgICAgICAgICBwYXRoOiAncGF0aC90by9zb3VyY2UuemlwJyxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBzZWN1cml0eUdyb3VwczogW3NlY3VyaXR5R3JvdXBdXG4gICAgICAgIH0pXG4gICAgICAsIC9DYW5ub3QgY29uZmlndXJlICdzZWN1cml0eUdyb3VwJyBvciAnYWxsb3dBbGxPdXRib3VuZCcgd2l0aG91dCBjb25maWd1cmluZyBhIFZQQy8pO1xuICAgICAgdGVzdC5kb25lKCk7XG4gICAgfSxcbiAgICAnd2l0aCBWUEMgY29uZmlndXJhdGlvbiBidXQgYWxsb3dBbGxPdXRib3VuZCBpZGVudGlmaWVkJyh0ZXN0OiBUZXN0KSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICAgIGNvbnN0IGJ1Y2tldCA9IG5ldyBzMy5CdWNrZXQoc3RhY2ssICdNeUJ1Y2tldCcpO1xuICAgICAgY29uc3QgdnBjID0gbmV3IGVjMi5WcGMoc3RhY2ssICdNeVZQQycpO1xuICAgICAgY29uc3Qgc2VjdXJpdHlHcm91cCA9IG5ldyBlYzIuU2VjdXJpdHlHcm91cChzdGFjaywgJ1NlY3VyaXR5R3JvdXAxJywge1xuICAgICAgICAgIHNlY3VyaXR5R3JvdXBOYW1lOiAnQm9iJyxcbiAgICAgICAgICB2cGMsXG4gICAgICAgICAgYWxsb3dBbGxPdXRib3VuZDogdHJ1ZSxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0V4YW1wbGUnLFxuICAgICAgfSk7XG4gICAgICB0ZXN0LnRocm93cygoKSA9PlxuICAgICAgICBuZXcgY29kZWJ1aWxkLlByb2plY3Qoc3RhY2ssICdNeVByb2plY3QnLCB7XG4gICAgICAgICAgc291cmNlOiBjb2RlYnVpbGQuU291cmNlLnMzKHtcbiAgICAgICAgICAgIGJ1Y2tldCxcbiAgICAgICAgICAgIHBhdGg6ICdwYXRoL3RvL3NvdXJjZS56aXAnLFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHZwYyxcbiAgICAgICAgICBhbGxvd0FsbE91dGJvdW5kOiB0cnVlLFxuICAgICAgICAgIHNlY3VyaXR5R3JvdXBzOiBbc2VjdXJpdHlHcm91cF1cbiAgICAgICAgfSlcbiAgICAgICwgL0NvbmZpZ3VyZSAnYWxsb3dBbGxPdXRib3VuZCcgZGlyZWN0bHkgb24gdGhlIHN1cHBsaWVkIFNlY3VyaXR5R3JvdXAvKTtcbiAgICAgIHRlc3QuZG9uZSgpO1xuICAgIH0sXG5cbiAgICAnd2l0aG91dCBwYXNzaW5nIGEgVlBDIGNhbm5vdCBhY2Nlc3MgdGhlIGNvbm5lY3Rpb25zIHByb3BlcnR5Jyh0ZXN0OiBUZXN0KSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcblxuICAgICAgY29uc3QgcHJvamVjdCA9IG5ldyBjb2RlYnVpbGQuUGlwZWxpbmVQcm9qZWN0KHN0YWNrLCAnTXlQcm9qZWN0Jyk7XG5cbiAgICAgIHRlc3QudGhyb3dzKCgpID0+IHByb2plY3QuY29ubmVjdGlvbnMsXG4gICAgICAgIC9Pbmx5IFZQQy1hc3NvY2lhdGVkIFByb2plY3RzIGhhdmUgc2VjdXJpdHkgZ3JvdXBzIHRvIG1hbmFnZS4gU3VwcGx5IHRoZSBcInZwY1wiIHBhcmFtZXRlciB3aGVuIGNyZWF0aW5nIHRoZSBQcm9qZWN0Lyk7XG5cbiAgICAgIHRlc3QuZG9uZSgpO1xuICAgIH0sXG5cbiAgICAnd2l0aCBhIEtNUyBLZXkgYWRkcyBkZWNyeXB0IHBlcm1pc3Npb25zIHRvIHRoZSBDb2RlQnVpbGQgUm9sZScodGVzdDogVGVzdCkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG5cbiAgICAgIGNvbnN0IGtleSA9IG5ldyBrbXMuS2V5KHN0YWNrLCAnTXlLZXknKTtcblxuICAgICAgbmV3IGNvZGVidWlsZC5QaXBlbGluZVByb2plY3Qoc3RhY2ssICdNeVByb2plY3QnLCB7XG4gICAgICAgIGVuY3J5cHRpb25LZXk6IGtleSxcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3Qoc3RhY2spLnRvKGhhdmVSZXNvdXJjZUxpa2UoJ0FXUzo6SUFNOjpQb2xpY3knLCB7XG4gICAgICAgIFwiUG9saWN5RG9jdW1lbnRcIjoge1xuICAgICAgICAgIFwiU3RhdGVtZW50XCI6IFtcbiAgICAgICAgICAgIHt9LCAvLyBDbG91ZFdhdGNoIGxvZ3NcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJBY3Rpb25cIjogW1xuICAgICAgICAgICAgICAgIFwia21zOkRlY3J5cHRcIixcbiAgICAgICAgICAgICAgICBcImttczpFbmNyeXB0XCIsXG4gICAgICAgICAgICAgICAgXCJrbXM6UmVFbmNyeXB0KlwiLFxuICAgICAgICAgICAgICAgIFwia21zOkdlbmVyYXRlRGF0YUtleSpcIixcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgXCJFZmZlY3RcIjogXCJBbGxvd1wiLFxuICAgICAgICAgICAgICBcIlJlc291cmNlXCI6IHtcbiAgICAgICAgICAgICAgICBcIkZuOjpHZXRBdHRcIjogW1xuICAgICAgICAgICAgICAgICAgXCJNeUtleTZBQjI5RkE2XCIsXG4gICAgICAgICAgICAgICAgICBcIkFyblwiLFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgIFwiUm9sZXNcIjogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiUmVmXCI6IFwiTXlQcm9qZWN0Um9sZTlCQkU1MjMzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH0pKTtcblxuICAgICAgdGVzdC5kb25lKCk7XG4gICAgfSxcbiAgfSxcblxuICAndXNpbmcgdGltZW91dCBhbmQgcGF0aCBpbiBTMyBhcnRpZmFjdHMgc2V0cyBpdCBjb3JyZWN0bHknKHRlc3Q6IFRlc3QpIHtcbiAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICBjb25zdCBidWNrZXQgPSBuZXcgczMuQnVja2V0KHN0YWNrLCAnQnVja2V0Jyk7XG4gICAgbmV3IGNvZGVidWlsZC5Qcm9qZWN0KHN0YWNrLCAnUHJvamVjdCcsIHtcbiAgICAgIGJ1aWxkU3BlYzogY29kZWJ1aWxkLkJ1aWxkU3BlYy5mcm9tT2JqZWN0KHtcbiAgICAgICAgdmVyc2lvbjogJzAuMicsXG4gICAgICB9KSxcbiAgICAgIGFydGlmYWN0czogY29kZWJ1aWxkLkFydGlmYWN0cy5zMyh7XG4gICAgICAgIHBhdGg6ICdzb21lL3BhdGgnLFxuICAgICAgICBuYW1lOiAnc29tZV9uYW1lJyxcbiAgICAgICAgYnVja2V0LFxuICAgICAgfSksXG4gICAgICB0aW1lb3V0OiBjZGsuRHVyYXRpb24ubWludXRlcygxMjMpLFxuICAgIH0pO1xuXG4gICAgZXhwZWN0KHN0YWNrKS50byhoYXZlUmVzb3VyY2VMaWtlKCdBV1M6OkNvZGVCdWlsZDo6UHJvamVjdCcsIHtcbiAgICAgIFwiQXJ0aWZhY3RzXCI6IHtcbiAgICAgICAgXCJQYXRoXCI6IFwic29tZS9wYXRoXCIsXG4gICAgICAgIFwiTmFtZVwiOiBcInNvbWVfbmFtZVwiLFxuICAgICAgICBcIlR5cGVcIjogXCJTM1wiLFxuICAgICAgfSxcbiAgICAgIFwiVGltZW91dEluTWludXRlc1wiOiAxMjMsXG4gICAgfSkpO1xuXG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgJ3NlY29uZGFyeSBzb3VyY2VzJzoge1xuICAgICdyZXF1aXJlIHByb3ZpZGluZyBhbiBpZGVudGlmaWVyIHdoZW4gY3JlYXRpbmcgYSBQcm9qZWN0Jyh0ZXN0OiBUZXN0KSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcblxuICAgICAgdGVzdC50aHJvd3MoKCkgPT4ge1xuICAgICAgICBuZXcgY29kZWJ1aWxkLlByb2plY3Qoc3RhY2ssICdNeVByb2plY3QnLCB7XG4gICAgICAgICAgYnVpbGRTcGVjOiBjb2RlYnVpbGQuQnVpbGRTcGVjLmZyb21PYmplY3Qoe1xuICAgICAgICAgICAgdmVyc2lvbjogJzAuMicsXG4gICAgICAgICAgfSksXG4gICAgICAgICAgc2Vjb25kYXJ5U291cmNlczogW1xuICAgICAgICAgICAgY29kZWJ1aWxkLlNvdXJjZS5zMyh7XG4gICAgICAgICAgICAgIGJ1Y2tldDogbmV3IHMzLkJ1Y2tldChzdGFjaywgJ015QnVja2V0JyksXG4gICAgICAgICAgICAgIHBhdGg6ICdwYXRoJyxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0pO1xuICAgICAgfSwgL2lkZW50aWZpZXIvKTtcblxuICAgICAgdGVzdC5kb25lKCk7XG4gICAgfSxcblxuICAgICdhcmUgbm90IGFsbG93ZWQgZm9yIGEgUHJvamVjdCB3aXRoIENvZGVQaXBlbGluZSBhcyBTb3VyY2UnKHRlc3Q6IFRlc3QpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgICAgY29uc3QgcHJvamVjdCA9IG5ldyBjb2RlYnVpbGQuUGlwZWxpbmVQcm9qZWN0KHN0YWNrLCAnTXlQcm9qZWN0Jyk7XG5cbiAgICAgIHByb2plY3QuYWRkU2Vjb25kYXJ5U291cmNlKGNvZGVidWlsZC5Tb3VyY2UuczMoe1xuICAgICAgICBidWNrZXQ6IG5ldyBzMy5CdWNrZXQoc3RhY2ssICdNeUJ1Y2tldCcpLFxuICAgICAgICBwYXRoOiAnc29tZS9wYXRoJyxcbiAgICAgICAgaWRlbnRpZmllcjogJ2lkJyxcbiAgICAgIH0pKTtcblxuICAgICAgdGVzdC50aHJvd3MoKCkgPT4ge1xuICAgICAgICBleHBlY3Qoc3RhY2spO1xuICAgICAgfSwgL3NlY29uZGFyeSBzb3VyY2VzLyk7XG5cbiAgICAgIHRlc3QuZG9uZSgpO1xuICAgIH0sXG5cbiAgICAnYWRkZWQgd2l0aCBhbiBpZGVudGlmZXIgYWZ0ZXIgdGhlIFByb2plY3QgaGFzIGJlZW4gY3JlYXRlZCBhcmUgcmVuZGVyZWQgaW4gdGhlIHRlbXBsYXRlJyh0ZXN0OiBUZXN0KSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICAgIGNvbnN0IGJ1Y2tldCA9IG5ldyBzMy5CdWNrZXQoc3RhY2ssICdNeUJ1Y2tldCcpO1xuICAgICAgY29uc3QgcHJvamVjdCA9IG5ldyBjb2RlYnVpbGQuUHJvamVjdChzdGFjaywgJ015UHJvamVjdCcsIHtcbiAgICAgICAgc291cmNlOiBjb2RlYnVpbGQuU291cmNlLnMzKHtcbiAgICAgICAgICBidWNrZXQsXG4gICAgICAgICAgcGF0aDogJ3NvbWUvcGF0aCcsXG4gICAgICAgIH0pLFxuICAgICAgfSk7XG5cbiAgICAgIHByb2plY3QuYWRkU2Vjb25kYXJ5U291cmNlKGNvZGVidWlsZC5Tb3VyY2UuczMoe1xuICAgICAgICBidWNrZXQsXG4gICAgICAgIHBhdGg6ICdhbm90aGVyL3BhdGgnLFxuICAgICAgICBpZGVudGlmaWVyOiAnc291cmNlMScsXG4gICAgICB9KSk7XG5cbiAgICAgIGV4cGVjdChzdGFjaykudG8oaGF2ZVJlc291cmNlTGlrZSgnQVdTOjpDb2RlQnVpbGQ6OlByb2plY3QnLCB7XG4gICAgICAgIFwiU2Vjb25kYXJ5U291cmNlc1wiOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJTb3VyY2VJZGVudGlmaWVyXCI6IFwic291cmNlMVwiLFxuICAgICAgICAgICAgXCJUeXBlXCI6IFwiUzNcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfSkpO1xuXG4gICAgICB0ZXN0LmRvbmUoKTtcbiAgICB9LFxuICB9LFxuXG4gICdzZWNvbmRhcnkgc291cmNlIHZlcnNpb25zJzoge1xuICAgICdhbGxvdyBzZWNvbmRhcnkgc291cmNlIHZlcnNpb25zJyh0ZXN0OiBUZXN0KSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICAgIGNvbnN0IGJ1Y2tldCA9IG5ldyBzMy5CdWNrZXQoc3RhY2ssICdNeUJ1Y2tldCcpO1xuICAgICAgY29uc3QgcHJvamVjdCA9IG5ldyBjb2RlYnVpbGQuUHJvamVjdChzdGFjaywgJ015UHJvamVjdCcsIHtcbiAgICAgICAgc291cmNlOiBjb2RlYnVpbGQuU291cmNlLnMzKHtcbiAgICAgICAgICBidWNrZXQsXG4gICAgICAgICAgcGF0aDogJ3NvbWUvcGF0aCcsXG4gICAgICAgIH0pLFxuICAgICAgfSk7XG5cbiAgICAgIHByb2plY3QuYWRkU2Vjb25kYXJ5U291cmNlKGNvZGVidWlsZC5Tb3VyY2UuczMoe1xuICAgICAgICBidWNrZXQsXG4gICAgICAgIHBhdGg6ICdhbm90aGVyL3BhdGgnLFxuICAgICAgICBpZGVudGlmaWVyOiAnc291cmNlMScsXG4gICAgICAgIHZlcnNpb246ICdzb21ldmVyc2lvbidcbiAgICAgIH0pKTtcblxuICAgICAgZXhwZWN0KHN0YWNrKS50byhoYXZlUmVzb3VyY2VMaWtlKCdBV1M6OkNvZGVCdWlsZDo6UHJvamVjdCcsIHtcbiAgICAgICAgXCJTZWNvbmRhcnlTb3VyY2VzXCI6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcIlNvdXJjZUlkZW50aWZpZXJcIjogXCJzb3VyY2UxXCIsXG4gICAgICAgICAgICBcIlR5cGVcIjogXCJTM1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFwiU2Vjb25kYXJ5U291cmNlVmVyc2lvbnNcIjogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiU291cmNlSWRlbnRpZmllclwiOiBcInNvdXJjZTFcIixcbiAgICAgICAgICAgIFwiU291cmNlVmVyc2lvblwiOiBcInNvbWV2ZXJzaW9uXCJcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH0pKTtcblxuICAgICAgdGVzdC5kb25lKCk7XG4gICAgfSxcblxuICAgICdhbGxvdyBub3QgdG8gc3BlY2lmeSBzZWNvbmRhcnkgc291cmNlIHZlcnNpb25zJyh0ZXN0OiBUZXN0KSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICAgIGNvbnN0IGJ1Y2tldCA9IG5ldyBzMy5CdWNrZXQoc3RhY2ssICdNeUJ1Y2tldCcpO1xuICAgICAgY29uc3QgcHJvamVjdCA9IG5ldyBjb2RlYnVpbGQuUHJvamVjdChzdGFjaywgJ015UHJvamVjdCcsIHtcbiAgICAgICAgc291cmNlOiBjb2RlYnVpbGQuU291cmNlLnMzKHtcbiAgICAgICAgICBidWNrZXQsXG4gICAgICAgICAgcGF0aDogJ3NvbWUvcGF0aCcsXG4gICAgICAgIH0pLFxuICAgICAgfSk7XG5cbiAgICAgIHByb2plY3QuYWRkU2Vjb25kYXJ5U291cmNlKGNvZGVidWlsZC5Tb3VyY2UuczMoe1xuICAgICAgICBidWNrZXQsXG4gICAgICAgIHBhdGg6ICdhbm90aGVyL3BhdGgnLFxuICAgICAgICBpZGVudGlmaWVyOiAnc291cmNlMScsXG4gICAgICB9KSk7XG5cbiAgICAgIGV4cGVjdChzdGFjaykudG8oaGF2ZVJlc291cmNlTGlrZSgnQVdTOjpDb2RlQnVpbGQ6OlByb2plY3QnLCB7XG4gICAgICAgIFwiU2Vjb25kYXJ5U291cmNlc1wiOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJTb3VyY2VJZGVudGlmaWVyXCI6IFwic291cmNlMVwiLFxuICAgICAgICAgICAgXCJUeXBlXCI6IFwiUzNcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdXG4gICAgICB9KSk7XG5cbiAgICAgIHRlc3QuZG9uZSgpO1xuICAgIH0sXG4gIH0sXG5cbiAgJ3NlY29uZGFyeSBhcnRpZmFjdHMnOiB7XG4gICAgJ3JlcXVpcmUgcHJvdmlkaW5nIGFuIGlkZW50aWZpZXIgd2hlbiBjcmVhdGluZyBhIFByb2plY3QnKHRlc3Q6IFRlc3QpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuXG4gICAgICB0ZXN0LnRocm93cygoKSA9PiB7XG4gICAgICAgIG5ldyBjb2RlYnVpbGQuUHJvamVjdChzdGFjaywgJ015UHJvamVjdCcsIHtcbiAgICAgICAgICBidWlsZFNwZWM6IGNvZGVidWlsZC5CdWlsZFNwZWMuZnJvbU9iamVjdCh7XG4gICAgICAgICAgICB2ZXJzaW9uOiAnMC4yJyxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBzZWNvbmRhcnlBcnRpZmFjdHM6IFtcbiAgICAgICAgICAgIGNvZGVidWlsZC5BcnRpZmFjdHMuczMoe1xuICAgICAgICAgICAgICBidWNrZXQ6IG5ldyBzMy5CdWNrZXQoc3RhY2ssICdNeUJ1Y2tldCcpLFxuICAgICAgICAgICAgICBwYXRoOiAnc29tZS9wYXRoJyxcbiAgICAgICAgICAgICAgbmFtZTogJ25hbWUnLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgXSxcbiAgICAgICAgfSk7XG4gICAgICB9LCAvaWRlbnRpZmllci8pO1xuXG4gICAgICB0ZXN0LmRvbmUoKTtcbiAgICB9LFxuXG4gICAgJ2FyZSBub3QgYWxsb3dlZCBmb3IgYSBQcm9qZWN0IHdpdGggQ29kZVBpcGVsaW5lIGFzIFNvdXJjZScodGVzdDogVGVzdCkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgICBjb25zdCBwcm9qZWN0ID0gbmV3IGNvZGVidWlsZC5QaXBlbGluZVByb2plY3Qoc3RhY2ssICdNeVByb2plY3QnKTtcblxuICAgICAgcHJvamVjdC5hZGRTZWNvbmRhcnlBcnRpZmFjdChjb2RlYnVpbGQuQXJ0aWZhY3RzLnMzKHtcbiAgICAgICAgYnVja2V0OiBuZXcgczMuQnVja2V0KHN0YWNrLCAnTXlCdWNrZXQnKSxcbiAgICAgICAgcGF0aDogJ3NvbWUvcGF0aCcsXG4gICAgICAgIG5hbWU6ICduYW1lJyxcbiAgICAgICAgaWRlbnRpZmllcjogJ2lkJyxcbiAgICAgIH0pKTtcblxuICAgICAgdGVzdC50aHJvd3MoKCkgPT4ge1xuICAgICAgICBleHBlY3Qoc3RhY2spO1xuICAgICAgfSwgL3NlY29uZGFyeSBhcnRpZmFjdHMvKTtcblxuICAgICAgdGVzdC5kb25lKCk7XG4gICAgfSxcblxuICAgICdhZGRlZCB3aXRoIGFuIGlkZW50aWZpZXIgYWZ0ZXIgdGhlIFByb2plY3QgaGFzIGJlZW4gY3JlYXRlZCBhcmUgcmVuZGVyZWQgaW4gdGhlIHRlbXBsYXRlJyh0ZXN0OiBUZXN0KSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICAgIGNvbnN0IGJ1Y2tldCA9IG5ldyBzMy5CdWNrZXQoc3RhY2ssICdNeUJ1Y2tldCcpO1xuICAgICAgY29uc3QgcHJvamVjdCA9IG5ldyBjb2RlYnVpbGQuUHJvamVjdChzdGFjaywgJ015UHJvamVjdCcsIHtcbiAgICAgICAgc291cmNlOiBjb2RlYnVpbGQuU291cmNlLnMzKHtcbiAgICAgICAgICBidWNrZXQsXG4gICAgICAgICAgcGF0aDogJ3NvbWUvcGF0aCcsXG4gICAgICAgIH0pLFxuICAgICAgfSk7XG5cbiAgICAgIHByb2plY3QuYWRkU2Vjb25kYXJ5QXJ0aWZhY3QoY29kZWJ1aWxkLkFydGlmYWN0cy5zMyh7XG4gICAgICAgIGJ1Y2tldCxcbiAgICAgICAgcGF0aDogJ2Fub3RoZXIvcGF0aCcsXG4gICAgICAgIG5hbWU6ICduYW1lJyxcbiAgICAgICAgaWRlbnRpZmllcjogJ2FydGlmYWN0MScsXG4gICAgICB9KSk7XG5cbiAgICAgIGV4cGVjdChzdGFjaykudG8oaGF2ZVJlc291cmNlTGlrZSgnQVdTOjpDb2RlQnVpbGQ6OlByb2plY3QnLCB7XG4gICAgICAgIFwiU2Vjb25kYXJ5QXJ0aWZhY3RzXCI6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcIkFydGlmYWN0SWRlbnRpZmllclwiOiBcImFydGlmYWN0MVwiLFxuICAgICAgICAgICAgXCJUeXBlXCI6IFwiUzNcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfSkpO1xuXG4gICAgICB0ZXN0LmRvbmUoKTtcbiAgICB9LFxuXG4gICAgJ2Rpc2FibGVkRW5jcnlwdGlvbiBpcyBzZXQnKHRlc3Q6IFRlc3QpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgICAgY29uc3QgYnVja2V0ID0gbmV3IHMzLkJ1Y2tldChzdGFjaywgJ015QnVja2V0Jyk7XG4gICAgICBjb25zdCBwcm9qZWN0ID0gbmV3IGNvZGVidWlsZC5Qcm9qZWN0KHN0YWNrLCAnTXlQcm9qZWN0Jywge1xuICAgICAgICBzb3VyY2U6IGNvZGVidWlsZC5Tb3VyY2UuczMoe1xuICAgICAgICAgIGJ1Y2tldCxcbiAgICAgICAgICBwYXRoOiAnc29tZS9wYXRoJyxcbiAgICAgICAgfSksXG4gICAgICB9KTtcblxuICAgICAgcHJvamVjdC5hZGRTZWNvbmRhcnlBcnRpZmFjdChjb2RlYnVpbGQuQXJ0aWZhY3RzLnMzKHtcbiAgICAgICAgYnVja2V0LFxuICAgICAgICBwYXRoOiAnYW5vdGhlci9wYXRoJyxcbiAgICAgICAgbmFtZTogJ25hbWUnLFxuICAgICAgICBpZGVudGlmaWVyOiAnYXJ0aWZhY3QxJyxcbiAgICAgICAgZW5jcnlwdGlvbjogZmFsc2UsXG4gICAgICB9KSk7XG5cbiAgICAgIGV4cGVjdChzdGFjaykudG8oaGF2ZVJlc291cmNlTGlrZSgnQVdTOjpDb2RlQnVpbGQ6OlByb2plY3QnLCB7XG4gICAgICAgIFwiU2Vjb25kYXJ5QXJ0aWZhY3RzXCI6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcIkFydGlmYWN0SWRlbnRpZmllclwiOiBcImFydGlmYWN0MVwiLFxuICAgICAgICAgICAgXCJFbmNyeXB0aW9uRGlzYWJsZWRcIjogdHJ1ZSxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfSkpO1xuXG4gICAgICB0ZXN0LmRvbmUoKTtcbiAgICB9LFxuICB9LFxuXG4gICdhcnRpZmFjdHMnOiB7XG4gICAgJ0NvZGVQaXBlbGluZSc6IHtcbiAgICAgICdib3RoIHNvdXJjZSBhbmQgYXJ0aWZhY3MgYXJlIHNldCB0byBDb2RlUGlwZWxpbmUnKHRlc3Q6IFRlc3QpIHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG5cbiAgICAgICAgbmV3IGNvZGVidWlsZC5QaXBlbGluZVByb2plY3Qoc3RhY2ssICdNeVByb2plY3QnKTtcblxuICAgICAgICBleHBlY3Qoc3RhY2spLnRvKGhhdmVSZXNvdXJjZSgnQVdTOjpDb2RlQnVpbGQ6OlByb2plY3QnLCB7XG4gICAgICAgICAgXCJTb3VyY2VcIjoge1xuICAgICAgICAgIFwiVHlwZVwiOiBcIkNPREVQSVBFTElORVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIkFydGlmYWN0c1wiOiB7XG4gICAgICAgICAgXCJUeXBlXCI6IFwiQ09ERVBJUEVMSU5FXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiU2VydmljZVJvbGVcIjoge1xuICAgICAgICAgIFwiRm46OkdldEF0dFwiOiBbXG4gICAgICAgICAgICBcIk15UHJvamVjdFJvbGU5QkJFNTIzM1wiLFxuICAgICAgICAgICAgXCJBcm5cIlxuICAgICAgICAgIF1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiRW52aXJvbm1lbnRcIjoge1xuICAgICAgICAgIFwiVHlwZVwiOiBcIkxJTlVYX0NPTlRBSU5FUlwiLFxuICAgICAgICAgIFwiUHJpdmlsZWdlZE1vZGVcIjogZmFsc2UsXG4gICAgICAgICAgXCJJbWFnZVwiOiBcImF3cy9jb2RlYnVpbGQvc3RhbmRhcmQ6MS4wXCIsXG4gICAgICAgICAgXCJDb21wdXRlVHlwZVwiOiBcIkJVSUxEX0dFTkVSQUwxX1NNQUxMXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0pKTtcblxuICAgICAgICB0ZXN0LmRvbmUoKTtcbiAgICAgIH0sXG4gICAgfSxcbiAgfSxcblxuICAnZXZlbnRzJyh0ZXN0OiBUZXN0KSB7XG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgY29uc3QgcHJvamVjdCA9IG5ldyBjb2RlYnVpbGQuUHJvamVjdChzdGFjaywgJ015UHJvamVjdCcsIHtcbiAgICAgIHNvdXJjZTogY29kZWJ1aWxkLlNvdXJjZS5zMyh7XG4gICAgICAgIGJ1Y2tldDogbmV3IHMzLkJ1Y2tldChzdGFjaywgJ015QnVja2V0JyksXG4gICAgICAgIHBhdGg6ICdwYXRoJyxcbiAgICAgIH0pLFxuICAgIH0pO1xuXG4gICAgcHJvamVjdC5vbkJ1aWxkRmFpbGVkKCdPbkJ1aWxkRmFpbGVkJywgeyB0YXJnZXQ6IHsgYmluZDogKCkgPT4gKHsgYXJuOiAnQVJOJywgaWQ6ICdJRCcgfSkgfX0pO1xuICAgIHByb2plY3Qub25CdWlsZFN1Y2NlZWRlZCgnT25CdWlsZFN1Y2NlZWRlZCcsIHsgdGFyZ2V0OiB7IGJpbmQ6ICgpID0+ICh7IGFybjogJ0FSTicsIGlkOiAnSUQnIH0pIH19KTtcbiAgICBwcm9qZWN0Lm9uUGhhc2VDaGFuZ2UoJ09uUGhhc2VDaGFuZ2UnLCB7IHRhcmdldDogeyBiaW5kOiAoKSA9PiAoeyBhcm46ICdBUk4nLCBpZDogJ0lEJyB9KSB9fSk7XG4gICAgcHJvamVjdC5vblN0YXRlQ2hhbmdlKCdPblN0YXRlQ2hhbmdlJywgeyB0YXJnZXQ6IHsgYmluZDogKCkgPT4gKHsgYXJuOiAnQVJOJywgaWQ6ICdJRCcgfSkgfX0pO1xuICAgIHByb2plY3Qub25CdWlsZFN0YXJ0ZWQoJ09uQnVpbGRTdGFydGVkJywgeyB0YXJnZXQ6IHsgYmluZDogKCkgPT4gKHsgYXJuOiAnQVJOJywgaWQ6ICdJRCcgfSkgfX0pO1xuXG4gICAgZXhwZWN0KHN0YWNrKS50byhoYXZlUmVzb3VyY2UoJ0FXUzo6RXZlbnRzOjpSdWxlJywge1xuICAgICAgXCJFdmVudFBhdHRlcm5cIjoge1xuICAgICAgICBcInNvdXJjZVwiOiBbXG4gICAgICAgIFwiYXdzLmNvZGVidWlsZFwiXG4gICAgICAgIF0sXG4gICAgICAgIFwiZGV0YWlsLXR5cGVcIjogW1xuICAgICAgICBcIkNvZGVCdWlsZCBCdWlsZCBTdGF0ZSBDaGFuZ2VcIlxuICAgICAgICBdLFxuICAgICAgICBcImRldGFpbFwiOiB7XG4gICAgICAgIFwicHJvamVjdC1uYW1lXCI6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgXCJSZWZcIjogXCJNeVByb2plY3QzOUY3QjBBRVwiXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBcImJ1aWxkLXN0YXR1c1wiOiBbXG4gICAgICAgICAgXCJGQUlMRURcIlxuICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIlN0YXRlXCI6IFwiRU5BQkxFRFwiXG4gICAgfSkpO1xuXG4gICAgZXhwZWN0KHN0YWNrKS50byhoYXZlUmVzb3VyY2UoJ0FXUzo6RXZlbnRzOjpSdWxlJywge1xuICAgICAgXCJFdmVudFBhdHRlcm5cIjoge1xuICAgICAgICBcInNvdXJjZVwiOiBbXG4gICAgICAgIFwiYXdzLmNvZGVidWlsZFwiXG4gICAgICAgIF0sXG4gICAgICAgIFwiZGV0YWlsLXR5cGVcIjogW1xuICAgICAgICBcIkNvZGVCdWlsZCBCdWlsZCBTdGF0ZSBDaGFuZ2VcIlxuICAgICAgICBdLFxuICAgICAgICBcImRldGFpbFwiOiB7XG4gICAgICAgIFwicHJvamVjdC1uYW1lXCI6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgXCJSZWZcIjogXCJNeVByb2plY3QzOUY3QjBBRVwiXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBcImJ1aWxkLXN0YXR1c1wiOiBbXG4gICAgICAgICAgXCJTVUNDRUVERURcIlxuICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIlN0YXRlXCI6IFwiRU5BQkxFRFwiXG4gICAgfSkpO1xuXG4gICAgZXhwZWN0KHN0YWNrKS50byhoYXZlUmVzb3VyY2UoJ0FXUzo6RXZlbnRzOjpSdWxlJywge1xuICAgICAgXCJFdmVudFBhdHRlcm5cIjoge1xuICAgICAgICBcInNvdXJjZVwiOiBbXG4gICAgICAgIFwiYXdzLmNvZGVidWlsZFwiXG4gICAgICAgIF0sXG4gICAgICAgIFwiZGV0YWlsLXR5cGVcIjogW1xuICAgICAgICBcIkNvZGVCdWlsZCBCdWlsZCBQaGFzZSBDaGFuZ2VcIlxuICAgICAgICBdLFxuICAgICAgICBcImRldGFpbFwiOiB7XG4gICAgICAgIFwicHJvamVjdC1uYW1lXCI6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgXCJSZWZcIjogXCJNeVByb2plY3QzOUY3QjBBRVwiXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIlN0YXRlXCI6IFwiRU5BQkxFRFwiXG4gICAgfSkpO1xuXG4gICAgZXhwZWN0KHN0YWNrKS50byhoYXZlUmVzb3VyY2UoJ0FXUzo6RXZlbnRzOjpSdWxlJywge1xuICAgICAgXCJFdmVudFBhdHRlcm5cIjoge1xuICAgICAgICBcInNvdXJjZVwiOiBbXG4gICAgICAgIFwiYXdzLmNvZGVidWlsZFwiXG4gICAgICAgIF0sXG4gICAgICAgIFwiZGV0YWlsLXR5cGVcIjogW1xuICAgICAgICBcIkNvZGVCdWlsZCBCdWlsZCBTdGF0ZSBDaGFuZ2VcIlxuICAgICAgICBdLFxuICAgICAgICBcImRldGFpbFwiOiB7XG4gICAgICAgIFwicHJvamVjdC1uYW1lXCI6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgXCJSZWZcIjogXCJNeVByb2plY3QzOUY3QjBBRVwiXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIlN0YXRlXCI6IFwiRU5BQkxFRFwiXG4gICAgfSkpO1xuXG4gICAgZXhwZWN0KHN0YWNrKS50byhoYXZlUmVzb3VyY2UoJ0FXUzo6RXZlbnRzOjpSdWxlJywge1xuICAgICAgXCJFdmVudFBhdHRlcm5cIjoge1xuICAgICAgXCJzb3VyY2VcIjogW1xuICAgICAgICBcImF3cy5jb2RlYnVpbGRcIlxuICAgICAgXSxcbiAgICAgIFwiZGV0YWlsLXR5cGVcIjogW1xuICAgICAgICBcIkNvZGVCdWlsZCBCdWlsZCBTdGF0ZSBDaGFuZ2VcIlxuICAgICAgXSxcbiAgICAgIFwiZGV0YWlsXCI6IHtcbiAgICAgICAgXCJwcm9qZWN0LW5hbWVcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJSZWZcIjogXCJNeVByb2plY3QzOUY3QjBBRVwiXG4gICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgXCJidWlsZC1zdGF0dXNcIjogW1xuICAgICAgICBcIklOX1BST0dSRVNTXCJcbiAgICAgICAgXVxuICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiU3RhdGVcIjogXCJFTkFCTEVEXCJcbiAgICB9KSk7XG5cbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcblxuICAnZW52aXJvbm1lbnQgdmFyaWFibGVzIGNhbiBiZSBvdmVycmlkZGVuIGF0IHRoZSBwcm9qZWN0IGxldmVsJyh0ZXN0OiBUZXN0KSB7XG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG5cbiAgICBuZXcgY29kZWJ1aWxkLlBpcGVsaW5lUHJvamVjdChzdGFjaywgJ1Byb2plY3QnLCB7XG4gICAgICBlbnZpcm9ubWVudDoge1xuICAgICAgICBlbnZpcm9ubWVudFZhcmlhYmxlczoge1xuICAgICAgICAgIEZPTzogeyB2YWx1ZTogJzEyMzQnIH0sXG4gICAgICAgICAgQkFSOiB7IHZhbHVlOiBgMTExJHtjZGsuVG9rZW4uYXNTdHJpbmcoeyB0d290d290d286ICcyMjInIH0pfWAsIHR5cGU6IGNvZGVidWlsZC5CdWlsZEVudmlyb25tZW50VmFyaWFibGVUeXBlLlBBUkFNRVRFUl9TVE9SRSB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBlbnZpcm9ubWVudFZhcmlhYmxlczoge1xuICAgICAgICBHT086IHsgdmFsdWU6ICdBQkMnIH0sXG4gICAgICAgIEZPTzogeyB2YWx1ZTogJ09WRVJSSURFIScgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZXhwZWN0KHN0YWNrKS50byhoYXZlUmVzb3VyY2UoJ0FXUzo6Q29kZUJ1aWxkOjpQcm9qZWN0Jywge1xuICAgICAgXCJTb3VyY2VcIjoge1xuICAgICAgXCJUeXBlXCI6IFwiQ09ERVBJUEVMSU5FXCJcbiAgICAgIH0sXG4gICAgICBcIkFydGlmYWN0c1wiOiB7XG4gICAgICBcIlR5cGVcIjogXCJDT0RFUElQRUxJTkVcIlxuICAgICAgfSxcbiAgICAgIFwiU2VydmljZVJvbGVcIjoge1xuICAgICAgXCJGbjo6R2V0QXR0XCI6IFtcbiAgICAgICAgXCJQcm9qZWN0Um9sZTRDQ0IyNzRFXCIsXG4gICAgICAgIFwiQXJuXCJcbiAgICAgIF1cbiAgICAgIH0sXG4gICAgICBcIkVudmlyb25tZW50XCI6IHtcbiAgICAgIFwiVHlwZVwiOiBcIkxJTlVYX0NPTlRBSU5FUlwiLFxuICAgICAgXCJFbnZpcm9ubWVudFZhcmlhYmxlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgXCJUeXBlXCI6IFwiUExBSU5URVhUXCIsXG4gICAgICAgIFwiVmFsdWVcIjogXCJPVkVSUklERSFcIixcbiAgICAgICAgXCJOYW1lXCI6IFwiRk9PXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICBcIlR5cGVcIjogXCJQQVJBTUVURVJfU1RPUkVcIixcbiAgICAgICAgXCJWYWx1ZVwiOiB7XG4gICAgICAgICAgXCJGbjo6Sm9pblwiOiBbXG4gICAgICAgICAgXCJcIixcbiAgICAgICAgICBbXG4gICAgICAgICAgICBcIjExMVwiLFxuICAgICAgICAgICAge8KgdHdvdHdvdHdvOiBcIjIyMlwiIH1cbiAgICAgICAgICBdXG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBcIk5hbWVcIjogXCJCQVJcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgIFwiVHlwZVwiOiBcIlBMQUlOVEVYVFwiLFxuICAgICAgICBcIlZhbHVlXCI6IFwiQUJDXCIsXG4gICAgICAgIFwiTmFtZVwiOiBcIkdPT1wiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcIlByaXZpbGVnZWRNb2RlXCI6IGZhbHNlLFxuICAgICAgXCJJbWFnZVwiOiBcImF3cy9jb2RlYnVpbGQvc3RhbmRhcmQ6MS4wXCIsXG4gICAgICBcIkNvbXB1dGVUeXBlXCI6IFwiQlVJTERfR0VORVJBTDFfU01BTExcIlxuICAgICAgfVxuICAgIH0pKTtcblxuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuXG4gICcubWV0cmljWHh4KCkgbWV0aG9kcyBjYW4gYmUgdXNlZCB0byBvYnRhaW4gTWV0cmljcyBmb3IgQ29kZUJ1aWxkIHByb2plY3RzJyh0ZXN0OiBUZXN0KSB7XG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG5cbiAgICBjb25zdCBwcm9qZWN0ID0gbmV3IGNvZGVidWlsZC5Qcm9qZWN0KHN0YWNrLCAnTXlCdWlsZFByb2plY3QnLCB7XG4gICAgICBzb3VyY2U6IGNvZGVidWlsZC5Tb3VyY2UuczMoe1xuICAgICAgICBidWNrZXQ6IG5ldyBzMy5CdWNrZXQoc3RhY2ssICdNeUJ1Y2tldCcpLFxuICAgICAgICBwYXRoOiAncGF0aCcsXG4gICAgICB9KSxcbiAgICB9KTtcblxuICAgIGNvbnN0IG1ldHJpY0J1aWxkcyA9IHByb2plY3QubWV0cmljQnVpbGRzKCk7XG4gICAgdGVzdC5zYW1lKG1ldHJpY0J1aWxkcy5kaW1lbnNpb25zIS5Qcm9qZWN0TmFtZSwgcHJvamVjdC5wcm9qZWN0TmFtZSk7XG4gICAgdGVzdC5kZWVwRXF1YWwobWV0cmljQnVpbGRzLm5hbWVzcGFjZSwgJ0FXUy9Db2RlQnVpbGQnKTtcbiAgICB0ZXN0LmRlZXBFcXVhbChtZXRyaWNCdWlsZHMuc3RhdGlzdGljLCAnU3VtJywgJ2RlZmF1bHQgc3RhdCBpcyBTVU0nKTtcbiAgICB0ZXN0LmRlZXBFcXVhbChtZXRyaWNCdWlsZHMubWV0cmljTmFtZSwgJ0J1aWxkcycpO1xuXG4gICAgY29uc3QgbWV0cmljRHVyYXRpb24gPSBwcm9qZWN0Lm1ldHJpY0R1cmF0aW9uKHsgbGFiZWw6ICdoZWxsbycgfSk7XG5cbiAgICB0ZXN0LmRlZXBFcXVhbChtZXRyaWNEdXJhdGlvbi5tZXRyaWNOYW1lLCAnRHVyYXRpb24nKTtcbiAgICB0ZXN0LmRlZXBFcXVhbChtZXRyaWNEdXJhdGlvbi5sYWJlbCwgJ2hlbGxvJyk7XG5cbiAgICB0ZXN0LmRlZXBFcXVhbChwcm9qZWN0Lm1ldHJpY0ZhaWxlZEJ1aWxkcygpLm1ldHJpY05hbWUsICdGYWlsZWRCdWlsZHMnKTtcbiAgICB0ZXN0LmRlZXBFcXVhbChwcm9qZWN0Lm1ldHJpY1N1Y2NlZWRlZEJ1aWxkcygpLm1ldHJpY05hbWUsICdTdWNjZWVkZWRCdWlsZHMnKTtcblxuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuXG4gICd1c2luZyBDb21wdXRlVHlwZS5TbWFsbCB3aXRoIGEgV2luZG93cyBpbWFnZSBmYWlscyB2YWxpZGF0aW9uJyh0ZXN0OiBUZXN0KSB7XG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgY29uc3QgaW52YWxpZEVudmlyb25tZW50OiBjb2RlYnVpbGQuQnVpbGRFbnZpcm9ubWVudCA9IHtcbiAgICAgIGJ1aWxkSW1hZ2U6IGNvZGVidWlsZC5XaW5kb3dzQnVpbGRJbWFnZS5XSU5fU0VSVkVSX0NPUkVfMjAxNl9CQVNFLFxuICAgICAgY29tcHV0ZVR5cGU6IGNvZGVidWlsZC5Db21wdXRlVHlwZS5TTUFMTCxcbiAgICB9O1xuXG4gICAgdGVzdC50aHJvd3MoKCkgPT4ge1xuICAgICAgbmV3IGNvZGVidWlsZC5Qcm9qZWN0KHN0YWNrLCAnTXlQcm9qZWN0Jywge1xuICAgICAgICBzb3VyY2U6IGNvZGVidWlsZC5Tb3VyY2UuczMoe1xuICAgICAgICAgIGJ1Y2tldDogbmV3IHMzLkJ1Y2tldChzdGFjaywgJ015QnVja2V0JyksXG4gICAgICAgICAgcGF0aDogJ3BhdGgnLFxuICAgICAgICB9KSxcbiAgICAgICAgZW52aXJvbm1lbnQ6IGludmFsaWRFbnZpcm9ubWVudCxcbiAgICAgIH0pO1xuICAgIH0sIC9XaW5kb3dzIGltYWdlcyBkbyBub3Qgc3VwcG9ydCB0aGUgU21hbGwgQ29tcHV0ZVR5cGUvKTtcblxuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuXG4gICdBUk0gaW1hZ2UnOiB7XG4gICAgJ0FNQVpPTl9MSU5VWF8yX0FSTSc6IHtcbiAgICAgICdoYXMgdHlwZSBBUk1fQ09OVEFJTkVSIGFuZCBkZWZhdWx0IENvbXB1dGVUeXBlIExBUkdFJyh0ZXN0OiBUZXN0KSB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgICAgICBuZXcgY29kZWJ1aWxkLlBpcGVsaW5lUHJvamVjdChzdGFjaywgJ1Byb2plY3QnLCB7XG4gICAgICAgICAgZW52aXJvbm1lbnQ6IHtcbiAgICAgICAgICAgIGJ1aWxkSW1hZ2U6IGNvZGVidWlsZC5MaW51eEJ1aWxkSW1hZ2UuQU1BWk9OX0xJTlVYXzJfQVJNLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGV4cGVjdChzdGFjaykudG8oaGF2ZVJlc291cmNlTGlrZSgnQVdTOjpDb2RlQnVpbGQ6OlByb2plY3QnLCB7XG4gICAgICAgICAgXCJFbnZpcm9ubWVudFwiOiB7XG4gICAgICAgICAgICBcIlR5cGVcIjogXCJBUk1fQ09OVEFJTkVSXCIsXG4gICAgICAgICAgICBcIkNvbXB1dGVUeXBlXCI6IFwiQlVJTERfR0VORVJBTDFfTEFSR0VcIixcbiAgICAgICAgICB9LFxuICAgICAgICB9KSk7XG5cbiAgICAgICAgdGVzdC5kb25lKCk7XG4gICAgICB9LFxuXG4gICAgICAnY2Fubm90IGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBDb21wdXRlVHlwZSBTTUFMTCcodGVzdDogVGVzdCkge1xuICAgICAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcblxuICAgICAgICB0ZXN0LnRocm93cygoKSA9PiB7XG4gICAgICAgICAgbmV3IGNvZGVidWlsZC5QaXBlbGluZVByb2plY3Qoc3RhY2ssICdQcm9qZWN0Jywge1xuICAgICAgICAgICAgZW52aXJvbm1lbnQ6IHtcbiAgICAgICAgICAgICAgYnVpbGRJbWFnZTogY29kZWJ1aWxkLkxpbnV4QnVpbGRJbWFnZS5BTUFaT05fTElOVVhfMl9BUk0sXG4gICAgICAgICAgICAgIGNvbXB1dGVUeXBlOiBjb2RlYnVpbGQuQ29tcHV0ZVR5cGUuU01BTEwsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pO1xuICAgICAgICB9LCAvQVJNIGltYWdlcyBvbmx5IHN1cHBvcnQgQ29tcHV0ZVR5cGUgJ0JVSUxEX0dFTkVSQUwxX0xBUkdFJyAtICdCVUlMRF9HRU5FUkFMMV9TTUFMTCcgd2FzIGdpdmVuLyk7XG5cbiAgICAgICAgdGVzdC5kb25lKCk7XG4gICAgICB9LFxuXG4gICAgICAnY2Fubm90IGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBDb21wdXRlVHlwZSBNRURJVU0nKHRlc3Q6IFRlc3QpIHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG5cbiAgICAgICAgdGVzdC50aHJvd3MoKCkgPT4ge1xuICAgICAgICAgIG5ldyBjb2RlYnVpbGQuUGlwZWxpbmVQcm9qZWN0KHN0YWNrLCAnUHJvamVjdCcsIHtcbiAgICAgICAgICAgIGVudmlyb25tZW50OiB7XG4gICAgICAgICAgICAgIGJ1aWxkSW1hZ2U6IGNvZGVidWlsZC5MaW51eEJ1aWxkSW1hZ2UuQU1BWk9OX0xJTlVYXzJfQVJNLFxuICAgICAgICAgICAgICBjb21wdXRlVHlwZTogY29kZWJ1aWxkLkNvbXB1dGVUeXBlLk1FRElVTSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sIC9BUk0gaW1hZ2VzIG9ubHkgc3VwcG9ydCBDb21wdXRlVHlwZSAnQlVJTERfR0VORVJBTDFfTEFSR0UnIC0gJ0JVSUxEX0dFTkVSQUwxX01FRElVTScgd2FzIGdpdmVuLyk7XG5cbiAgICAgICAgdGVzdC5kb25lKCk7XG4gICAgICB9LFxuXG4gICAgICAnY2Fubm90IGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBDb21wdXRlVHlwZSBYMl9MQVJHRScodGVzdDogVGVzdCkge1xuICAgICAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcblxuICAgICAgICB0ZXN0LnRocm93cygoKSA9PiB7XG4gICAgICAgICAgbmV3IGNvZGVidWlsZC5QaXBlbGluZVByb2plY3Qoc3RhY2ssICdQcm9qZWN0Jywge1xuICAgICAgICAgICAgZW52aXJvbm1lbnQ6IHtcbiAgICAgICAgICAgICAgYnVpbGRJbWFnZTogY29kZWJ1aWxkLkxpbnV4QnVpbGRJbWFnZS5BTUFaT05fTElOVVhfMl9BUk0sXG4gICAgICAgICAgICAgIGNvbXB1dGVUeXBlOiBjb2RlYnVpbGQuQ29tcHV0ZVR5cGUuWDJfTEFSR0UsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pO1xuICAgICAgICB9LCAvQVJNIGltYWdlcyBvbmx5IHN1cHBvcnQgQ29tcHV0ZVR5cGUgJ0JVSUxEX0dFTkVSQUwxX0xBUkdFJyAtICdCVUlMRF9HRU5FUkFMMV8yWExBUkdFJyB3YXMgZ2l2ZW4vKTtcblxuICAgICAgICB0ZXN0LmRvbmUoKTtcbiAgICAgIH0sXG4gICAgfSxcbiAgfSxcblxuICAnYmFkZ2Ugc3VwcG9ydCB0ZXN0Jyh0ZXN0OiBUZXN0KSB7XG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG5cbiAgICBpbnRlcmZhY2UgQmFkZ2VWYWxpZGF0aW9uVGVzdENhc2Uge1xuICAgICAgc291cmNlOiBjb2RlYnVpbGQuU291cmNlLFxuICAgICAgYWxsb3dzQmFkZ2U6IGJvb2xlYW5cbiAgICB9XG5cbiAgICBjb25zdCByZXBvID0gbmV3IGNvZGVjb21taXQuUmVwb3NpdG9yeShzdGFjaywgJ015UmVwbycsIHtcbiAgICAgIHJlcG9zaXRvcnlOYW1lOiAnaGVsbG8tY2RrJyxcbiAgICB9KTtcbiAgICBjb25zdCBidWNrZXQgPSBuZXcgczMuQnVja2V0KHN0YWNrLCAnTXlCdWNrZXQnKTtcblxuICAgIGNvbnN0IGNhc2VzOiBCYWRnZVZhbGlkYXRpb25UZXN0Q2FzZVtdID0gW1xuICAgICAgeyBzb3VyY2U6IG5ldyBOb1NvdXJjZSgpLCBhbGxvd3NCYWRnZTogZmFsc2UgfSxcbiAgICAgIHsgc291cmNlOiBuZXcgQ29kZVBpcGVsaW5lU291cmNlKCksIGFsbG93c0JhZGdlOiBmYWxzZSB9LFxuICAgICAgeyBzb3VyY2U6IGNvZGVidWlsZC5Tb3VyY2UuY29kZUNvbW1pdCh7IHJlcG9zaXRvcnk6IHJlcG8gfSksIGFsbG93c0JhZGdlOiB0cnVlIH0sXG4gICAgICB7IHNvdXJjZTogY29kZWJ1aWxkLlNvdXJjZS5zMyh7IGJ1Y2tldCwgcGF0aDogJ3BhdGgvdG8vc291cmNlLnppcCcgfSksIGFsbG93c0JhZGdlOiBmYWxzZSB9LFxuICAgICAgeyBzb3VyY2U6IGNvZGVidWlsZC5Tb3VyY2UuZ2l0SHViKHsgb3duZXI6ICdhd3NsYWJzJywgcmVwbzogJ2F3cy1jZGsnIH0pLCBhbGxvd3NCYWRnZTogdHJ1ZSB9LFxuICAgICAgeyBzb3VyY2U6IGNvZGVidWlsZC5Tb3VyY2UuZ2l0SHViRW50ZXJwcmlzZSh7IGh0dHBzQ2xvbmVVcmw6ICd1cmwnIH0pLCBhbGxvd3NCYWRnZTogdHJ1ZSB9LFxuICAgICAgeyBzb3VyY2U6IGNvZGVidWlsZC5Tb3VyY2UuYml0QnVja2V0KHsgb3duZXI6ICdhd3NsYWJzJywgcmVwbzogJ2F3cy1jZGsnIH0pLCBhbGxvd3NCYWRnZTogdHJ1ZSB9LFxuICAgIF07XG5cbiAgICBjYXNlcy5mb3JFYWNoKHRlc3RDYXNlID0+IHtcbiAgICAgIGNvbnN0IHNvdXJjZSA9IHRlc3RDYXNlLnNvdXJjZTtcbiAgICAgIGNvbnN0IHZhbGlkYXRpb25CbG9jayA9ICgpID0+IHsgbmV3IGNvZGVidWlsZC5Qcm9qZWN0KHN0YWNrLCBgTXlQcm9qZWN0LSR7c291cmNlLnR5cGV9YCwgeyBzb3VyY2UsIGJhZGdlOiB0cnVlIH0pOyB9O1xuICAgICAgaWYgKHRlc3RDYXNlLmFsbG93c0JhZGdlKSB7XG4gICAgICAgIHRlc3QuZG9lc05vdFRocm93KHZhbGlkYXRpb25CbG9jayk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0ZXN0LnRocm93cyh2YWxpZGF0aW9uQmxvY2ssIC9CYWRnZSBpcyBub3Qgc3VwcG9ydGVkIGZvciBzb3VyY2UgdHlwZSAvKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuXG4gICd3ZWJob29rIEZpbHRlcnMnOiB7XG4gICAgJ2EgR3JvdXAgY2Fubm90IGJlIGNyZWF0ZWQgd2l0aCBhbiBlbXB0eSBzZXQgb2YgZXZlbnQgYWN0aW9ucycodGVzdDogVGVzdCkge1xuICAgICAgdGVzdC50aHJvd3MoKCkgPT4ge1xuICAgICAgICBjb2RlYnVpbGQuRmlsdGVyR3JvdXAuaW5FdmVudE9mKCk7XG4gICAgICB9LCAvQSBmaWx0ZXIgZ3JvdXAgbXVzdCBjb250YWluIGF0IGxlYXN0IG9uZSBldmVudCBhY3Rpb24vKTtcblxuICAgICAgdGVzdC5kb25lKCk7XG4gICAgfSxcblxuICAgICdjYW5ub3QgaGF2ZSBiYXNlIHJlZiBjb25kaXRpb25zIGlmIHRoZSBHcm91cCBjb250YWlucyB0aGUgUFVTSCBhY3Rpb24nKHRlc3Q6IFRlc3QpIHtcbiAgICAgIGNvbnN0IGZpbHRlckdyb3VwID0gY29kZWJ1aWxkLkZpbHRlckdyb3VwLmluRXZlbnRPZihjb2RlYnVpbGQuRXZlbnRBY3Rpb24uUFVMTF9SRVFVRVNUX0NSRUFURUQsXG4gICAgICAgIGNvZGVidWlsZC5FdmVudEFjdGlvbi5QVVNIKTtcblxuICAgICAgdGVzdC50aHJvd3MoKCkgPT4ge1xuICAgICAgICBmaWx0ZXJHcm91cC5hbmRCYXNlUmVmSXMoJy4qJyk7XG4gICAgICB9LCAvQSBiYXNlIHJlZmVyZW5jZSBjb25kaXRpb24gY2Fubm90IGJlIGFkZGVkIGlmIGEgR3JvdXAgY29udGFpbnMgYSBQVVNIIGV2ZW50IGFjdGlvbi8pO1xuXG4gICAgICB0ZXN0LmRvbmUoKTtcbiAgICB9LFxuXG4gICAgJ2Nhbm5vdCBoYXZlIGZpbGUgcGF0aCBjb25kaXRpb25zIGlmIHRoZSBHcm91cCBjb250YWlucyBhbnkgYWN0aW9uIG90aGVyIHRoYW4gUFVTSCcodGVzdDogVGVzdCkge1xuICAgICAgY29uc3QgZmlsdGVyR3JvdXAgPSBjb2RlYnVpbGQuRmlsdGVyR3JvdXAuaW5FdmVudE9mKGNvZGVidWlsZC5FdmVudEFjdGlvbi5QVUxMX1JFUVVFU1RfQ1JFQVRFRCxcbiAgICAgICAgY29kZWJ1aWxkLkV2ZW50QWN0aW9uLlBVU0gpO1xuXG4gICAgICB0ZXN0LnRocm93cygoKSA9PiB7XG4gICAgICAgIGZpbHRlckdyb3VwLmFuZEZpbGVQYXRoSXNOb3QoJy4qXFxcXC5qYXZhJyk7XG4gICAgICB9LCAvQSBmaWxlIHBhdGggY29uZGl0aW9uIGNhbm5vdCBiZSBhZGRlZCBpZiBhIEdyb3VwIGNvbnRhaW5zIGFueSBldmVudCBhY3Rpb24gb3RoZXIgdGhhbiBQVVNILyk7XG5cbiAgICAgIHRlc3QuZG9uZSgpO1xuICAgIH0sXG5cbiAgICAnQml0QnVja2V0IHNvdXJjZXMgZG8gbm90IHN1cHBvcnQgdGhlIFBVTExfUkVRVUVTVF9SRU9QRU5FRCBldmVudCBhY3Rpb24nKHRlc3Q6IFRlc3QpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuXG4gICAgICB0ZXN0LnRocm93cygoKSA9PiB7XG4gICAgICAgIG5ldyBjb2RlYnVpbGQuUHJvamVjdChzdGFjaywgJ1Byb2plY3QnLCB7XG4gICAgICAgICAgc291cmNlOiBjb2RlYnVpbGQuU291cmNlLmJpdEJ1Y2tldCh7XG4gICAgICAgICAgICBvd25lcjogJ293bmVyJyxcbiAgICAgICAgICAgIHJlcG86ICdyZXBvJyxcbiAgICAgICAgICAgIHdlYmhvb2tGaWx0ZXJzOiBbXG4gICAgICAgICAgICAgIGNvZGVidWlsZC5GaWx0ZXJHcm91cC5pbkV2ZW50T2YoY29kZWJ1aWxkLkV2ZW50QWN0aW9uLlBVTExfUkVRVUVTVF9SRU9QRU5FRCksXG4gICAgICAgICAgICBdLFxuICAgICAgICAgIH0pLFxuICAgICAgICB9KTtcbiAgICAgIH0sIC9CaXRCdWNrZXQgc291cmNlcyBkbyBub3Qgc3VwcG9ydCB0aGUgUFVMTF9SRVFVRVNUX1JFT1BFTkVEIHdlYmhvb2sgZXZlbnQgYWN0aW9uLyk7XG5cbiAgICAgIHRlc3QuZG9uZSgpO1xuICAgIH0sXG5cbiAgICAnQml0QnVja2V0IHNvdXJjZXMgZG8gbm90IHN1cHBvcnQgZmlsZSBwYXRoIGNvbmRpdGlvbnMnKHRlc3Q6IFRlc3QpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuICAgICAgY29uc3QgZmlsdGVyR3JvdXAgPSBjb2RlYnVpbGQuRmlsdGVyR3JvdXAuaW5FdmVudE9mKGNvZGVidWlsZC5FdmVudEFjdGlvbi5QVVNIKS5hbmRGaWxlUGF0aElzKCcuKicpO1xuXG4gICAgICB0ZXN0LnRocm93cygoKSA9PiB7XG4gICAgICAgIG5ldyBjb2RlYnVpbGQuUHJvamVjdChzdGFjaywgJ1Byb2plY3QnLCB7XG4gICAgICAgICAgc291cmNlOiBjb2RlYnVpbGQuU291cmNlLmJpdEJ1Y2tldCh7XG4gICAgICAgICAgICBvd25lcjogJ293bmVyJyxcbiAgICAgICAgICAgIHJlcG86ICdyZXBvJyxcbiAgICAgICAgICAgIHdlYmhvb2tGaWx0ZXJzOiBbZmlsdGVyR3JvdXBdLFxuICAgICAgICAgIH0pLFxuICAgICAgICB9KTtcbiAgICAgIH0sIC9CaXRCdWNrZXQgc291cmNlcyBkbyBub3Qgc3VwcG9ydCBmaWxlIHBhdGggY29uZGl0aW9ucyBmb3Igd2ViaG9vayBmaWx0ZXJzLyk7XG5cbiAgICAgIHRlc3QuZG9uZSgpO1xuICAgIH0sXG4gIH0sXG59O1xuIl19