"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cxapi = require("@aws-cdk/cx-api");
const fs = require("fs-extra");
const os = require("os");
const path = require("path");
const __1 = require("..");
async function bootstrapEnvironment2(environment, sdk, toolkitStackName, roleArn, props = {}) {
    var _a, _b, _c, _d;
    if (((_a = props.trustedAccounts) === null || _a === void 0 ? void 0 : _a.length) && !((_b = props.cloudFormationExecutionPolicies) === null || _b === void 0 ? void 0 : _b.length)) {
        throw new Error('--cloudformation-execution-policies are required if --trust has been passed!');
    }
    const outdir = await fs.mkdtemp(path.join(os.tmpdir(), 'cdk-bootstrap-new'));
    const builder = new cxapi.CloudAssemblyBuilder(outdir);
    const templateFile = `${toolkitStackName}.template.json`;
    await fs.copy(path.join(__dirname, 'bootstrap-template.json'), path.join(builder.outdir, templateFile));
    builder.addArtifact(toolkitStackName, {
        type: cxapi.ArtifactType.AWS_CLOUDFORMATION_STACK,
        environment: cxapi.EnvironmentUtils.format(environment.account, environment.region),
        properties: {
            templateFile,
        },
    });
    const assembly = builder.buildAssembly();
    return await __1.deployStack({
        stack: assembly.getStackByName(toolkitStackName),
        sdk,
        roleArn,
        tags: props.tags,
        execute: props.execute,
        parameters: {
            FileAssetsBucketName: props.bucketName,
            FileAssetsBucketKmsKeyId: props.kmsKeyId,
            TrustedAccounts: (_c = props.trustedAccounts) === null || _c === void 0 ? void 0 : _c.join(','),
            CloudFormationExecutionPolicies: (_d = props.cloudFormationExecutionPolicies) === null || _d === void 0 ? void 0 : _d.join(','),
        },
    });
}
exports.bootstrapEnvironment2 = bootstrapEnvironment2;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vdHN0cmFwLWVudmlyb25tZW50Mi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJvb3RzdHJhcC1lbnZpcm9ubWVudDIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5Q0FBeUM7QUFDekMsK0JBQStCO0FBQy9CLHlCQUF5QjtBQUN6Qiw2QkFBNkI7QUFDN0IsMEJBQXFGO0FBRTlFLEtBQUssVUFBVSxxQkFBcUIsQ0FBQyxXQUE4QixFQUFFLEdBQVMsRUFDekMsZ0JBQXdCLEVBQUUsT0FBMkIsRUFDckQsUUFBbUMsRUFBRTs7SUFDL0UsSUFBSSxPQUFBLEtBQUssQ0FBQyxlQUFlLDBDQUFFLE1BQU0sS0FBSSxRQUFDLEtBQUssQ0FBQywrQkFBK0IsMENBQUUsTUFBTSxDQUFBLEVBQUU7UUFDbkYsTUFBTSxJQUFJLEtBQUssQ0FBQyw4RUFBOEUsQ0FBQyxDQUFDO0tBQ2pHO0lBRUQsTUFBTSxNQUFNLEdBQUcsTUFBTSxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFLG1CQUFtQixDQUFDLENBQUMsQ0FBQztJQUM3RSxNQUFNLE9BQU8sR0FBRyxJQUFJLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN2RCxNQUFNLFlBQVksR0FBRyxHQUFHLGdCQUFnQixnQkFBZ0IsQ0FBQztJQUV6RCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQ1gsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUseUJBQXlCLENBQUMsRUFDL0MsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFFM0MsT0FBTyxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsRUFBRTtRQUNwQyxJQUFJLEVBQUUsS0FBSyxDQUFDLFlBQVksQ0FBQyx3QkFBd0I7UUFDakQsV0FBVyxFQUFFLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsTUFBTSxDQUFDO1FBQ25GLFVBQVUsRUFBRTtZQUNWLFlBQVk7U0FDYjtLQUNGLENBQUMsQ0FBQztJQUVILE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN6QyxPQUFPLE1BQU0sZUFBVyxDQUFDO1FBQ3ZCLEtBQUssRUFBRSxRQUFRLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUFDO1FBQ2hELEdBQUc7UUFDSCxPQUFPO1FBQ1AsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO1FBQ2hCLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztRQUN0QixVQUFVLEVBQUU7WUFDVixvQkFBb0IsRUFBRSxLQUFLLENBQUMsVUFBVTtZQUN0Qyx3QkFBd0IsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUN4QyxlQUFlLFFBQUUsS0FBSyxDQUFDLGVBQWUsMENBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQztZQUNqRCwrQkFBK0IsUUFBRSxLQUFLLENBQUMsK0JBQStCLDBDQUFFLElBQUksQ0FBQyxHQUFHLENBQUM7U0FDbEY7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDO0FBckNELHNEQXFDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGN4YXBpIGZyb20gJ0Bhd3MtY2RrL2N4LWFwaSc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgKiBhcyBvcyBmcm9tICdvcyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgQm9vdHN0cmFwRW52aXJvbm1lbnRQcm9wcywgZGVwbG95U3RhY2ssIERlcGxveVN0YWNrUmVzdWx0LCBJU0RLIH0gZnJvbSAnLi4nO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYm9vdHN0cmFwRW52aXJvbm1lbnQyKGVudmlyb25tZW50OiBjeGFwaS5FbnZpcm9ubWVudCwgc2RrOiBJU0RLLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sa2l0U3RhY2tOYW1lOiBzdHJpbmcsIHJvbGVBcm46IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHM6IEJvb3RzdHJhcEVudmlyb25tZW50UHJvcHMgPSB7fSk6IFByb21pc2U8RGVwbG95U3RhY2tSZXN1bHQ+IHtcbiAgaWYgKHByb3BzLnRydXN0ZWRBY2NvdW50cz8ubGVuZ3RoICYmICFwcm9wcy5jbG91ZEZvcm1hdGlvbkV4ZWN1dGlvblBvbGljaWVzPy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJy0tY2xvdWRmb3JtYXRpb24tZXhlY3V0aW9uLXBvbGljaWVzIGFyZSByZXF1aXJlZCBpZiAtLXRydXN0IGhhcyBiZWVuIHBhc3NlZCEnKTtcbiAgfVxuXG4gIGNvbnN0IG91dGRpciA9IGF3YWl0IGZzLm1rZHRlbXAocGF0aC5qb2luKG9zLnRtcGRpcigpLCAnY2RrLWJvb3RzdHJhcC1uZXcnKSk7XG4gIGNvbnN0IGJ1aWxkZXIgPSBuZXcgY3hhcGkuQ2xvdWRBc3NlbWJseUJ1aWxkZXIob3V0ZGlyKTtcbiAgY29uc3QgdGVtcGxhdGVGaWxlID0gYCR7dG9vbGtpdFN0YWNrTmFtZX0udGVtcGxhdGUuanNvbmA7XG5cbiAgYXdhaXQgZnMuY29weShcbiAgICBwYXRoLmpvaW4oX19kaXJuYW1lLCAnYm9vdHN0cmFwLXRlbXBsYXRlLmpzb24nKSxcbiAgICBwYXRoLmpvaW4oYnVpbGRlci5vdXRkaXIsIHRlbXBsYXRlRmlsZSkpO1xuXG4gIGJ1aWxkZXIuYWRkQXJ0aWZhY3QodG9vbGtpdFN0YWNrTmFtZSwge1xuICAgIHR5cGU6IGN4YXBpLkFydGlmYWN0VHlwZS5BV1NfQ0xPVURGT1JNQVRJT05fU1RBQ0ssXG4gICAgZW52aXJvbm1lbnQ6IGN4YXBpLkVudmlyb25tZW50VXRpbHMuZm9ybWF0KGVudmlyb25tZW50LmFjY291bnQsIGVudmlyb25tZW50LnJlZ2lvbiksXG4gICAgcHJvcGVydGllczoge1xuICAgICAgdGVtcGxhdGVGaWxlLFxuICAgIH0sXG4gIH0pO1xuXG4gIGNvbnN0IGFzc2VtYmx5ID0gYnVpbGRlci5idWlsZEFzc2VtYmx5KCk7XG4gIHJldHVybiBhd2FpdCBkZXBsb3lTdGFjayh7XG4gICAgc3RhY2s6IGFzc2VtYmx5LmdldFN0YWNrQnlOYW1lKHRvb2xraXRTdGFja05hbWUpLFxuICAgIHNkayxcbiAgICByb2xlQXJuLFxuICAgIHRhZ3M6IHByb3BzLnRhZ3MsXG4gICAgZXhlY3V0ZTogcHJvcHMuZXhlY3V0ZSxcbiAgICBwYXJhbWV0ZXJzOiB7XG4gICAgICBGaWxlQXNzZXRzQnVja2V0TmFtZTogcHJvcHMuYnVja2V0TmFtZSxcbiAgICAgIEZpbGVBc3NldHNCdWNrZXRLbXNLZXlJZDogcHJvcHMua21zS2V5SWQsXG4gICAgICBUcnVzdGVkQWNjb3VudHM6IHByb3BzLnRydXN0ZWRBY2NvdW50cz8uam9pbignLCcpLFxuICAgICAgQ2xvdWRGb3JtYXRpb25FeGVjdXRpb25Qb2xpY2llczogcHJvcHMuY2xvdWRGb3JtYXRpb25FeGVjdXRpb25Qb2xpY2llcz8uam9pbignLCcpLFxuICAgIH0sXG4gIH0pO1xufVxuIl19