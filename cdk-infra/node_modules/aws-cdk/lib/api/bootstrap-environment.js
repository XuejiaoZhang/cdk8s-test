"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cxapi = require("@aws-cdk/cx-api");
const fs = require("fs-extra");
const os = require("os");
const path = require("path");
const deploy_stack_1 = require("./deploy-stack");
// tslint:disable:max-line-length
/** @experimental */
exports.BUCKET_NAME_OUTPUT = 'BucketName';
/** @experimental */
exports.BUCKET_DOMAIN_NAME_OUTPUT = 'BucketDomainName';
/** @experimental */
async function bootstrapEnvironment(environment, aws, toolkitStackName, roleArn, props = {}) {
    var _a, _b;
    if ((_a = props.trustedAccounts) === null || _a === void 0 ? void 0 : _a.length) {
        throw new Error('--trust can only be passed for the new bootstrap experience!');
    }
    if ((_b = props.cloudFormationExecutionPolicies) === null || _b === void 0 ? void 0 : _b.length) {
        throw new Error('--cloudformation-execution-policies can only be passed for the new bootstrap experience!');
    }
    const template = {
        Description: "The CDK Toolkit Stack. It was created by `cdk bootstrap` and manages resources necessary for managing your Cloud Applications with AWS CDK.",
        Resources: {
            StagingBucket: {
                Type: "AWS::S3::Bucket",
                Properties: {
                    BucketName: props.bucketName,
                    AccessControl: "Private",
                    BucketEncryption: {
                        ServerSideEncryptionConfiguration: [{
                                ServerSideEncryptionByDefault: {
                                    SSEAlgorithm: "aws:kms",
                                    KMSMasterKeyID: props.kmsKeyId,
                                },
                            }]
                    },
                    PublicAccessBlockConfiguration: {
                        BlockPublicAcls: true,
                        BlockPublicPolicy: true,
                        IgnorePublicAcls: true,
                        RestrictPublicBuckets: true,
                    },
                }
            }
        },
        Outputs: {
            [exports.BUCKET_NAME_OUTPUT]: {
                Description: "The name of the S3 bucket owned by the CDK toolkit stack",
                Value: { Ref: "StagingBucket" }
            },
            [exports.BUCKET_DOMAIN_NAME_OUTPUT]: {
                Description: "The domain name of the S3 bucket owned by the CDK toolkit stack",
                Value: { "Fn::GetAtt": ["StagingBucket", "RegionalDomainName"] }
            }
        }
    };
    const outdir = await fs.mkdtemp(path.join(os.tmpdir(), 'cdk-bootstrap'));
    const builder = new cxapi.CloudAssemblyBuilder(outdir);
    const templateFile = `${toolkitStackName}.template.json`;
    await fs.writeJson(path.join(builder.outdir, templateFile), template, { spaces: 2 });
    builder.addArtifact(toolkitStackName, {
        type: cxapi.ArtifactType.AWS_CLOUDFORMATION_STACK,
        environment: cxapi.EnvironmentUtils.format(environment.account, environment.region),
        properties: {
            templateFile
        },
    });
    const assembly = builder.buildAssembly();
    return await deploy_stack_1.deployStack({
        stack: assembly.getStackByName(toolkitStackName),
        sdk: aws, roleArn,
        tags: props.tags,
        execute: props.execute
    });
}
exports.bootstrapEnvironment = bootstrapEnvironment;
//# sourceMappingURL=data:application/json;base64,