"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const logging_1 = require("../logging");
const credentials_1 = require("./aws-auth/credentials");
const deploy_stack_1 = require("./deploy-stack");
const toolkit_info_1 = require("./toolkit-info");
exports.DEFAULT_TOOLKIT_STACK_NAME = 'CDKToolkit';
/**
 * Default provisioner (applies to CloudFormation).
 */
class CloudFormationDeploymentTarget {
    constructor(props) {
        this.aws = props.aws;
    }
    async readCurrentTemplate(stack) {
        logging_1.debug(`Reading existing template for stack ${stack.displayName}.`);
        const cfn = await this.aws.cloudFormation(stack.environment.account, stack.environment.region, credentials_1.Mode.ForReading);
        return deploy_stack_1.readCurrentTemplate(cfn, stack.stackName);
    }
    async deployStack(options) {
        const toolkitInfo = await toolkit_info_1.loadToolkitInfo(options.stack.environment, this.aws, options.toolkitStackName || exports.DEFAULT_TOOLKIT_STACK_NAME);
        return deploy_stack_1.deployStack({
            stack: options.stack,
            deployName: options.deployName,
            roleArn: options.roleArn,
            notificationArns: options.notificationArns,
            quiet: options.quiet,
            sdk: this.aws,
            reuseAssets: options.reuseAssets,
            toolkitInfo,
            tags: options.tags,
            execute: options.execute,
            force: options.force
        });
    }
}
exports.CloudFormationDeploymentTarget = CloudFormationDeploymentTarget;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwbG95bWVudC10YXJnZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkZXBsb3ltZW50LXRhcmdldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLHdDQUFtQztBQUNuQyx3REFBOEM7QUFDOUMsaURBQXFGO0FBQ3JGLGlEQUFpRDtBQUdwQyxRQUFBLDBCQUEwQixHQUFHLFlBQVksQ0FBQztBQW9DdkQ7O0dBRUc7QUFDSCxNQUFhLDhCQUE4QjtJQUd6QyxZQUFZLEtBQXVCO1FBQ2pDLElBQUksQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQztJQUN2QixDQUFDO0lBRU0sS0FBSyxDQUFDLG1CQUFtQixDQUFDLEtBQWtDO1FBQ2pFLGVBQUssQ0FBQyx1Q0FBdUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7UUFDbkUsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxrQkFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2hILE9BQU8sa0NBQW1CLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRU0sS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUEyQjtRQUNsRCxNQUFNLFdBQVcsR0FBRyxNQUFNLDhCQUFlLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsZ0JBQWdCLElBQUksa0NBQTBCLENBQUMsQ0FBQztRQUN2SSxPQUFPLDBCQUFXLENBQUM7WUFDakIsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLO1lBQ3BCLFVBQVUsRUFBRSxPQUFPLENBQUMsVUFBVTtZQUM5QixPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU87WUFDeEIsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLGdCQUFnQjtZQUMxQyxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUs7WUFDcEIsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHO1lBQ2IsV0FBVyxFQUFFLE9BQU8sQ0FBQyxXQUFXO1lBQ2hDLFdBQVc7WUFDWCxJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUk7WUFDbEIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPO1lBQ3hCLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSztTQUNyQixDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUE3QkQsd0VBNkJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2xvdWRGb3JtYXRpb25TdGFja0FydGlmYWN0IH0gZnJvbSAnQGF3cy1jZGsvY3gtYXBpJztcbmltcG9ydCB7IFRhZyB9IGZyb20gXCIuLi9hcGkvY3hhcHAvc3RhY2tzXCI7XG5pbXBvcnQgeyBkZWJ1ZyB9IGZyb20gJy4uL2xvZ2dpbmcnO1xuaW1wb3J0IHsgTW9kZSB9IGZyb20gJy4vYXdzLWF1dGgvY3JlZGVudGlhbHMnO1xuaW1wb3J0IHsgZGVwbG95U3RhY2ssIERlcGxveVN0YWNrUmVzdWx0LCByZWFkQ3VycmVudFRlbXBsYXRlIH0gZnJvbSAnLi9kZXBsb3ktc3RhY2snO1xuaW1wb3J0IHsgbG9hZFRvb2xraXRJbmZvIH0gZnJvbSAnLi90b29sa2l0LWluZm8nO1xuaW1wb3J0IHsgSVNESyB9IGZyb20gJy4vdXRpbC9zZGsnO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9UT09MS0lUX1NUQUNLX05BTUUgPSAnQ0RLVG9vbGtpdCc7XG5cbmV4cG9ydCB0eXBlIFRlbXBsYXRlID0geyBba2V5OiBzdHJpbmddOiBhbnkgfTtcblxuLyoqXG4gKiBJbnRlcmZhY2UgZm9yIHByb3Zpc2lvbmVyc1xuICpcbiAqIFByb3Zpc2lvbmVycyBhcHBseSB0ZW1wbGF0ZXMgdG8gdGhlIGNsb3VkIGluZnJhc3RydWN0dXJlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElEZXBsb3ltZW50VGFyZ2V0IHtcbiAgcmVhZEN1cnJlbnRUZW1wbGF0ZShzdGFjazogQ2xvdWRGb3JtYXRpb25TdGFja0FydGlmYWN0KTogUHJvbWlzZTxUZW1wbGF0ZT47XG4gIGRlcGxveVN0YWNrKG9wdGlvbnM6IERlcGxveVN0YWNrT3B0aW9ucyk6IFByb21pc2U8RGVwbG95U3RhY2tSZXN1bHQ+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERlcGxveVN0YWNrT3B0aW9ucyB7XG4gIHN0YWNrOiBDbG91ZEZvcm1hdGlvblN0YWNrQXJ0aWZhY3Q7XG4gIHJvbGVBcm4/OiBzdHJpbmc7XG4gIG5vdGlmaWNhdGlvbkFybnM/OiBzdHJpbmdbXTtcbiAgZGVwbG95TmFtZT86IHN0cmluZztcbiAgcXVpZXQ/OiBib29sZWFuO1xuICB0b29sa2l0U3RhY2tOYW1lPzogc3RyaW5nO1xuICByZXVzZUFzc2V0cz86IHN0cmluZ1tdO1xuICB0YWdzPzogVGFnW107XG4gIGV4ZWN1dGU/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBGb3JjZSBkZXBsb3ltZW50LCBldmVuIGlmIHRoZSBkZXBsb3llZCB0ZW1wbGF0ZSBpcyBpZGVudGljYWwgdG8gdGhlIG9uZSB3ZSBhcmUgYWJvdXQgdG8gZGVwbG95LlxuICAgKiBAZGVmYXVsdCBmYWxzZSBkZXBsb3ltZW50IHdpbGwgYmUgc2tpcHBlZCBpZiB0aGUgdGVtcGxhdGUgaXMgaWRlbnRpY2FsXG4gICAqL1xuICBmb3JjZT86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJvdmlzaW9uZXJQcm9wcyB7XG4gIGF3czogSVNESztcbn1cblxuLyoqXG4gKiBEZWZhdWx0IHByb3Zpc2lvbmVyIChhcHBsaWVzIHRvIENsb3VkRm9ybWF0aW9uKS5cbiAqL1xuZXhwb3J0IGNsYXNzIENsb3VkRm9ybWF0aW9uRGVwbG95bWVudFRhcmdldCBpbXBsZW1lbnRzIElEZXBsb3ltZW50VGFyZ2V0IHtcbiAgcHJpdmF0ZSByZWFkb25seSBhd3M6IElTREs7XG5cbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3Zpc2lvbmVyUHJvcHMpIHtcbiAgICB0aGlzLmF3cyA9IHByb3BzLmF3cztcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyByZWFkQ3VycmVudFRlbXBsYXRlKHN0YWNrOiBDbG91ZEZvcm1hdGlvblN0YWNrQXJ0aWZhY3QpOiBQcm9taXNlPFRlbXBsYXRlPiB7XG4gICAgZGVidWcoYFJlYWRpbmcgZXhpc3RpbmcgdGVtcGxhdGUgZm9yIHN0YWNrICR7c3RhY2suZGlzcGxheU5hbWV9LmApO1xuICAgIGNvbnN0IGNmbiA9IGF3YWl0IHRoaXMuYXdzLmNsb3VkRm9ybWF0aW9uKHN0YWNrLmVudmlyb25tZW50LmFjY291bnQsIHN0YWNrLmVudmlyb25tZW50LnJlZ2lvbiwgTW9kZS5Gb3JSZWFkaW5nKTtcbiAgICByZXR1cm4gcmVhZEN1cnJlbnRUZW1wbGF0ZShjZm4sIHN0YWNrLnN0YWNrTmFtZSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZGVwbG95U3RhY2sob3B0aW9uczogRGVwbG95U3RhY2tPcHRpb25zKTogUHJvbWlzZTxEZXBsb3lTdGFja1Jlc3VsdD4ge1xuICAgIGNvbnN0IHRvb2xraXRJbmZvID0gYXdhaXQgbG9hZFRvb2xraXRJbmZvKG9wdGlvbnMuc3RhY2suZW52aXJvbm1lbnQsIHRoaXMuYXdzLCBvcHRpb25zLnRvb2xraXRTdGFja05hbWUgfHwgREVGQVVMVF9UT09MS0lUX1NUQUNLX05BTUUpO1xuICAgIHJldHVybiBkZXBsb3lTdGFjayh7XG4gICAgICBzdGFjazogb3B0aW9ucy5zdGFjayxcbiAgICAgIGRlcGxveU5hbWU6IG9wdGlvbnMuZGVwbG95TmFtZSxcbiAgICAgIHJvbGVBcm46IG9wdGlvbnMucm9sZUFybixcbiAgICAgIG5vdGlmaWNhdGlvbkFybnM6IG9wdGlvbnMubm90aWZpY2F0aW9uQXJucyxcbiAgICAgIHF1aWV0OiBvcHRpb25zLnF1aWV0LFxuICAgICAgc2RrOiB0aGlzLmF3cyxcbiAgICAgIHJldXNlQXNzZXRzOiBvcHRpb25zLnJldXNlQXNzZXRzLFxuICAgICAgdG9vbGtpdEluZm8sXG4gICAgICB0YWdzOiBvcHRpb25zLnRhZ3MsXG4gICAgICBleGVjdXRlOiBvcHRpb25zLmV4ZWN1dGUsXG4gICAgICBmb3JjZTogb3B0aW9ucy5mb3JjZVxuICAgIH0pO1xuICB9XG59XG4iXX0=