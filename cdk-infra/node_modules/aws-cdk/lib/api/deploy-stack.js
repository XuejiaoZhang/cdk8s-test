"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const colors = require("colors/safe");
const uuid = require("uuid");
const assets_1 = require("../assets");
const logging_1 = require("../logging");
const serialize_1 = require("../serialize");
const credentials_1 = require("./aws-auth/credentials");
const cloudformation_1 = require("./util/cloudformation");
const stack_activity_monitor_1 = require("./util/cloudformation/stack-activity-monitor");
const stack_status_1 = require("./util/cloudformation/stack-status");
const LARGE_TEMPLATE_SIZE_KB = 50;
/** @experimental */
async function deployStack(options) {
    var _a, _b;
    if (!options.stack.environment) {
        throw new Error(`The stack ${options.stack.displayName} does not have an environment`);
    }
    const cfn = await options.sdk.cloudFormation(options.stack.environment.account, options.stack.environment.region, credentials_1.Mode.ForWriting);
    const deployName = options.deployName || options.stack.stackName;
    if (!options.force) {
        logging_1.debug(`checking if we can skip this stack based on the currently deployed template and tags (use --force to override)`);
        const deployed = await getDeployedStack(cfn, deployName);
        const tagsIdentical = compareTags((_a = deployed === null || deployed === void 0 ? void 0 : deployed.tags) !== null && _a !== void 0 ? _a : [], (_b = options.tags) !== null && _b !== void 0 ? _b : []);
        if (deployed && JSON.stringify(options.stack.template) === JSON.stringify(deployed.template) && tagsIdentical) {
            logging_1.debug(`${deployName}: no change in template and tags, skipping (use --force to override)`);
            return {
                noOp: true,
                outputs: await getStackOutputs(cfn, deployName),
                stackArn: deployed.stackId,
                stackArtifact: options.stack
            };
        }
        else {
            logging_1.debug(`${deployName}: template changed, deploying...`);
        }
    }
    // bail out if the current template is exactly the same as the one we are about to deploy
    // in cdk-land, this means nothing changed because assets (and therefore nested stacks) are immutable.
    const params = await assets_1.prepareAssets(options.stack, options.toolkitInfo, options.reuseAssets);
    // add passed CloudFormation parameters
    for (const [paramName, paramValue] of Object.entries((options.parameters || {}))) {
        if (paramValue) {
            params.push({
                ParameterKey: paramName,
                ParameterValue: paramValue,
            });
        }
    }
    const executionId = uuid.v4();
    const bodyParameter = await makeBodyParameter(options.stack, options.toolkitInfo);
    if (await cloudformation_1.stackFailedCreating(cfn, deployName)) {
        logging_1.debug(`Found existing stack ${deployName} that had previously failed creation. Deleting it before attempting to re-create it.`);
        await cfn.deleteStack({ StackName: deployName }).promise();
        const deletedStack = await cloudformation_1.waitForStack(cfn, deployName, false);
        if (deletedStack && deletedStack.StackStatus !== 'DELETE_COMPLETE') {
            throw new Error(`Failed deleting stack ${deployName} that had previously failed creation (current state: ${deletedStack.StackStatus})`);
        }
    }
    const update = await cloudformation_1.stackExists(cfn, deployName);
    const changeSetName = `CDK-${executionId}`;
    logging_1.debug(`Attempting to create ChangeSet ${changeSetName} to ${update ? 'update' : 'create'} stack ${deployName}`);
    logging_1.print(`%s: creating CloudFormation changeset...`, colors.bold(deployName));
    const changeSet = await cfn.createChangeSet({
        StackName: deployName,
        ChangeSetName: changeSetName,
        ChangeSetType: update ? 'UPDATE' : 'CREATE',
        Description: `CDK Changeset for execution ${executionId}`,
        TemplateBody: bodyParameter.TemplateBody,
        TemplateURL: bodyParameter.TemplateURL,
        Parameters: params,
        RoleARN: options.roleArn,
        NotificationARNs: options.notificationArns,
        Capabilities: ['CAPABILITY_IAM', 'CAPABILITY_NAMED_IAM', 'CAPABILITY_AUTO_EXPAND'],
        Tags: options.tags
    }).promise();
    logging_1.debug('Initiated creation of changeset: %s; waiting for it to finish creating...', changeSet.Id);
    const changeSetDescription = await cloudformation_1.waitForChangeSet(cfn, deployName, changeSetName);
    if (cloudformation_1.changeSetHasNoChanges(changeSetDescription)) {
        logging_1.debug('No changes are to be performed on %s.', deployName);
        await cfn.deleteChangeSet({ StackName: deployName, ChangeSetName: changeSetName }).promise();
        return { noOp: true, outputs: await getStackOutputs(cfn, deployName), stackArn: changeSet.StackId, stackArtifact: options.stack };
    }
    const execute = options.execute === undefined ? true : options.execute;
    if (execute) {
        logging_1.debug('Initiating execution of changeset %s on stack %s', changeSetName, deployName);
        await cfn.executeChangeSet({ StackName: deployName, ChangeSetName: changeSetName }).promise();
        // tslint:disable-next-line:max-line-length
        const monitor = options.quiet ? undefined : new stack_activity_monitor_1.StackActivityMonitor(cfn, deployName, options.stack, (changeSetDescription.Changes || []).length).start();
        logging_1.debug('Execution of changeset %s on stack %s has started; waiting for the update to complete...', changeSetName, deployName);
        try {
            await cloudformation_1.waitForStack(cfn, deployName);
        }
        finally {
            await (monitor === null || monitor === void 0 ? void 0 : monitor.stop());
        }
        logging_1.debug('Stack %s has completed updating', deployName);
    }
    else {
        logging_1.print(`Changeset %s created and waiting in review for manual execution (--no-execute)`, changeSetName);
    }
    return { noOp: false, outputs: await getStackOutputs(cfn, deployName), stackArn: changeSet.StackId, stackArtifact: options.stack };
}
exports.deployStack = deployStack;
/** @experimental */
async function getStackOutputs(cfn, stackName) {
    const description = await cloudformation_1.describeStack(cfn, stackName);
    const result = {};
    if (description && description.Outputs) {
        description.Outputs.forEach(output => {
            result[output.OutputKey] = output.OutputValue;
        });
    }
    return result;
}
/**
 * Prepares the body parameter for +CreateChangeSet+, putting the generated CloudFormation template in the toolkit-provided
 * S3 bucket if present, otherwise using in-line template argument. If no +ToolkitInfo+ is provided and the template is
 * larger than 50,200 bytes, an +Error+ will be raised.
 *
 * @param stack     the synthesized stack that provides the CloudFormation template
 * @param sdk     an AWS SDK to use when interacting with S3
 * @param toolkitInfo information about the toolkit stack
 */
async function makeBodyParameter(stack, toolkitInfo) {
    const templateJson = serialize_1.toYAML(stack.template);
    if (toolkitInfo) {
        const s3KeyPrefix = `cdk/${stack.id}/`;
        const s3KeySuffix = '.yml';
        const { key } = await toolkitInfo.uploadIfChanged(templateJson, {
            s3KeyPrefix, s3KeySuffix, contentType: 'application/x-yaml'
        });
        const templateURL = `${toolkitInfo.bucketUrl}/${key}`;
        logging_1.debug('Stored template in S3 at:', templateURL);
        return { TemplateURL: templateURL };
    }
    else if (templateJson.length > LARGE_TEMPLATE_SIZE_KB * 1024) {
        logging_1.error(`The template for stack "${stack.displayName}" is ${Math.round(templateJson.length / 1024)}KiB. ` +
            `Templates larger than ${LARGE_TEMPLATE_SIZE_KB}KiB must be uploaded to S3.\n` +
            'Run the following command in order to setup an S3 bucket in this environment, and then re-deploy:\n\n', colors.blue(`\t$ cdk bootstrap ${stack.environment.name}\n`));
        throw new Error(`Template too large to deploy ("cdk bootstrap" is required)`);
    }
    else {
        return { TemplateBody: templateJson };
    }
}
/** @experimental */
async function destroyStack(options) {
    if (!options.stack.environment) {
        throw new Error(`The stack ${options.stack.displayName} does not have an environment`);
    }
    const deployName = options.deployName || options.stack.stackName;
    const cfn = await options.sdk.cloudFormation(options.stack.environment.account, options.stack.environment.region, credentials_1.Mode.ForWriting);
    if (!await cloudformation_1.stackExists(cfn, deployName)) {
        return;
    }
    const monitor = options.quiet ? undefined : new stack_activity_monitor_1.StackActivityMonitor(cfn, deployName, options.stack).start();
    await cfn.deleteStack({ StackName: deployName, RoleARN: options.roleArn }).promise().catch(e => { throw e; });
    const destroyedStack = await cloudformation_1.waitForStack(cfn, deployName, false);
    if (monitor) {
        await monitor.stop();
    }
    if (destroyedStack && destroyedStack.StackStatus !== 'DELETE_COMPLETE') {
        const status = stack_status_1.StackStatus.fromStackDescription(destroyedStack);
        throw new Error(`Failed to destroy ${deployName}: ${status}`);
    }
    return;
}
exports.destroyStack = destroyStack;
async function getDeployedStack(cfn, stackName) {
    var _a;
    const stack = await getStack(cfn, stackName);
    if (!stack) {
        return undefined;
    }
    if (!stack.StackId) {
        return undefined;
    }
    const template = await readCurrentTemplate(cfn, stackName);
    return {
        stackId: stack.StackId,
        tags: (_a = stack.Tags) !== null && _a !== void 0 ? _a : [],
        template
    };
}
async function readCurrentTemplate(cfn, stackName) {
    try {
        const response = await cfn.getTemplate({ StackName: stackName, TemplateStage: 'Original' }).promise();
        return (response.TemplateBody && serialize_1.deserializeStructure(response.TemplateBody)) || {};
    }
    catch (e) {
        if (e.code === 'ValidationError' && e.message === `Stack with id ${stackName} does not exist`) {
            return {};
        }
        else {
            throw e;
        }
    }
}
exports.readCurrentTemplate = readCurrentTemplate;
async function getStack(cfn, stackName) {
    try {
        const stacks = await cfn.describeStacks({ StackName: stackName }).promise();
        if (!stacks.Stacks) {
            return undefined;
        }
        if (stacks.Stacks.length !== 1) {
            return undefined;
        }
        return stacks.Stacks[0];
    }
    catch (e) {
        if (e.message.includes('does not exist')) {
            return undefined;
        }
        throw e;
    }
}
function compareTags(a, b) {
    if (a.length !== b.length) {
        return false;
    }
    for (const aTag of a) {
        const bTag = b.find(tag => tag.Key === aTag.Key);
        if (!bTag || bTag.Value !== aTag.Value) {
            return false;
        }
    }
    return true;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwbG95LXN0YWNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGVwbG95LXN0YWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsc0NBQXNDO0FBQ3RDLDZCQUE2QjtBQUU3QixzQ0FBMEM7QUFDMUMsd0NBQWlEO0FBQ2pELDRDQUE0RDtBQUM1RCx3REFBOEM7QUFFOUMsMERBQWdKO0FBQ2hKLHlGQUFvRjtBQUNwRixxRUFBaUU7QUFvRGpFLE1BQU0sc0JBQXNCLEdBQUcsRUFBRSxDQUFDO0FBRWxDLG9CQUFvQjtBQUNiLEtBQUssVUFBVSxXQUFXLENBQUMsT0FBMkI7O0lBQzNELElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRTtRQUM5QixNQUFNLElBQUksS0FBSyxDQUFDLGFBQWEsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLCtCQUErQixDQUFDLENBQUM7S0FDeEY7SUFFRCxNQUFNLEdBQUcsR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsa0JBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNuSSxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsVUFBVSxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDO0lBRWpFLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFO1FBQ2xCLGVBQUssQ0FBQyxnSEFBZ0gsQ0FBQyxDQUFDO1FBQ3hILE1BQU0sUUFBUSxHQUFHLE1BQU0sZ0JBQWdCLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3pELE1BQU0sYUFBYSxHQUFHLFdBQVcsT0FBQyxRQUFRLGFBQVIsUUFBUSx1QkFBUixRQUFRLENBQUUsSUFBSSxtQ0FBSSxFQUFFLFFBQUUsT0FBTyxDQUFDLElBQUksbUNBQUksRUFB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QyxDQUFDLE1BQU0sRUFBRTtRQUN6QixPQUFPLEtBQUssQ0FBQztLQUNkO0lBRUQsS0FBSyxNQUFNLElBQUksSUFBSSxDQUFDLEVBQUU7UUFDcEIsTUFBTSxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWpELElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ3RDLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7S0FDRjtJQUVELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGN4YXBpIGZyb20gJ0Bhd3MtY2RrL2N4LWFwaSc7XG5pbXBvcnQgKiBhcyBhd3MgZnJvbSAnYXdzLXNkayc7XG5pbXBvcnQgKiBhcyBjb2xvcnMgZnJvbSAnY29sb3JzL3NhZmUnO1xuaW1wb3J0ICogYXMgdXVpZCBmcm9tICd1dWlkJztcbmltcG9ydCB7IFRhZyB9IGZyb20gXCIuLi9hcGkvY3hhcHAvc3RhY2tzXCI7XG5pbXBvcnQgeyBwcmVwYXJlQXNzZXRzIH0gZnJvbSAnLi4vYXNzZXRzJztcbmltcG9ydCB7IGRlYnVnLCBlcnJvciwgcHJpbnQgfSBmcm9tICcuLi9sb2dnaW5nJztcbmltcG9ydCB7IGRlc2VyaWFsaXplU3RydWN0dXJlLCB0b1lBTUwgfSBmcm9tICcuLi9zZXJpYWxpemUnO1xuaW1wb3J0IHsgTW9kZSB9IGZyb20gJy4vYXdzLWF1dGgvY3JlZGVudGlhbHMnO1xuaW1wb3J0IHsgVG9vbGtpdEluZm8gfSBmcm9tICcuL3Rvb2xraXQtaW5mbyc7XG5pbXBvcnQgeyBjaGFuZ2VTZXRIYXNOb0NoYW5nZXMsIGRlc2NyaWJlU3RhY2ssIHN0YWNrRXhpc3RzLCBzdGFja0ZhaWxlZENyZWF0aW5nLCB3YWl0Rm9yQ2hhbmdlU2V0LCB3YWl0Rm9yU3RhY2sgIH0gZnJvbSAnLi91dGlsL2Nsb3VkZm9ybWF0aW9uJztcbmltcG9ydCB7IFN0YWNrQWN0aXZpdHlNb25pdG9yIH0gZnJvbSAnLi91dGlsL2Nsb3VkZm9ybWF0aW9uL3N0YWNrLWFjdGl2aXR5LW1vbml0b3InO1xuaW1wb3J0IHsgU3RhY2tTdGF0dXMgfSBmcm9tICcuL3V0aWwvY2xvdWRmb3JtYXRpb24vc3RhY2stc3RhdHVzJztcbmltcG9ydCB7IElTREsgfSBmcm9tICcuL3V0aWwvc2RrJztcblxudHlwZSBUZW1wbGF0ZUJvZHlQYXJhbWV0ZXIgPSB7XG4gIFRlbXBsYXRlQm9keT86IHN0cmluZ1xuICBUZW1wbGF0ZVVSTD86IHN0cmluZ1xufTtcblxuLyoqIEBleHBlcmltZW50YWwgKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGVwbG95U3RhY2tSZXN1bHQge1xuICByZWFkb25seSBub09wOiBib29sZWFuO1xuICByZWFkb25seSBvdXRwdXRzOiB7IFtuYW1lOiBzdHJpbmddOiBzdHJpbmcgfTtcbiAgcmVhZG9ubHkgc3RhY2tBcm46IHN0cmluZztcbiAgcmVhZG9ubHkgc3RhY2tBcnRpZmFjdDogY3hhcGkuQ2xvdWRGb3JtYXRpb25TdGFja0FydGlmYWN0O1xufVxuXG4vKiogQGV4cGVyaW1lbnRhbCAqL1xuZXhwb3J0IGludGVyZmFjZSBEZXBsb3lTdGFja09wdGlvbnMge1xuICBzdGFjazogY3hhcGkuQ2xvdWRGb3JtYXRpb25TdGFja0FydGlmYWN0O1xuICBzZGs6IElTREs7XG4gIHRvb2xraXRJbmZvPzogVG9vbGtpdEluZm87XG4gIHJvbGVBcm4/OiBzdHJpbmc7XG4gIG5vdGlmaWNhdGlvbkFybnM/OiBzdHJpbmdbXTtcbiAgZGVwbG95TmFtZT86IHN0cmluZztcbiAgcXVpZXQ/OiBib29sZWFuO1xuICByZXVzZUFzc2V0cz86IHN0cmluZ1tdO1xuICB0YWdzPzogVGFnW107XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZXhlY3V0ZSB0aGUgY2hhbmdlc2V0IG9yIGxlYXZlIGl0IGluIHJldmlldy5cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgZXhlY3V0ZT86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoZSBjb2xsZWN0aW9uIG9mIGV4dHJhIHBhcmFtZXRlcnNcbiAgICogKGluIGFkZGl0aW9uIHRvIHRob3NlIHVzZWQgZm9yIGFzc2V0cylcbiAgICogdG8gcGFzcyB0byB0aGUgZGVwbG95ZWQgdGVtcGxhdGUuXG4gICAqIE5vdGUgdGhhdCBwYXJhbWV0ZXJzIHdpdGggYHVuZGVmaW5lZGAgb3IgZW1wdHkgdmFsdWVzIHdpbGwgYmUgaWdub3JlZCxcbiAgICogYW5kIG5vdCBwYXNzZWQgdG8gdGhlIHRlbXBsYXRlLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIG5vIGFkZGl0aW9uYWwgcGFyYW1ldGVycyB3aWxsIGJlIHBhc3NlZCB0byB0aGUgdGVtcGxhdGVcbiAgICovXG4gIHBhcmFtZXRlcnM/OiB7IFtuYW1lOiBzdHJpbmddOiBzdHJpbmcgfCB1bmRlZmluZWQgfTtcblxuICAvKipcbiAgICogRGVwbG95IGV2ZW4gaWYgdGhlIGRlcGxveWVkIHRlbXBsYXRlIGlzIGlkZW50aWNhbCB0byB0aGUgb25lIHdlIGFyZSBhYm91dCB0byBkZXBsb3kuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBmb3JjZT86IGJvb2xlYW47XG59XG5cbmNvbnN0IExBUkdFX1RFTVBMQVRFX1NJWkVfS0IgPSA1MDtcblxuLyoqIEBleHBlcmltZW50YWwgKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZXBsb3lTdGFjayhvcHRpb25zOiBEZXBsb3lTdGFja09wdGlvbnMpOiBQcm9taXNlPERlcGxveVN0YWNrUmVzdWx0PiB7XG4gIGlmICghb3B0aW9ucy5zdGFjay5lbnZpcm9ubWVudCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgVGhlIHN0YWNrICR7b3B0aW9ucy5zdGFjay5kaXNwbGF5TmFtZX0gZG9lcyBub3QgaGF2ZSBhbiBlbnZpcm9ubWVudGApO1xuICB9XG5cbiAgY29uc3QgY2ZuID0gYXdhaXQgb3B0aW9ucy5zZGsuY2xvdWRGb3JtYXRpb24ob3B0aW9ucy5zdGFjay5lbnZpcm9ubWVudC5hY2NvdW50LCBvcHRpb25zLnN0YWNrLmVudmlyb25tZW50LnJlZ2lvbiwgTW9kZS5Gb3JXcml0aW5nKTtcbiAgY29uc3QgZGVwbG95TmFtZSA9IG9wdGlvbnMuZGVwbG95TmFtZSB8fCBvcHRpb25zLnN0YWNrLnN0YWNrTmFtZTtcblxuICBpZiAoIW9wdGlvbnMuZm9yY2UpIHtcbiAgICBkZWJ1ZyhgY2hlY2tpbmcgaWYgd2UgY2FuIHNraXAgdGhpcyBzdGFjayBiYXNlZCBvbiB0aGUgY3VycmVudGx5IGRlcGxveWVkIHRlbXBsYXRlIGFuZCB0YWdzICh1c2UgLS1mb3JjZSB0byBvdmVycmlkZSlgKTtcbiAgICBjb25zdCBkZXBsb3llZCA9IGF3YWl0IGdldERlcGxveWVkU3RhY2soY2ZuLCBkZXBsb3lOYW1lKTtcbiAgICBjb25zdCB0YWdzSWRlbnRpY2FsID0gY29tcGFyZVRhZ3MoZGVwbG95ZWQ/LnRhZ3MgPz8gW10sIG9wdGlvbnMudGFncyA/PyBbXSk7XG4gICAgaWYgKGRlcGxveWVkICYmIEpTT04uc3RyaW5naWZ5KG9wdGlvbnMuc3RhY2sudGVtcGxhdGUpID09PSBKU09OLnN0cmluZ2lmeShkZXBsb3llZC50ZW1wbGF0ZSkgJiYgdGFnc0lkZW50aWNhbCkge1xuICAgICAgZGVidWcoYCR7ZGVwbG95TmFtZX06IG5vIGNoYW5nZSBpbiB0ZW1wbGF0ZSBhbmQgdGFncywgc2tpcHBpbmcgKHVzZSAtLWZvcmNlIHRvIG92ZXJyaWRlKWApO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbm9PcDogdHJ1ZSxcbiAgICAgICAgb3V0cHV0czogYXdhaXQgZ2V0U3RhY2tPdXRwdXRzKGNmbiwgZGVwbG95TmFtZSksXG4gICAgICAgIHN0YWNrQXJuOiBkZXBsb3llZC5zdGFja0lkLFxuICAgICAgICBzdGFja0FydGlmYWN0OiBvcHRpb25zLnN0YWNrXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWJ1ZyhgJHtkZXBsb3lOYW1lfTogdGVtcGxhdGUgY2hhbmdlZCwgZGVwbG95aW5nLi4uYCk7XG4gICAgfVxuICB9XG5cbiAgLy8gYmFpbCBvdXQgaWYgdGhlIGN1cnJlbnQgdGVtcGxhdGUgaXMgZXhhY3RseSB0aGUgc2FtZSBhcyB0aGUgb25lIHdlIGFyZSBhYm91dCB0byBkZXBsb3lcbiAgLy8gaW4gY2RrLWxhbmQsIHRoaXMgbWVhbnMgbm90aGluZyBjaGFuZ2VkIGJlY2F1c2UgYXNzZXRzIChhbmQgdGhlcmVmb3JlIG5lc3RlZCBzdGFja3MpIGFyZSBpbW11dGFibGUuXG5cbiAgY29uc3QgcGFyYW1zID0gYXdhaXQgcHJlcGFyZUFzc2V0cyhvcHRpb25zLnN0YWNrLCBvcHRpb25zLnRvb2xraXRJbmZvLCBvcHRpb25zLnJldXNlQXNzZXRzKTtcblxuICAvLyBhZGQgcGFzc2VkIENsb3VkRm9ybWF0aW9uIHBhcmFtZXRlcnNcbiAgZm9yIChjb25zdCBbcGFyYW1OYW1lLCBwYXJhbVZhbHVlXSBvZiBPYmplY3QuZW50cmllcygob3B0aW9ucy5wYXJhbWV0ZXJzIHx8IHt9KSkpIHtcbiAgICBpZiAocGFyYW1WYWx1ZSkge1xuICAgICAgcGFyYW1zLnB1c2goe1xuICAgICAgICBQYXJhbWV0ZXJLZXk6IHBhcmFtTmFtZSxcbiAgICAgICAgUGFyYW1ldGVyVmFsdWU6IHBhcmFtVmFsdWUsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBleGVjdXRpb25JZCA9IHV1aWQudjQoKTtcblxuICBjb25zdCBib2R5UGFyYW1ldGVyID0gYXdhaXQgbWFrZUJvZHlQYXJhbWV0ZXIob3B0aW9ucy5zdGFjaywgb3B0aW9ucy50b29sa2l0SW5mbyk7XG5cbiAgaWYgKGF3YWl0IHN0YWNrRmFpbGVkQ3JlYXRpbmcoY2ZuLCBkZXBsb3lOYW1lKSkge1xuICAgIGRlYnVnKGBGb3VuZCBleGlzdGluZyBzdGFjayAke2RlcGxveU5hbWV9IHRoYXQgaGFkIHByZXZpb3VzbHkgZmFpbGVkIGNyZWF0aW9uLiBEZWxldGluZyBpdCBiZWZvcmUgYXR0ZW1wdGluZyB0byByZS1jcmVhdGUgaXQuYCk7XG4gICAgYXdhaXQgY2ZuLmRlbGV0ZVN0YWNrKHsgU3RhY2tOYW1lOiBkZXBsb3lOYW1lIH0pLnByb21pc2UoKTtcbiAgICBjb25zdCBkZWxldGVkU3RhY2sgPSBhd2FpdCB3YWl0Rm9yU3RhY2soY2ZuLCBkZXBsb3lOYW1lLCBmYWxzZSk7XG4gICAgaWYgKGRlbGV0ZWRTdGFjayAmJiBkZWxldGVkU3RhY2suU3RhY2tTdGF0dXMgIT09ICdERUxFVEVfQ09NUExFVEUnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCBkZWxldGluZyBzdGFjayAke2RlcGxveU5hbWV9IHRoYXQgaGFkIHByZXZpb3VzbHkgZmFpbGVkIGNyZWF0aW9uIChjdXJyZW50IHN0YXRlOiAke2RlbGV0ZWRTdGFjay5TdGFja1N0YXR1c30pYCk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgdXBkYXRlID0gYXdhaXQgc3RhY2tFeGlzdHMoY2ZuLCBkZXBsb3lOYW1lKTtcblxuICBjb25zdCBjaGFuZ2VTZXROYW1lID0gYENESy0ke2V4ZWN1dGlvbklkfWA7XG4gIGRlYnVnKGBBdHRlbXB0aW5nIHRvIGNyZWF0ZSBDaGFuZ2VTZXQgJHtjaGFuZ2VTZXROYW1lfSB0byAke3VwZGF0ZSA/ICd1cGRhdGUnIDogJ2NyZWF0ZSd9IHN0YWNrICR7ZGVwbG95TmFtZX1gKTtcbiAgcHJpbnQoYCVzOiBjcmVhdGluZyBDbG91ZEZvcm1hdGlvbiBjaGFuZ2VzZXQuLi5gLCBjb2xvcnMuYm9sZChkZXBsb3lOYW1lKSk7XG4gIGNvbnN0IGNoYW5nZVNldCA9IGF3YWl0IGNmbi5jcmVhdGVDaGFuZ2VTZXQoe1xuICAgIFN0YWNrTmFtZTogZGVwbG95TmFtZSxcbiAgICBDaGFuZ2VTZXROYW1lOiBjaGFuZ2VTZXROYW1lLFxuICAgIENoYW5nZVNldFR5cGU6IHVwZGF0ZSA/ICdVUERBVEUnIDogJ0NSRUFURScsXG4gICAgRGVzY3JpcHRpb246IGBDREsgQ2hhbmdlc2V0IGZvciBleGVjdXRpb24gJHtleGVjdXRpb25JZH1gLFxuICAgIFRlbXBsYXRlQm9keTogYm9keVBhcmFtZXRlci5UZW1wbGF0ZUJvZHksXG4gICAgVGVtcGxhdGVVUkw6IGJvZHlQYXJhbWV0ZXIuVGVtcGxhdGVVUkwsXG4gICAgUGFyYW1ldGVyczogcGFyYW1zLFxuICAgIFJvbGVBUk46IG9wdGlvbnMucm9sZUFybixcbiAgICBOb3RpZmljYXRpb25BUk5zOiBvcHRpb25zLm5vdGlmaWNhdGlvbkFybnMsXG4gICAgQ2FwYWJpbGl0aWVzOiBbICdDQVBBQklMSVRZX0lBTScsICdDQVBBQklMSVRZX05BTUVEX0lBTScsICdDQVBBQklMSVRZX0FVVE9fRVhQQU5EJyBdLFxuICAgIFRhZ3M6IG9wdGlvbnMudGFnc1xuICB9KS5wcm9taXNlKCk7XG4gIGRlYnVnKCdJbml0aWF0ZWQgY3JlYXRpb24gb2YgY2hhbmdlc2V0OiAlczsgd2FpdGluZyBmb3IgaXQgdG8gZmluaXNoIGNyZWF0aW5nLi4uJywgY2hhbmdlU2V0LklkKTtcbiAgY29uc3QgY2hhbmdlU2V0RGVzY3JpcHRpb24gPSBhd2FpdCB3YWl0Rm9yQ2hhbmdlU2V0KGNmbiwgZGVwbG95TmFtZSwgY2hhbmdlU2V0TmFtZSk7XG5cbiAgaWYgKGNoYW5nZVNldEhhc05vQ2hhbmdlcyhjaGFuZ2VTZXREZXNjcmlwdGlvbikpIHtcbiAgICBkZWJ1ZygnTm8gY2hhbmdlcyBhcmUgdG8gYmUgcGVyZm9ybWVkIG9uICVzLicsIGRlcGxveU5hbWUpO1xuICAgIGF3YWl0IGNmbi5kZWxldGVDaGFuZ2VTZXQoeyBTdGFja05hbWU6IGRlcGxveU5hbWUsIENoYW5nZVNldE5hbWU6IGNoYW5nZVNldE5hbWUgfSkucHJvbWlzZSgpO1xuICAgIHJldHVybiB7IG5vT3A6IHRydWUsIG91dHB1dHM6IGF3YWl0IGdldFN0YWNrT3V0cHV0cyhjZm4sIGRlcGxveU5hbWUpLCBzdGFja0FybjogY2hhbmdlU2V0LlN0YWNrSWQhLCBzdGFja0FydGlmYWN0OiBvcHRpb25zLnN0YWNrIH07XG4gIH1cblxuICBjb25zdCBleGVjdXRlID0gb3B0aW9ucy5leGVjdXRlID09PSB1bmRlZmluZWQgPyB0cnVlIDogb3B0aW9ucy5leGVjdXRlO1xuICBpZiAoZXhlY3V0ZSkge1xuICAgIGRlYnVnKCdJbml0aWF0aW5nIGV4ZWN1dGlvbiBvZiBjaGFuZ2VzZXQgJXMgb24gc3RhY2sgJXMnLCBjaGFuZ2VTZXROYW1lLCBkZXBsb3lOYW1lKTtcbiAgICBhd2FpdCBjZm4uZXhlY3V0ZUNoYW5nZVNldCh7U3RhY2tOYW1lOiBkZXBsb3lOYW1lLCBDaGFuZ2VTZXROYW1lOiBjaGFuZ2VTZXROYW1lfSkucHJvbWlzZSgpO1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtbGluZS1sZW5ndGhcbiAgICBjb25zdCBtb25pdG9yID0gb3B0aW9ucy5xdWlldCA/IHVuZGVmaW5lZCA6IG5ldyBTdGFja0FjdGl2aXR5TW9uaXRvcihjZm4sIGRlcGxveU5hbWUsIG9wdGlvbnMuc3RhY2ssIChjaGFuZ2VTZXREZXNjcmlwdGlvbi5DaGFuZ2VzIHx8IFtdKS5sZW5ndGgpLnN0YXJ0KCk7XG4gICAgZGVidWcoJ0V4ZWN1dGlvbiBvZiBjaGFuZ2VzZXQgJXMgb24gc3RhY2sgJXMgaGFzIHN0YXJ0ZWQ7IHdhaXRpbmcgZm9yIHRoZSB1cGRhdGUgdG8gY29tcGxldGUuLi4nLCBjaGFuZ2VTZXROYW1lLCBkZXBsb3lOYW1lKTtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgd2FpdEZvclN0YWNrKGNmbiwgZGVwbG95TmFtZSk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGF3YWl0IG1vbml0b3I/LnN0b3AoKTtcbiAgICB9XG4gICAgZGVidWcoJ1N0YWNrICVzIGhhcyBjb21wbGV0ZWQgdXBkYXRpbmcnLCBkZXBsb3lOYW1lKTtcbiAgfSBlbHNlIHtcbiAgICBwcmludChgQ2hhbmdlc2V0ICVzIGNyZWF0ZWQgYW5kIHdhaXRpbmcgaW4gcmV2aWV3IGZvciBtYW51YWwgZXhlY3V0aW9uICgtLW5vLWV4ZWN1dGUpYCwgY2hhbmdlU2V0TmFtZSk7XG4gIH1cbiAgcmV0dXJuIHsgbm9PcDogZmFsc2UsIG91dHB1dHM6IGF3YWl0IGdldFN0YWNrT3V0cHV0cyhjZm4sIGRlcGxveU5hbWUpLCBzdGFja0FybjogY2hhbmdlU2V0LlN0YWNrSWQhLCBzdGFja0FydGlmYWN0OiBvcHRpb25zLnN0YWNrIH07XG59XG5cbi8qKiBAZXhwZXJpbWVudGFsICovXG5hc3luYyBmdW5jdGlvbiBnZXRTdGFja091dHB1dHMoY2ZuOiBhd3MuQ2xvdWRGb3JtYXRpb24sIHN0YWNrTmFtZTogc3RyaW5nKTogUHJvbWlzZTx7IFtuYW1lOiBzdHJpbmddOiBzdHJpbmcgfT4ge1xuICBjb25zdCBkZXNjcmlwdGlvbiA9IGF3YWl0IGRlc2NyaWJlU3RhY2soY2ZuLCBzdGFja05hbWUpO1xuICBjb25zdCByZXN1bHQ6IHsgW25hbWU6IHN0cmluZ106IHN0cmluZyB9ID0ge307XG4gIGlmIChkZXNjcmlwdGlvbiAmJiBkZXNjcmlwdGlvbi5PdXRwdXRzKSB7XG4gICAgZGVzY3JpcHRpb24uT3V0cHV0cy5mb3JFYWNoKG91dHB1dCA9PiB7XG4gICAgICByZXN1bHRbb3V0cHV0Lk91dHB1dEtleSFdID0gb3V0cHV0Lk91dHB1dFZhbHVlITtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFByZXBhcmVzIHRoZSBib2R5IHBhcmFtZXRlciBmb3IgK0NyZWF0ZUNoYW5nZVNldCssIHB1dHRpbmcgdGhlIGdlbmVyYXRlZCBDbG91ZEZvcm1hdGlvbiB0ZW1wbGF0ZSBpbiB0aGUgdG9vbGtpdC1wcm92aWRlZFxuICogUzMgYnVja2V0IGlmIHByZXNlbnQsIG90aGVyd2lzZSB1c2luZyBpbi1saW5lIHRlbXBsYXRlIGFyZ3VtZW50LiBJZiBubyArVG9vbGtpdEluZm8rIGlzIHByb3ZpZGVkIGFuZCB0aGUgdGVtcGxhdGUgaXNcbiAqIGxhcmdlciB0aGFuIDUwLDIwMCBieXRlcywgYW4gK0Vycm9yKyB3aWxsIGJlIHJhaXNlZC5cbiAqXG4gKiBAcGFyYW0gc3RhY2sgICAgIHRoZSBzeW50aGVzaXplZCBzdGFjayB0aGF0IHByb3ZpZGVzIHRoZSBDbG91ZEZvcm1hdGlvbiB0ZW1wbGF0ZVxuICogQHBhcmFtIHNkayAgICAgYW4gQVdTIFNESyB0byB1c2Ugd2hlbiBpbnRlcmFjdGluZyB3aXRoIFMzXG4gKiBAcGFyYW0gdG9vbGtpdEluZm8gaW5mb3JtYXRpb24gYWJvdXQgdGhlIHRvb2xraXQgc3RhY2tcbiAqL1xuYXN5bmMgZnVuY3Rpb24gbWFrZUJvZHlQYXJhbWV0ZXIoc3RhY2s6IGN4YXBpLkNsb3VkRm9ybWF0aW9uU3RhY2tBcnRpZmFjdCwgdG9vbGtpdEluZm8/OiBUb29sa2l0SW5mbyk6IFByb21pc2U8VGVtcGxhdGVCb2R5UGFyYW1ldGVyPiB7XG4gIGNvbnN0IHRlbXBsYXRlSnNvbiA9IHRvWUFNTChzdGFjay50ZW1wbGF0ZSk7XG4gIGlmICh0b29sa2l0SW5mbykge1xuICAgIGNvbnN0IHMzS2V5UHJlZml4ID0gYGNkay8ke3N0YWNrLmlkfS9gO1xuICAgIGNvbnN0IHMzS2V5U3VmZml4ID0gJy55bWwnO1xuICAgIGNvbnN0IHsga2V5IH0gPSBhd2FpdCB0b29sa2l0SW5mby51cGxvYWRJZkNoYW5nZWQodGVtcGxhdGVKc29uLCB7XG4gICAgICBzM0tleVByZWZpeCwgczNLZXlTdWZmaXgsIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24veC15YW1sJ1xuICAgIH0pO1xuICAgIGNvbnN0IHRlbXBsYXRlVVJMID0gYCR7dG9vbGtpdEluZm8uYnVja2V0VXJsfS8ke2tleX1gO1xuICAgIGRlYnVnKCdTdG9yZWQgdGVtcGxhdGUgaW4gUzMgYXQ6JywgdGVtcGxhdGVVUkwpO1xuICAgIHJldHVybiB7IFRlbXBsYXRlVVJMOiB0ZW1wbGF0ZVVSTCB9O1xuICB9IGVsc2UgaWYgKHRlbXBsYXRlSnNvbi5sZW5ndGggPiBMQVJHRV9URU1QTEFURV9TSVpFX0tCICogMTAyNCkge1xuICAgIGVycm9yKFxuICAgICAgYFRoZSB0ZW1wbGF0ZSBmb3Igc3RhY2sgXCIke3N0YWNrLmRpc3BsYXlOYW1lfVwiIGlzICR7TWF0aC5yb3VuZCh0ZW1wbGF0ZUpzb24ubGVuZ3RoIC8gMTAyNCl9S2lCLiBgICtcbiAgICAgIGBUZW1wbGF0ZXMgbGFyZ2VyIHRoYW4gJHtMQVJHRV9URU1QTEFURV9TSVpFX0tCfUtpQiBtdXN0IGJlIHVwbG9hZGVkIHRvIFMzLlxcbmAgK1xuICAgICAgJ1J1biB0aGUgZm9sbG93aW5nIGNvbW1hbmQgaW4gb3JkZXIgdG8gc2V0dXAgYW4gUzMgYnVja2V0IGluIHRoaXMgZW52aXJvbm1lbnQsIGFuZCB0aGVuIHJlLWRlcGxveTpcXG5cXG4nLFxuICAgICAgY29sb3JzLmJsdWUoYFxcdCQgY2RrIGJvb3RzdHJhcCAke3N0YWNrLmVudmlyb25tZW50IS5uYW1lfVxcbmApKTtcblxuICAgIHRocm93IG5ldyBFcnJvcihgVGVtcGxhdGUgdG9vIGxhcmdlIHRvIGRlcGxveSAoXCJjZGsgYm9vdHN0cmFwXCIgaXMgcmVxdWlyZWQpYCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHsgVGVtcGxhdGVCb2R5OiB0ZW1wbGF0ZUpzb24gfTtcbiAgfVxufVxuXG4vKiogQGV4cGVyaW1lbnRhbCAqL1xuZXhwb3J0IGludGVyZmFjZSBEZXN0cm95U3RhY2tPcHRpb25zIHtcbiAgc3RhY2s6IGN4YXBpLkNsb3VkRm9ybWF0aW9uU3RhY2tBcnRpZmFjdDtcbiAgc2RrOiBJU0RLO1xuICByb2xlQXJuPzogc3RyaW5nO1xuICBkZXBsb3lOYW1lPzogc3RyaW5nO1xuICBxdWlldD86IGJvb2xlYW47XG59XG5cbi8qKiBAZXhwZXJpbWVudGFsICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVzdHJveVN0YWNrKG9wdGlvbnM6IERlc3Ryb3lTdGFja09wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zLnN0YWNrLmVudmlyb25tZW50KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgc3RhY2sgJHtvcHRpb25zLnN0YWNrLmRpc3BsYXlOYW1lfSBkb2VzIG5vdCBoYXZlIGFuIGVudmlyb25tZW50YCk7XG4gIH1cblxuICBjb25zdCBkZXBsb3lOYW1lID0gb3B0aW9ucy5kZXBsb3lOYW1lIHx8IG9wdGlvbnMuc3RhY2suc3RhY2tOYW1lO1xuICBjb25zdCBjZm4gPSBhd2FpdCBvcHRpb25zLnNkay5jbG91ZEZvcm1hdGlvbihvcHRpb25zLnN0YWNrLmVudmlyb25tZW50LmFjY291bnQsIG9wdGlvbnMuc3RhY2suZW52aXJvbm1lbnQucmVnaW9uLCBNb2RlLkZvcldyaXRpbmcpO1xuICBpZiAoIWF3YWl0IHN0YWNrRXhpc3RzKGNmbiwgZGVwbG95TmFtZSkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgbW9uaXRvciA9IG9wdGlvbnMucXVpZXQgPyB1bmRlZmluZWQgOiBuZXcgU3RhY2tBY3Rpdml0eU1vbml0b3IoY2ZuLCBkZXBsb3lOYW1lLCBvcHRpb25zLnN0YWNrKS5zdGFydCgpO1xuICBhd2FpdCBjZm4uZGVsZXRlU3RhY2soeyBTdGFja05hbWU6IGRlcGxveU5hbWUsIFJvbGVBUk46IG9wdGlvbnMucm9sZUFybiB9KS5wcm9taXNlKCkuY2F0Y2goZSA9PiB7IHRocm93IGU7IH0pO1xuICBjb25zdCBkZXN0cm95ZWRTdGFjayA9IGF3YWl0IHdhaXRGb3JTdGFjayhjZm4sIGRlcGxveU5hbWUsIGZhbHNlKTtcbiAgaWYgKG1vbml0b3IpIHsgYXdhaXQgbW9uaXRvci5zdG9wKCk7IH1cbiAgaWYgKGRlc3Ryb3llZFN0YWNrICYmIGRlc3Ryb3llZFN0YWNrLlN0YWNrU3RhdHVzICE9PSAnREVMRVRFX0NPTVBMRVRFJykge1xuICAgIGNvbnN0IHN0YXR1cyA9IFN0YWNrU3RhdHVzLmZyb21TdGFja0Rlc2NyaXB0aW9uKGRlc3Ryb3llZFN0YWNrKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBkZXN0cm95ICR7ZGVwbG95TmFtZX06ICR7c3RhdHVzfWApO1xuICB9XG4gIHJldHVybjtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0RGVwbG95ZWRTdGFjayhjZm46IGF3cy5DbG91ZEZvcm1hdGlvbiwgc3RhY2tOYW1lOiBzdHJpbmcpOiBQcm9taXNlPHsgc3RhY2tJZDogc3RyaW5nLCB0ZW1wbGF0ZTogYW55LCB0YWdzOiBUYWdbXSB9IHwgdW5kZWZpbmVkPiB7XG4gIGNvbnN0IHN0YWNrID0gYXdhaXQgZ2V0U3RhY2soY2ZuLCBzdGFja05hbWUpO1xuICBpZiAoIXN0YWNrKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICghc3RhY2suU3RhY2tJZCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBjb25zdCB0ZW1wbGF0ZSA9IGF3YWl0IHJlYWRDdXJyZW50VGVtcGxhdGUoY2ZuLCBzdGFja05hbWUpO1xuICByZXR1cm4ge1xuICAgIHN0YWNrSWQ6IHN0YWNrLlN0YWNrSWQsXG4gICAgdGFnczogc3RhY2suVGFncyA/PyBbXSxcbiAgICB0ZW1wbGF0ZVxuICB9O1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVhZEN1cnJlbnRUZW1wbGF0ZShjZm46IGF3cy5DbG91ZEZvcm1hdGlvbiwgc3RhY2tOYW1lOiBzdHJpbmcpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNmbi5nZXRUZW1wbGF0ZSh7IFN0YWNrTmFtZTogc3RhY2tOYW1lLCBUZW1wbGF0ZVN0YWdlOiAnT3JpZ2luYWwnIH0pLnByb21pc2UoKTtcbiAgICByZXR1cm4gKHJlc3BvbnNlLlRlbXBsYXRlQm9keSAmJiBkZXNlcmlhbGl6ZVN0cnVjdHVyZShyZXNwb25zZS5UZW1wbGF0ZUJvZHkpKSB8fCB7fTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlLmNvZGUgPT09ICdWYWxpZGF0aW9uRXJyb3InICYmIGUubWVzc2FnZSA9PT0gYFN0YWNrIHdpdGggaWQgJHtzdGFja05hbWV9IGRvZXMgbm90IGV4aXN0YCkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRTdGFjayhjZm46IGF3cy5DbG91ZEZvcm1hdGlvbiwgc3RhY2tOYW1lOiBzdHJpbmcpOiBQcm9taXNlPGF3cy5DbG91ZEZvcm1hdGlvbi5TdGFjayB8IHVuZGVmaW5lZD4ge1xuICB0cnkge1xuICAgIGNvbnN0IHN0YWNrcyA9IGF3YWl0IGNmbi5kZXNjcmliZVN0YWNrcyh7IFN0YWNrTmFtZTogc3RhY2tOYW1lIH0pLnByb21pc2UoKTtcbiAgICBpZiAoIXN0YWNrcy5TdGFja3MpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChzdGFja3MuU3RhY2tzLmxlbmd0aCAhPT0gMSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RhY2tzLlN0YWNrc1swXTtcblxuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUubWVzc2FnZS5pbmNsdWRlcygnZG9lcyBub3QgZXhpc3QnKSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdGhyb3cgZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb21wYXJlVGFncyhhOiBUYWdbXSwgYjogVGFnW10pOiBib29sZWFuIHtcbiAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZvciAoY29uc3QgYVRhZyBvZiBhKSB7XG4gICAgY29uc3QgYlRhZyA9IGIuZmluZCh0YWcgPT4gdGFnLktleSA9PT0gYVRhZy5LZXkpO1xuXG4gICAgaWYgKCFiVGFnIHx8IGJUYWcuVmFsdWUgIT09IGFUYWcuVmFsdWUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cbiJdfQ==