"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const stacks_1 = require("../lib/api/cxapp/stacks");
const sdk_1 = require("../lib/api/util/sdk");
const cdk_toolkit_1 = require("../lib/cdk-toolkit");
describe('deploy', () => {
    describe('makes correct CloudFormation calls', () => {
        test('without options', () => {
            // GIVEN
            const toolkit = new cdk_toolkit_1.CdkToolkit({
                appStacks: new TestAppStacks(),
                provisioner: new TestProvisioner({
                    'Test-Stack-A': { Foo: 'Bar' },
                    'Test-Stack-B': { Baz: 'Zinga!' },
                }),
            });
            // WHEN
            toolkit.deploy({ stackNames: ['Test-Stack-A', 'Test-Stack-B'], sdk: new sdk_1.SDK() });
        });
        test('with sns notification arns', () => {
            // GIVEN
            const notificationArns = ['arn:aws:sns:::cfn-notifications', 'arn:aws:sns:::my-cool-topic'];
            const toolkit = new cdk_toolkit_1.CdkToolkit({
                appStacks: new TestAppStacks(),
                provisioner: new TestProvisioner({
                    'Test-Stack-A': { Foo: 'Bar' },
                    'Test-Stack-B': { Baz: 'Zinga!' },
                }, notificationArns),
            });
            // WHEN
            toolkit.deploy({
                stackNames: ['Test-Stack-A', 'Test-Stack-B'],
                notificationArns,
                sdk: new sdk_1.SDK()
            });
        });
    });
});
class MockStack {
    constructor(stackName, template = { Resources: { TempalteName: stackName } }, templateFile = `fake/stack/${stackName}.json`, assets = [], parameters = {}, environment = { name: 'MockEnv', account: '123456789012', region: 'bermuda-triangle-1' }) {
        this.stackName = stackName;
        this.template = template;
        this.templateFile = templateFile;
        this.assets = assets;
        this.parameters = parameters;
        this.environment = environment;
    }
}
class TestAppStacks extends stacks_1.AppStacks {
    constructor() {
        super(undefined);
    }
    getTagsFromStackMetadata(stack) {
        switch (stack.stackName) {
            case TestAppStacks.MOCK_STACK_A.stackName:
                return [{ Key: 'Foo', Value: 'Bar' }];
            case TestAppStacks.MOCK_STACK_B.stackName:
                return [{ Key: 'Baz', Value: 'Zinga!' }];
            default:
                throw new Error(`Not an expected mock stack: ${stack.stackName}`);
        }
    }
    selectStacks(selectors) {
        expect(selectors).toEqual(['Test-Stack-A', 'Test-Stack-B']);
        return Promise.resolve([
            // Cheating the type system here (intentionally, so we have to stub less!)
            TestAppStacks.MOCK_STACK_A,
            TestAppStacks.MOCK_STACK_B,
        ]);
    }
    processMetadata(stacks) {
        stacks.forEach(stack => expect([TestAppStacks.MOCK_STACK_A, TestAppStacks.MOCK_STACK_B]).toContain(stack));
    }
    listStacks() {
        throw new Error('Not Implemented');
    }
    synthesizeStack() {
        throw new Error('Not Implemented');
    }
    synthesizeStacks() {
        throw new Error('Not Implemented');
    }
}
TestAppStacks.MOCK_STACK_A = new MockStack('Test-Stack-A');
TestAppStacks.MOCK_STACK_B = new MockStack('Test-Stack-B');
class TestProvisioner {
    constructor(expectedTags = {}, expectedNotificationArns) {
        this.expectedTags = {};
        for (const [stackName, tags] of Object.entries(expectedTags)) {
            this.expectedTags[stackName] =
                Object.entries(tags).map(([Key, Value]) => ({ Key, Value }))
                    .sort((l, r) => l.Key.localeCompare(r.Key));
        }
        if (expectedNotificationArns) {
            this.expectedNotificationArns = expectedNotificationArns;
        }
    }
    deployStack(options) {
        expect([TestAppStacks.MOCK_STACK_A.stackName, TestAppStacks.MOCK_STACK_B.stackName])
            .toContain(options.stack.stackName);
        expect(options.tags).toEqual(this.expectedTags[options.stack.stackName]);
        expect(options.notificationArns).toEqual(this.expectedNotificationArns);
        return Promise.resolve({
            stackArn: `arn:aws:cloudformation:::stack/${options.stack.stackName}/MockedOut`,
            noOp: false,
            outputs: { StackName: options.stack.stackName },
            stackArtifact: options.stack,
        });
    }
    readCurrentTemplate(stack) {
        switch (stack.stackName) {
            case TestAppStacks.MOCK_STACK_A.stackName:
                return Promise.resolve({});
            case TestAppStacks.MOCK_STACK_B.stackName:
                return Promise.resolve({});
            default:
                return Promise.reject(`Not an expected mock stack: ${stack.stackName}`);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,