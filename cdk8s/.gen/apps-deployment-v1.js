"use strict";
// generated by cdk8s
Object.defineProperty(exports, "__esModule", { value: true });
const cdk8s_1 = require("cdk8s");
/**
 * Deployment enables declarative updates for Pods and ReplicaSets.
 */
class Deployment extends cdk8s_1.ApiObject {
    constructor(scope, ns, options) {
        super(scope, ns, Object.assign(Object.assign({}, options), { kind: 'Deployment', apiVersion: 'apps/v1' }));
    }
}
exports.Deployment = Deployment;
class IntOrString {
    static fromString(value) {
        return new IntOrString(value);
    }
    static fromNumber(value) {
        return new IntOrString(value);
    }
    constructor(value) {
        Object.defineProperty(this, 'resolve', { value: () => value });
    }
}
exports.IntOrString = IntOrString;
class Quantity {
    static fromString(value) {
        return new Quantity(value);
    }
    static fromNumber(value) {
        return new Quantity(value);
    }
    constructor(value) {
        Object.defineProperty(this, 'resolve', { value: () => value });
    }
}
exports.Quantity = Quantity;
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"apps-deployment-v1.js","sourceRoot":"","sources":["apps-deployment-v1.ts"],"names":[],"mappings":";AAAA,qBAAqB;;AAErB,iCAAkC;AAIlC;;GAEG;AACH,MAAa,UAAW,SAAQ,iBAAS;IACvC,YAAmB,KAAgB,EAAE,EAAU,EAAE,OAA0B;QACzE,KAAK,CAAC,KAAK,EAAE,EAAE,kCACV,OAAO,KACV,IAAI,EAAE,YAAY,EAClB,UAAU,EAAE,SAAS,IACrB,CAAC;IACL,CAAC;CACF;AARD,gCAQC;AAgoBD,MAAa,WAAW;IACf,MAAM,CAAC,UAAU,CAAC,KAAa;QACpC,OAAO,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IACM,MAAM,CAAC,UAAU,CAAC,KAAa;QACpC,OAAO,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IACD,YAAoB,KAAU;QAC5B,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,SAAS,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;IACjE,CAAC;CACF;AAVD,kCAUC;AA4yDD,MAAa,QAAQ;IACZ,MAAM,CAAC,UAAU,CAAC,KAAa;QACpC,OAAO,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;IACM,MAAM,CAAC,UAAU,CAAC,KAAa;QACpC,OAAO,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;IACD,YAAoB,KAAU;QAC5B,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,SAAS,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;IACjE,CAAC;CACF;AAVD,4BAUC","sourcesContent":["// generated by cdk8s\n\nimport { ApiObject } from 'cdk8s';\nimport { Construct } from '@aws-cdk/core';\n\n\n/**\n * Deployment enables declarative updates for Pods and ReplicaSets.\n */\nexport class Deployment extends ApiObject {\n  public constructor(scope: Construct, ns: string, options: DeploymentOptions) {\n    super(scope, ns, {\n      ...options,\n      kind: 'Deployment',\n      apiVersion: 'apps/v1',\n    });\n  }\n}\n\n/**\n * Deployment enables declarative updates for Pods and ReplicaSets.\n */\nexport interface DeploymentOptions {\n  /**\n   * Standard object metadata.\n   */\n  readonly metadata?: ObjectMeta;\n\n  /**\n   * Specification of the desired behavior of the Deployment.\n   */\n  readonly spec?: DeploymentSpec;\n\n}\n\n/**\n * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\n */\nexport interface ObjectMeta {\n  /**\n   * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n   */\n  readonly annotations?: { [key: string]: string };\n\n  /**\n   * The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n   */\n  readonly clusterName?: string;\n\n  /**\n   * CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n   */\n  readonly creationTimestamp?: Time;\n\n  /**\n   * Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\n   */\n  readonly deletionGracePeriodSeconds?: number;\n\n  /**\n   * DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n   */\n  readonly deletionTimestamp?: Time;\n\n  /**\n   * Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.\n   */\n  readonly finalizers?: string[];\n\n  /**\n   * GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n   */\n  readonly generateName?: string;\n\n  /**\n   * A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\n   */\n  readonly generation?: number;\n\n  /**\n   * An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n\nWhen an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.\n\nDEPRECATED - initializers are an alpha field and will be removed in v1.15.\n   */\n  readonly initializers?: Initializers;\n\n  /**\n   * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n   */\n  readonly labels?: { [key: string]: string };\n\n  /**\n   * ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.\n\nThis field is alpha and can be changed or removed without notice.\n   */\n  readonly managedFields?: ManagedFieldsEntry[];\n\n  /**\n   * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n   */\n  readonly name?: string;\n\n  /**\n   * Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\n   */\n  readonly namespace?: string;\n\n  /**\n   * List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\n   */\n  readonly ownerReferences?: OwnerReference[];\n\n  /**\n   * An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency\n   */\n  readonly resourceVersion?: string;\n\n  /**\n   * SelfLink is a URL representing this object. Populated by the system. Read-only.\n   */\n  readonly selfLink?: string;\n\n  /**\n   * UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n   */\n  readonly uid?: string;\n\n}\n\n/**\n * DeploymentSpec is the specification of the desired behavior of the Deployment.\n */\nexport interface DeploymentSpec {\n  /**\n   * Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)\n   * @default 0 (pod will be considered available as soon as it is ready)\n   */\n  readonly minReadySeconds?: number;\n\n  /**\n   * Indicates that the deployment is paused.\n   */\n  readonly paused?: boolean;\n\n  /**\n   * The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.\n   * @default 600s.\n   */\n  readonly progressDeadlineSeconds?: number;\n\n  /**\n   * Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.\n   * @default 1.\n   */\n  readonly replicas?: number;\n\n  /**\n   * The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.\n   * @default 10.\n   */\n  readonly revisionHistoryLimit?: number;\n\n  /**\n   * Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment. It must match the pod template's labels.\n   */\n  readonly selector?: LabelSelector;\n\n  /**\n   * The deployment strategy to use to replace existing pods with new ones.\n   */\n  readonly strategy?: DeploymentStrategy;\n\n  /**\n   * Template describes the pods that will be created.\n   */\n  readonly template?: PodTemplateSpec;\n\n}\n\n/**\n * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\n */\nexport type Time = Date;\n\n/**\n * Initializers tracks the progress of initialization.\n */\nexport interface Initializers {\n  /**\n   * Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.\n   */\n  readonly pending?: Initializer[];\n\n  /**\n   * If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.\n   */\n  readonly result?: Status;\n\n}\n\n/**\n * ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.\n */\nexport interface ManagedFieldsEntry {\n  /**\n   * APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.\n   */\n  readonly apiVersion?: string;\n\n  /**\n   * Fields identifies a set of fields.\n   */\n  readonly fields?: Fields;\n\n  /**\n   * Manager is an identifier of the workflow managing these fields.\n   */\n  readonly manager?: string;\n\n  /**\n   * Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.\n   */\n  readonly operation?: string;\n\n  /**\n   * Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'\n   */\n  readonly time?: Time;\n\n}\n\n/**\n * OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.\n */\nexport interface OwnerReference {\n  /**\n   * API version of the referent.\n   */\n  readonly apiVersion?: string;\n\n  /**\n   * If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.\n   * @default false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.\n   */\n  readonly blockOwnerDeletion?: boolean;\n\n  /**\n   * If true, this reference points to the managing controller.\n   */\n  readonly controller?: boolean;\n\n  /**\n   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\n   */\n  readonly kind?: string;\n\n  /**\n   * Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n   */\n  readonly name?: string;\n\n  /**\n   * UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n   */\n  readonly uid?: string;\n\n}\n\n/**\n * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.\n */\nexport interface LabelSelector {\n  /**\n   * matchExpressions is a list of label selector requirements. The requirements are ANDed.\n   */\n  readonly matchExpressions?: LabelSelectorRequirement[];\n\n  /**\n   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n   */\n  readonly matchLabels?: { [key: string]: string };\n\n}\n\n/**\n * DeploymentStrategy describes how to replace existing pods with new ones.\n */\nexport interface DeploymentStrategy {\n  /**\n   * Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.\n   */\n  readonly rollingUpdate?: RollingUpdateDeployment;\n\n  /**\n   * Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.\n   * @default RollingUpdate.\n   */\n  readonly type?: string;\n\n}\n\n/**\n * PodTemplateSpec describes the data a pod should have when created from a template\n */\nexport interface PodTemplateSpec {\n  /**\n   * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n   */\n  readonly metadata?: ObjectMeta;\n\n  /**\n   * Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n   */\n  readonly spec?: PodSpec;\n\n}\n\n/**\n * Initializer is information about an initializer that has not yet completed.\n */\nexport interface Initializer {\n  /**\n   * name of the process that is responsible for initializing this object.\n   */\n  readonly name?: string;\n\n}\n\n/**\n * Status is a return value for calls that don't return other objects.\n */\nexport interface Status {\n  /**\n   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\n   */\n  readonly apiVersion?: string;\n\n  /**\n   * Suggested HTTP return code for this status, 0 if not set.\n   */\n  readonly code?: number;\n\n  /**\n   * Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.\n   */\n  readonly details?: StatusDetails;\n\n  /**\n   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\n   */\n  readonly kind?: string;\n\n  /**\n   * A human-readable description of the status of this operation.\n   */\n  readonly message?: string;\n\n  /**\n   * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\n   */\n  readonly metadata?: ListMeta;\n\n  /**\n   * A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.\n   */\n  readonly reason?: string;\n\n  /**\n   * Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n   */\n  readonly status?: string;\n\n}\n\n/**\n * Fields stores a set of fields in a data structure like a Trie. To understand how this is used, see: https://github.com/kubernetes-sigs/structured-merge-diff\n */\nexport type Fields = \"unknown [object Object]\";\n\n/**\n * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\n */\nexport interface LabelSelectorRequirement {\n  /**\n   * key is the label key that the selector applies to.\n   */\n  readonly key?: string;\n\n  /**\n   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\n   */\n  readonly operator?: string;\n\n  /**\n   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\n   */\n  readonly values?: string[];\n\n}\n\n/**\n * Spec to control the desired behavior of rolling update.\n */\nexport interface RollingUpdateDeployment {\n  /**\n   * The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.\n   * @default 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.\n   */\n  readonly maxSurge?: IntOrString;\n\n  /**\n   * The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.\n   * @default 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.\n   */\n  readonly maxUnavailable?: IntOrString;\n\n}\n\n/**\n * PodSpec is a description of a pod.\n */\nexport interface PodSpec {\n  /**\n   * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.\n   */\n  readonly activeDeadlineSeconds?: number;\n\n  /**\n   * If specified, the pod's scheduling constraints\n   */\n  readonly affinity?: Affinity;\n\n  /**\n   * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.\n   */\n  readonly automountServiceAccountToken?: boolean;\n\n  /**\n   * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.\n   */\n  readonly containers?: Container[];\n\n  /**\n   * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.\n   */\n  readonly dnsConfig?: PodDNSConfig;\n\n  /**\n   * Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.\n   * @default ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.\n   */\n  readonly dnsPolicy?: string;\n\n  /**\n   * EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.\n   * @default true.\n   */\n  readonly enableServiceLinks?: boolean;\n\n  /**\n   * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.\n   */\n  readonly hostAliases?: HostAlias[];\n\n  /**\n   * Use the host's ipc namespace. Optional: Default to false.\n   * @default false.\n   */\n  readonly hostIPC?: boolean;\n\n  /**\n   * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.\n   * @default false.\n   */\n  readonly hostNetwork?: boolean;\n\n  /**\n   * Use the host's pid namespace. Optional: Default to false.\n   * @default false.\n   */\n  readonly hostPID?: boolean;\n\n  /**\n   * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.\n   */\n  readonly hostname?: string;\n\n  /**\n   * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod\n   */\n  readonly imagePullSecrets?: LocalObjectReference[];\n\n  /**\n   * List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\n   */\n  readonly initContainers?: Container[];\n\n  /**\n   * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.\n   */\n  readonly nodeName?: string;\n\n  /**\n   * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n   */\n  readonly nodeSelector?: { [key: string]: string };\n\n  /**\n   * The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.\n   */\n  readonly priority?: number;\n\n  /**\n   * If specified, indicates the pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.\n   */\n  readonly priorityClassName?: string;\n\n  /**\n   * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to \"True\" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md\n   */\n  readonly readinessGates?: PodReadinessGate[];\n\n  /**\n   * Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\n   * @default Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\n   */\n  readonly restartPolicy?: string;\n\n  /**\n   * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the \"legacy\" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md This is an alpha feature and may change in the future.\n   */\n  readonly runtimeClassName?: string;\n\n  /**\n   * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.\n   */\n  readonly schedulerName?: string;\n\n  /**\n   * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.\n   * @default empty.  See type description for default values of each field.\n   */\n  readonly securityContext?: PodSecurityContext;\n\n  /**\n   * DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.\n   */\n  readonly serviceAccount?: string;\n\n  /**\n   * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n   */\n  readonly serviceAccountName?: string;\n\n  /**\n   * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false. This field is beta-level and may be disabled with the PodShareProcessNamespace feature.\n   * @default false. This field is beta-level and may be disabled with the PodShareProcessNamespace feature.\n   */\n  readonly shareProcessNamespace?: boolean;\n\n  /**\n   * If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.\n   */\n  readonly subdomain?: string;\n\n  /**\n   * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.\n   * @default 30 seconds.\n   */\n  readonly terminationGracePeriodSeconds?: number;\n\n  /**\n   * If specified, the pod's tolerations.\n   */\n  readonly tolerations?: Toleration[];\n\n  /**\n   * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes\n   */\n  readonly volumes?: Volume[];\n\n}\n\n/**\n * StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.\n */\nexport interface StatusDetails {\n  /**\n   * The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.\n   */\n  readonly causes?: StatusCause[];\n\n  /**\n   * The group attribute of the resource associated with the status StatusReason.\n   */\n  readonly group?: string;\n\n  /**\n   * The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\n   */\n  readonly kind?: string;\n\n  /**\n   * The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).\n   */\n  readonly name?: string;\n\n  /**\n   * If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.\n   */\n  readonly retryAfterSeconds?: number;\n\n  /**\n   * UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n   */\n  readonly uid?: string;\n\n}\n\n/**\n * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.\n */\nexport interface ListMeta {\n  /**\n   * continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.\n   */\n  readonly continue?: string;\n\n  /**\n   * String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency\n   */\n  readonly resourceVersion?: string;\n\n  /**\n   * selfLink is a URL representing this object. Populated by the system. Read-only.\n   */\n  readonly selfLink?: string;\n\n}\n\nexport class IntOrString {\n  public static fromString(value: string): IntOrString {\n    return new IntOrString(value);\n  }\n  public static fromNumber(value: number): IntOrString {\n    return new IntOrString(value);\n  }\n  private constructor(value: any) {\n    Object.defineProperty(this, 'resolve', { value: () => value });\n  }\n}\n\n/**\n * Affinity is a group of affinity scheduling rules.\n */\nexport interface Affinity {\n  /**\n   * Describes node affinity scheduling rules for the pod.\n   */\n  readonly nodeAffinity?: NodeAffinity;\n\n  /**\n   * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\n   */\n  readonly podAffinity?: PodAffinity;\n\n  /**\n   * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\n   */\n  readonly podAntiAffinity?: PodAntiAffinity;\n\n}\n\n/**\n * A single application container that you want to run within a pod.\n */\nexport interface Container {\n  /**\n   * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n   */\n  readonly args?: string[];\n\n  /**\n   * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n   */\n  readonly command?: string[];\n\n  /**\n   * List of environment variables to set in the container. Cannot be updated.\n   */\n  readonly env?: EnvVar[];\n\n  /**\n   * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.\n   */\n  readonly envFrom?: EnvFromSource[];\n\n  /**\n   * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.\n   */\n  readonly image?: string;\n\n  /**\n   * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n   * @default Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n   */\n  readonly imagePullPolicy?: string;\n\n  /**\n   * Actions that the management system should take in response to container lifecycle events. Cannot be updated.\n   */\n  readonly lifecycle?: Lifecycle;\n\n  /**\n   * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n   */\n  readonly livenessProbe?: Probe;\n\n  /**\n   * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.\n   */\n  readonly name?: string;\n\n  /**\n   * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.\n   */\n  readonly ports?: ContainerPort[];\n\n  /**\n   * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n   */\n  readonly readinessProbe?: Probe;\n\n  /**\n   * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/\n   */\n  readonly resources?: ResourceRequirements;\n\n  /**\n   * Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/\n   */\n  readonly securityContext?: SecurityContext;\n\n  /**\n   * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.\n   * @default false.\n   */\n  readonly stdin?: boolean;\n\n  /**\n   * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false\n   * @default false\n   */\n  readonly stdinOnce?: boolean;\n\n  /**\n   * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.\n   * @default dev/termination-log. Cannot be updated.\n   */\n  readonly terminationMessagePath?: string;\n\n  /**\n   * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.\n   * @default File. Cannot be updated.\n   */\n  readonly terminationMessagePolicy?: string;\n\n  /**\n   * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.\n   * @default false.\n   */\n  readonly tty?: boolean;\n\n  /**\n   * volumeDevices is the list of block devices to be used by the container. This is a beta feature.\n   */\n  readonly volumeDevices?: VolumeDevice[];\n\n  /**\n   * Pod volumes to mount into the container's filesystem. Cannot be updated.\n   */\n  readonly volumeMounts?: VolumeMount[];\n\n  /**\n   * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.\n   */\n  readonly workingDir?: string;\n\n}\n\n/**\n * PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.\n */\nexport interface PodDNSConfig {\n  /**\n   * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.\n   */\n  readonly nameservers?: string[];\n\n  /**\n   * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.\n   */\n  readonly options?: PodDNSConfigOption[];\n\n  /**\n   * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.\n   */\n  readonly searches?: string[];\n\n}\n\n/**\n * HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.\n */\nexport interface HostAlias {\n  /**\n   * Hostnames for the above IP address.\n   */\n  readonly hostnames?: string[];\n\n  /**\n   * IP address of the host file entry.\n   */\n  readonly ip?: string;\n\n}\n\n/**\n * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.\n */\nexport interface LocalObjectReference {\n  /**\n   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n   */\n  readonly name?: string;\n\n}\n\n/**\n * PodReadinessGate contains the reference to a pod condition\n */\nexport interface PodReadinessGate {\n  /**\n   * ConditionType refers to a condition in the pod's condition list with matching type.\n   */\n  readonly conditionType?: string;\n\n}\n\n/**\n * PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.\n */\nexport interface PodSecurityContext {\n  /**\n   * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.\n   */\n  readonly fsGroup?: number;\n\n  /**\n   * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n   */\n  readonly runAsGroup?: number;\n\n  /**\n   * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n   */\n  readonly runAsNonRoot?: boolean;\n\n  /**\n   * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n   * @default user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n   */\n  readonly runAsUser?: number;\n\n  /**\n   * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.\n   */\n  readonly seLinuxOptions?: SELinuxOptions;\n\n  /**\n   * A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.\n   */\n  readonly supplementalGroups?: number[];\n\n  /**\n   * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.\n   */\n  readonly sysctls?: Sysctl[];\n\n}\n\n/**\n * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.\n */\nexport interface Toleration {\n  /**\n   * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\n   */\n  readonly effect?: string;\n\n  /**\n   * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.\n   */\n  readonly key?: string;\n\n  /**\n   * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.\n   * @default Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.\n   */\n  readonly operator?: string;\n\n  /**\n   * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.\n   */\n  readonly tolerationSeconds?: number;\n\n  /**\n   * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.\n   */\n  readonly value?: string;\n\n}\n\n/**\n * Volume represents a named volume in a pod that may be accessed by any container in the pod.\n */\nexport interface Volume {\n  /**\n   * AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n   */\n  readonly awsElasticBlockStore?: AWSElasticBlockStoreVolumeSource;\n\n  /**\n   * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.\n   */\n  readonly azureDisk?: AzureDiskVolumeSource;\n\n  /**\n   * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.\n   */\n  readonly azureFile?: AzureFileVolumeSource;\n\n  /**\n   * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime\n   */\n  readonly cephfs?: CephFSVolumeSource;\n\n  /**\n   * Cinder represents a cinder volume attached and mounted on kubelets host machine More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md\n   */\n  readonly cinder?: CinderVolumeSource;\n\n  /**\n   * ConfigMap represents a configMap that should populate this volume\n   */\n  readonly configMap?: ConfigMapVolumeSource;\n\n  /**\n   * CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature).\n   */\n  readonly csi?: CSIVolumeSource;\n\n  /**\n   * DownwardAPI represents downward API about the pod that should populate this volume\n   */\n  readonly downwardAPI?: DownwardAPIVolumeSource;\n\n  /**\n   * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir\n   */\n  readonly emptyDir?: EmptyDirVolumeSource;\n\n  /**\n   * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.\n   */\n  readonly fc?: FCVolumeSource;\n\n  /**\n   * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.\n   */\n  readonly flexVolume?: FlexVolumeSource;\n\n  /**\n   * Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running\n   */\n  readonly flocker?: FlockerVolumeSource;\n\n  /**\n   * GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n   */\n  readonly gcePersistentDisk?: GCEPersistentDiskVolumeSource;\n\n  /**\n   * GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.\n   */\n  readonly gitRepo?: GitRepoVolumeSource;\n\n  /**\n   * Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md\n   */\n  readonly glusterfs?: GlusterfsVolumeSource;\n\n  /**\n   * HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n   */\n  readonly hostPath?: HostPathVolumeSource;\n\n  /**\n   * ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://releases.k8s.io/HEAD/examples/volumes/iscsi/README.md\n   */\n  readonly iscsi?: ISCSIVolumeSource;\n\n  /**\n   * Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n   */\n  readonly name?: string;\n\n  /**\n   * NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n   */\n  readonly nfs?: NFSVolumeSource;\n\n  /**\n   * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims\n   */\n  readonly persistentVolumeClaim?: PersistentVolumeClaimVolumeSource;\n\n  /**\n   * PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine\n   */\n  readonly photonPersistentDisk?: PhotonPersistentDiskVolumeSource;\n\n  /**\n   * PortworxVolume represents a portworx volume attached and mounted on kubelets host machine\n   */\n  readonly portworxVolume?: PortworxVolumeSource;\n\n  /**\n   * Items for all in one resources secrets, configmaps, and downward API\n   */\n  readonly projected?: ProjectedVolumeSource;\n\n  /**\n   * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime\n   */\n  readonly quobyte?: QuobyteVolumeSource;\n\n  /**\n   * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md\n   */\n  readonly rbd?: RBDVolumeSource;\n\n  /**\n   * ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.\n   */\n  readonly scaleIO?: ScaleIOVolumeSource;\n\n  /**\n   * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret\n   */\n  readonly secret?: SecretVolumeSource;\n\n  /**\n   * StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.\n   */\n  readonly storageos?: StorageOSVolumeSource;\n\n  /**\n   * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine\n   */\n  readonly vsphereVolume?: VsphereVirtualDiskVolumeSource;\n\n}\n\n/**\n * StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.\n */\nexport interface StatusCause {\n  /**\n   * The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\"\n   */\n  readonly field?: string;\n\n  /**\n   * A human-readable description of the cause of the error.  This field may be presented as-is to a reader.\n   */\n  readonly message?: string;\n\n  /**\n   * A machine-readable description of the cause of the error. If this value is empty there is no information available.\n   */\n  readonly reason?: string;\n\n}\n\n/**\n * Node affinity is a group of node affinity scheduling rules.\n */\nexport interface NodeAffinity {\n  /**\n   * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\n   */\n  readonly preferredDuringSchedulingIgnoredDuringExecution?: PreferredSchedulingTerm[];\n\n  /**\n   * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.\n   */\n  readonly requiredDuringSchedulingIgnoredDuringExecution?: NodeSelector;\n\n}\n\n/**\n * Pod affinity is a group of inter pod affinity scheduling rules.\n */\nexport interface PodAffinity {\n  /**\n   * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n   */\n  readonly preferredDuringSchedulingIgnoredDuringExecution?: WeightedPodAffinityTerm[];\n\n  /**\n   * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n   */\n  readonly requiredDuringSchedulingIgnoredDuringExecution?: PodAffinityTerm[];\n\n}\n\n/**\n * Pod anti affinity is a group of inter pod anti affinity scheduling rules.\n */\nexport interface PodAntiAffinity {\n  /**\n   * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\n   */\n  readonly preferredDuringSchedulingIgnoredDuringExecution?: WeightedPodAffinityTerm[];\n\n  /**\n   * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\n   */\n  readonly requiredDuringSchedulingIgnoredDuringExecution?: PodAffinityTerm[];\n\n}\n\n/**\n * EnvVar represents an environment variable present in a Container.\n */\nexport interface EnvVar {\n  /**\n   * Name of the environment variable. Must be a C_IDENTIFIER.\n   */\n  readonly name?: string;\n\n  /**\n   * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".\n   * @default .\n   */\n  readonly value?: string;\n\n  /**\n   * Source for the environment variable's value. Cannot be used if value is not empty.\n   */\n  readonly valueFrom?: EnvVarSource;\n\n}\n\n/**\n * EnvFromSource represents the source of a set of ConfigMaps\n */\nexport interface EnvFromSource {\n  /**\n   * The ConfigMap to select from\n   */\n  readonly configMapRef?: ConfigMapEnvSource;\n\n  /**\n   * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.\n   */\n  readonly prefix?: string;\n\n  /**\n   * The Secret to select from\n   */\n  readonly secretRef?: SecretEnvSource;\n\n}\n\n/**\n * Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.\n */\nexport interface Lifecycle {\n  /**\n   * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n   */\n  readonly postStart?: Handler;\n\n  /**\n   * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n   */\n  readonly preStop?: Handler;\n\n}\n\n/**\n * Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.\n */\nexport interface Probe {\n  /**\n   * One and only one of the following should be specified. Exec specifies the action to take.\n   */\n  readonly exec?: ExecAction;\n\n  /**\n   * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.\n   * @default 3. Minimum value is 1.\n   */\n  readonly failureThreshold?: number;\n\n  /**\n   * HTTPGet specifies the http request to perform.\n   */\n  readonly httpGet?: HTTPGetAction;\n\n  /**\n   * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n   */\n  readonly initialDelaySeconds?: number;\n\n  /**\n   * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.\n   * @default 10 seconds. Minimum value is 1.\n   */\n  readonly periodSeconds?: number;\n\n  /**\n   * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.\n   * @default 1. Must be 1 for liveness. Minimum value is 1.\n   */\n  readonly successThreshold?: number;\n\n  /**\n   * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n   */\n  readonly tcpSocket?: TCPSocketAction;\n\n  /**\n   * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n   * @default 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n   */\n  readonly timeoutSeconds?: number;\n\n}\n\n/**\n * ContainerPort represents a network port in a single container.\n */\nexport interface ContainerPort {\n  /**\n   * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.\n   */\n  readonly containerPort?: number;\n\n  /**\n   * What host IP to bind the external port to.\n   */\n  readonly hostIP?: string;\n\n  /**\n   * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.\n   */\n  readonly hostPort?: number;\n\n  /**\n   * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.\n   */\n  readonly name?: string;\n\n  /**\n   * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".\n   * @default TCP\".\n   */\n  readonly protocol?: string;\n\n}\n\n/**\n * ResourceRequirements describes the compute resource requirements.\n */\nexport interface ResourceRequirements {\n  /**\n   * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/\n   */\n  readonly limits?: { [key: string]: Quantity };\n\n  /**\n   * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/\n   */\n  readonly requests?: { [key: string]: Quantity };\n\n}\n\n/**\n * SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.\n */\nexport interface SecurityContext {\n  /**\n   * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN\n   */\n  readonly allowPrivilegeEscalation?: boolean;\n\n  /**\n   * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.\n   * @default the default set of capabilities granted by the container runtime.\n   */\n  readonly capabilities?: Capabilities;\n\n  /**\n   * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.\n   * @default false.\n   */\n  readonly privileged?: boolean;\n\n  /**\n   * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.\n   */\n  readonly procMount?: string;\n\n  /**\n   * Whether this container has a read-only root filesystem. Default is false.\n   * @default false.\n   */\n  readonly readOnlyRootFilesystem?: boolean;\n\n  /**\n   * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n   */\n  readonly runAsGroup?: number;\n\n  /**\n   * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n   */\n  readonly runAsNonRoot?: boolean;\n\n  /**\n   * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n   * @default user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n   */\n  readonly runAsUser?: number;\n\n  /**\n   * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n   */\n  readonly seLinuxOptions?: SELinuxOptions;\n\n}\n\n/**\n * volumeDevice describes a mapping of a raw block device within a container.\n */\nexport interface VolumeDevice {\n  /**\n   * devicePath is the path inside of the container that the device will be mapped to.\n   */\n  readonly devicePath?: string;\n\n  /**\n   * name must match the name of a persistentVolumeClaim in the pod\n   */\n  readonly name?: string;\n\n}\n\n/**\n * VolumeMount describes a mounting of a Volume within a container.\n */\nexport interface VolumeMount {\n  /**\n   * Path within the container at which the volume should be mounted.  Must not contain ':'.\n   */\n  readonly mountPath?: string;\n\n  /**\n   * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.\n   */\n  readonly mountPropagation?: string;\n\n  /**\n   * This must match the Name of a Volume.\n   */\n  readonly name?: string;\n\n  /**\n   * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.\n   * @default false.\n   */\n  readonly readOnly?: boolean;\n\n  /**\n   * Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).\n   * @default volume's root).\n   */\n  readonly subPath?: string;\n\n  /**\n   * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive. This field is alpha in 1.14.\n   * @default volume's root). SubPathExpr and SubPath are mutually exclusive. This field is alpha in 1.14.\n   */\n  readonly subPathExpr?: string;\n\n}\n\n/**\n * PodDNSConfigOption defines DNS resolver options of a pod.\n */\nexport interface PodDNSConfigOption {\n  /**\n   * Required.\n   */\n  readonly name?: string;\n\n  readonly value?: string;\n\n}\n\n/**\n * SELinuxOptions are the labels to be applied to the container\n */\nexport interface SELinuxOptions {\n  /**\n   * Level is SELinux level label that applies to the container.\n   */\n  readonly level?: string;\n\n  /**\n   * Role is a SELinux role label that applies to the container.\n   */\n  readonly role?: string;\n\n  /**\n   * Type is a SELinux type label that applies to the container.\n   */\n  readonly type?: string;\n\n  /**\n   * User is a SELinux user label that applies to the container.\n   */\n  readonly user?: string;\n\n}\n\n/**\n * Sysctl defines a kernel parameter to be set\n */\nexport interface Sysctl {\n  /**\n   * Name of a property to set\n   */\n  readonly name?: string;\n\n  /**\n   * Value of a property to set\n   */\n  readonly value?: string;\n\n}\n\n/**\n * Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.\n */\nexport interface AWSElasticBlockStoreVolumeSource {\n  /**\n   * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n   */\n  readonly fsType?: string;\n\n  /**\n   * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).\n   */\n  readonly partition?: number;\n\n  /**\n   * Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n   */\n  readonly readOnly?: boolean;\n\n  /**\n   * Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n   */\n  readonly volumeID?: string;\n\n}\n\n/**\n * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.\n */\nexport interface AzureDiskVolumeSource {\n  /**\n   * Host Caching mode: None, Read Only, Read Write.\n   */\n  readonly cachingMode?: string;\n\n  /**\n   * The Name of the data disk in the blob storage\n   */\n  readonly diskName?: string;\n\n  /**\n   * The URI the data disk in the blob storage\n   */\n  readonly diskURI?: string;\n\n  /**\n   * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n   */\n  readonly fsType?: string;\n\n  /**\n   * Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared\n   */\n  readonly kind?: string;\n\n  /**\n   * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n   * @default false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n   */\n  readonly readOnly?: boolean;\n\n}\n\n/**\n * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.\n */\nexport interface AzureFileVolumeSource {\n  /**\n   * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n   * @default false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n   */\n  readonly readOnly?: boolean;\n\n  /**\n   * the name of secret that contains Azure Storage Account Name and Key\n   */\n  readonly secretName?: string;\n\n  /**\n   * Share Name\n   */\n  readonly shareName?: string;\n\n}\n\n/**\n * Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.\n */\nexport interface CephFSVolumeSource {\n  /**\n   * Required: Monitors is a collection of Ceph monitors More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it\n   */\n  readonly monitors?: string[];\n\n  /**\n   * Optional: Used as the mounted root, rather than the full Ceph tree, default is /\n   */\n  readonly path?: string;\n\n  /**\n   * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it\n   * @default false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it\n   */\n  readonly readOnly?: boolean;\n\n  /**\n   * Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it\n   */\n  readonly secretFile?: string;\n\n  /**\n   * Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it\n   */\n  readonly secretRef?: LocalObjectReference;\n\n  /**\n   * Optional: User is the rados user name, default is admin More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it\n   */\n  readonly user?: string;\n\n}\n\n/**\n * Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.\n */\nexport interface CinderVolumeSource {\n  /**\n   * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md\n   */\n  readonly fsType?: string;\n\n  /**\n   * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md\n   * @default false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md\n   */\n  readonly readOnly?: boolean;\n\n  /**\n   * Optional: points to a secret object containing parameters used to connect to OpenStack.\n   */\n  readonly secretRef?: LocalObjectReference;\n\n  /**\n   * volume id used to identify the volume in cinder More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md\n   */\n  readonly volumeID?: string;\n\n}\n\n/**\n * Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.\n */\nexport interface ConfigMapVolumeSource {\n  /**\n   * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n   * @default 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n   */\n  readonly defaultMode?: number;\n\n  /**\n   * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.\n   */\n  readonly items?: KeyToPath[];\n\n  /**\n   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n   */\n  readonly name?: string;\n\n  /**\n   * Specify whether the ConfigMap or it's keys must be defined\n   */\n  readonly optional?: boolean;\n\n}\n\n/**\n * Represents a source location of a volume to mount, managed by an external CSI driver\n */\nexport interface CSIVolumeSource {\n  /**\n   * Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.\n   */\n  readonly driver?: string;\n\n  /**\n   * Filesystem type to mount. Ex. \"ext4\", \"xfs\", \"ntfs\". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.\n   */\n  readonly fsType?: string;\n\n  /**\n   * NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.\n   */\n  readonly nodePublishSecretRef?: LocalObjectReference;\n\n  /**\n   * Specifies a read-only configuration for the volume. Defaults to false (read/write).\n   * @default false (read/write).\n   */\n  readonly readOnly?: boolean;\n\n  /**\n   * VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.\n   */\n  readonly volumeAttributes?: { [key: string]: string };\n\n}\n\n/**\n * DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.\n */\nexport interface DownwardAPIVolumeSource {\n  /**\n   * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n   * @default 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n   */\n  readonly defaultMode?: number;\n\n  /**\n   * Items is a list of downward API volume file\n   */\n  readonly items?: DownwardAPIVolumeFile[];\n\n}\n\n/**\n * Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.\n */\nexport interface EmptyDirVolumeSource {\n  /**\n   * What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir\n   */\n  readonly medium?: string;\n\n  /**\n   * Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir\n   */\n  readonly sizeLimit?: Quantity;\n\n}\n\n/**\n * Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.\n */\nexport interface FCVolumeSource {\n  /**\n   * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n   */\n  readonly fsType?: string;\n\n  /**\n   * Optional: FC target lun number\n   */\n  readonly lun?: number;\n\n  /**\n   * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n   * @default false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n   */\n  readonly readOnly?: boolean;\n\n  /**\n   * Optional: FC target worldwide names (WWNs)\n   */\n  readonly targetWWNs?: string[];\n\n  /**\n   * Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.\n   */\n  readonly wwids?: string[];\n\n}\n\n/**\n * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.\n */\nexport interface FlexVolumeSource {\n  /**\n   * Driver is the name of the driver to use for this volume.\n   */\n  readonly driver?: string;\n\n  /**\n   * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.\n   */\n  readonly fsType?: string;\n\n  /**\n   * Optional: Extra command options if any.\n   */\n  readonly options?: { [key: string]: string };\n\n  /**\n   * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n   * @default false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n   */\n  readonly readOnly?: boolean;\n\n  /**\n   * Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.\n   */\n  readonly secretRef?: LocalObjectReference;\n\n}\n\n/**\n * Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.\n */\nexport interface FlockerVolumeSource {\n  /**\n   * Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated\n   */\n  readonly datasetName?: string;\n\n  /**\n   * UUID of the dataset. This is unique identifier of a Flocker dataset\n   */\n  readonly datasetUUID?: string;\n\n}\n\n/**\n * Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.\n */\nexport interface GCEPersistentDiskVolumeSource {\n  /**\n   * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n   */\n  readonly fsType?: string;\n\n  /**\n   * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n   */\n  readonly partition?: number;\n\n  /**\n   * Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n   */\n  readonly pdName?: string;\n\n  /**\n   * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n   * @default false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n   */\n  readonly readOnly?: boolean;\n\n}\n\n/**\n * Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.\n\nDEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.\n */\nexport interface GitRepoVolumeSource {\n  /**\n   * Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.\n   */\n  readonly directory?: string;\n\n  /**\n   * Repository URL\n   */\n  readonly repository?: string;\n\n  /**\n   * Commit hash for the specified revision.\n   */\n  readonly revision?: string;\n\n}\n\n/**\n * Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.\n */\nexport interface GlusterfsVolumeSource {\n  /**\n   * EndpointsName is the endpoint name that details Glusterfs topology. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod\n   */\n  readonly endpoints?: string;\n\n  /**\n   * Path is the Glusterfs volume path. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod\n   */\n  readonly path?: string;\n\n  /**\n   * ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod\n   * @default false. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod\n   */\n  readonly readOnly?: boolean;\n\n}\n\n/**\n * Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.\n */\nexport interface HostPathVolumeSource {\n  /**\n   * Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n   */\n  readonly path?: string;\n\n  /**\n   * Type for HostPath Volume Defaults to \"\" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n   * @default More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n   */\n  readonly type?: string;\n\n}\n\n/**\n * Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.\n */\nexport interface ISCSIVolumeSource {\n  /**\n   * whether support iSCSI Discovery CHAP authentication\n   */\n  readonly chapAuthDiscovery?: boolean;\n\n  /**\n   * whether support iSCSI Session CHAP authentication\n   */\n  readonly chapAuthSession?: boolean;\n\n  /**\n   * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi\n   */\n  readonly fsType?: string;\n\n  /**\n   * Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.\n   */\n  readonly initiatorName?: string;\n\n  /**\n   * Target iSCSI Qualified Name.\n   */\n  readonly iqn?: string;\n\n  /**\n   * iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).\n   * @default default' (tcp).\n   */\n  readonly iscsiInterface?: string;\n\n  /**\n   * iSCSI Target Lun number.\n   */\n  readonly lun?: number;\n\n  /**\n   * iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).\n   */\n  readonly portals?: string[];\n\n  /**\n   * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.\n   * @default false.\n   */\n  readonly readOnly?: boolean;\n\n  /**\n   * CHAP Secret for iSCSI target and initiator authentication\n   */\n  readonly secretRef?: LocalObjectReference;\n\n  /**\n   * iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).\n   */\n  readonly targetPortal?: string;\n\n}\n\n/**\n * Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.\n */\nexport interface NFSVolumeSource {\n  /**\n   * Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n   */\n  readonly path?: string;\n\n  /**\n   * ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n   * @default false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n   */\n  readonly readOnly?: boolean;\n\n  /**\n   * Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n   */\n  readonly server?: string;\n\n}\n\n/**\n * PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).\n */\nexport interface PersistentVolumeClaimVolumeSource {\n  /**\n   * ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims\n   */\n  readonly claimName?: string;\n\n  /**\n   * Will force the ReadOnly setting in VolumeMounts. Default false.\n   */\n  readonly readOnly?: boolean;\n\n}\n\n/**\n * Represents a Photon Controller persistent disk resource.\n */\nexport interface PhotonPersistentDiskVolumeSource {\n  /**\n   * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n   */\n  readonly fsType?: string;\n\n  /**\n   * ID that identifies Photon Controller persistent disk\n   */\n  readonly pdID?: string;\n\n}\n\n/**\n * PortworxVolumeSource represents a Portworx volume resource.\n */\nexport interface PortworxVolumeSource {\n  /**\n   * FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.\n   */\n  readonly fsType?: string;\n\n  /**\n   * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n   * @default false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n   */\n  readonly readOnly?: boolean;\n\n  /**\n   * VolumeID uniquely identifies a Portworx volume\n   */\n  readonly volumeID?: string;\n\n}\n\n/**\n * Represents a projected volume source\n */\nexport interface ProjectedVolumeSource {\n  /**\n   * Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n   */\n  readonly defaultMode?: number;\n\n  /**\n   * list of volume projections\n   */\n  readonly sources?: VolumeProjection[];\n\n}\n\n/**\n * Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.\n */\nexport interface QuobyteVolumeSource {\n  /**\n   * Group to map volume access to Default is no group\n   * @default no group\n   */\n  readonly group?: string;\n\n  /**\n   * ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.\n   * @default false.\n   */\n  readonly readOnly?: boolean;\n\n  /**\n   * Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes\n   */\n  readonly registry?: string;\n\n  /**\n   * Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin\n   */\n  readonly tenant?: string;\n\n  /**\n   * User to map volume access to Defaults to serivceaccount user\n   * @default serivceaccount user\n   */\n  readonly user?: string;\n\n  /**\n   * Volume is a string that references an already created Quobyte volume by name.\n   */\n  readonly volume?: string;\n\n}\n\n/**\n * Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.\n */\nexport interface RBDVolumeSource {\n  /**\n   * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd\n   */\n  readonly fsType?: string;\n\n  /**\n   * The rados image name. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n   */\n  readonly image?: string;\n\n  /**\n   * Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n   * @default etc/ceph/keyring. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n   */\n  readonly keyring?: string;\n\n  /**\n   * A collection of Ceph monitors. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n   */\n  readonly monitors?: string[];\n\n  /**\n   * The rados pool name. Default is rbd. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n   * @default rbd. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n   */\n  readonly pool?: string;\n\n  /**\n   * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n   * @default false. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n   */\n  readonly readOnly?: boolean;\n\n  /**\n   * SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n   * @default nil. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n   */\n  readonly secretRef?: LocalObjectReference;\n\n  /**\n   * The rados user name. Default is admin. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n   * @default admin. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it\n   */\n  readonly user?: string;\n\n}\n\n/**\n * ScaleIOVolumeSource represents a persistent ScaleIO volume\n */\nexport interface ScaleIOVolumeSource {\n  /**\n   * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\".\n   * @default xfs\".\n   */\n  readonly fsType?: string;\n\n  /**\n   * The host address of the ScaleIO API Gateway.\n   */\n  readonly gateway?: string;\n\n  /**\n   * The name of the ScaleIO Protection Domain for the configured storage.\n   */\n  readonly protectionDomain?: string;\n\n  /**\n   * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n   * @default false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n   */\n  readonly readOnly?: boolean;\n\n  /**\n   * SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.\n   */\n  readonly secretRef?: LocalObjectReference;\n\n  /**\n   * Flag to enable/disable SSL communication with Gateway, default false\n   */\n  readonly sslEnabled?: boolean;\n\n  /**\n   * Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.\n   * @default ThinProvisioned.\n   */\n  readonly storageMode?: string;\n\n  /**\n   * The ScaleIO Storage Pool associated with the protection domain.\n   */\n  readonly storagePool?: string;\n\n  /**\n   * The name of the storage system as configured in ScaleIO.\n   */\n  readonly system?: string;\n\n  /**\n   * The name of a volume already created in the ScaleIO system that is associated with this volume source.\n   */\n  readonly volumeName?: string;\n\n}\n\n/**\n * Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.\n */\nexport interface SecretVolumeSource {\n  /**\n   * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n   * @default 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n   */\n  readonly defaultMode?: number;\n\n  /**\n   * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.\n   */\n  readonly items?: KeyToPath[];\n\n  /**\n   * Specify whether the Secret or it's keys must be defined\n   */\n  readonly optional?: boolean;\n\n  /**\n   * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret\n   */\n  readonly secretName?: string;\n\n}\n\n/**\n * Represents a StorageOS persistent volume resource.\n */\nexport interface StorageOSVolumeSource {\n  /**\n   * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n   */\n  readonly fsType?: string;\n\n  /**\n   * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n   * @default false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.\n   */\n  readonly readOnly?: boolean;\n\n  /**\n   * SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.\n   */\n  readonly secretRef?: LocalObjectReference;\n\n  /**\n   * VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.\n   */\n  readonly volumeName?: string;\n\n  /**\n   * VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.\n   */\n  readonly volumeNamespace?: string;\n\n}\n\n/**\n * Represents a vSphere volume resource.\n */\nexport interface VsphereVirtualDiskVolumeSource {\n  /**\n   * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n   */\n  readonly fsType?: string;\n\n  /**\n   * Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.\n   */\n  readonly storagePolicyID?: string;\n\n  /**\n   * Storage Policy Based Management (SPBM) profile name.\n   */\n  readonly storagePolicyName?: string;\n\n  /**\n   * Path that identifies vSphere volume vmdk\n   */\n  readonly volumePath?: string;\n\n}\n\n/**\n * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).\n */\nexport interface PreferredSchedulingTerm {\n  /**\n   * A node selector term, associated with the corresponding weight.\n   */\n  readonly preference?: NodeSelectorTerm;\n\n  /**\n   * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.\n   */\n  readonly weight?: number;\n\n}\n\n/**\n * A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.\n */\nexport interface NodeSelector {\n  /**\n   * Required. A list of node selector terms. The terms are ORed.\n   */\n  readonly nodeSelectorTerms?: NodeSelectorTerm[];\n\n}\n\n/**\n * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\n */\nexport interface WeightedPodAffinityTerm {\n  /**\n   * Required. A pod affinity term, associated with the corresponding weight.\n   */\n  readonly podAffinityTerm?: PodAffinityTerm;\n\n  /**\n   * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.\n   */\n  readonly weight?: number;\n\n}\n\n/**\n * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running\n */\nexport interface PodAffinityTerm {\n  /**\n   * A label query over a set of resources, in this case pods.\n   */\n  readonly labelSelector?: LabelSelector;\n\n  /**\n   * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"\n   */\n  readonly namespaces?: string[];\n\n  /**\n   * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.\n   */\n  readonly topologyKey?: string;\n\n}\n\n/**\n * EnvVarSource represents a source for the value of an EnvVar.\n */\nexport interface EnvVarSource {\n  /**\n   * Selects a key of a ConfigMap.\n   */\n  readonly configMapKeyRef?: ConfigMapKeySelector;\n\n  /**\n   * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.\n   */\n  readonly fieldRef?: ObjectFieldSelector;\n\n  /**\n   * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.\n   */\n  readonly resourceFieldRef?: ResourceFieldSelector;\n\n  /**\n   * Selects a key of a secret in the pod's namespace\n   */\n  readonly secretKeyRef?: SecretKeySelector;\n\n}\n\n/**\n * ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.\n */\nexport interface ConfigMapEnvSource {\n  /**\n   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n   */\n  readonly name?: string;\n\n  /**\n   * Specify whether the ConfigMap must be defined\n   */\n  readonly optional?: boolean;\n\n}\n\n/**\n * SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.\n */\nexport interface SecretEnvSource {\n  /**\n   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n   */\n  readonly name?: string;\n\n  /**\n   * Specify whether the Secret must be defined\n   */\n  readonly optional?: boolean;\n\n}\n\n/**\n * Handler defines a specific action that should be taken\n */\nexport interface Handler {\n  /**\n   * One and only one of the following should be specified. Exec specifies the action to take.\n   */\n  readonly exec?: ExecAction;\n\n  /**\n   * HTTPGet specifies the http request to perform.\n   */\n  readonly httpGet?: HTTPGetAction;\n\n  /**\n   * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported\n   */\n  readonly tcpSocket?: TCPSocketAction;\n\n}\n\n/**\n * ExecAction describes a \"run in container\" action.\n */\nexport interface ExecAction {\n  /**\n   * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.\n   */\n  readonly command?: string[];\n\n}\n\n/**\n * HTTPGetAction describes an action based on HTTP Get requests.\n */\nexport interface HTTPGetAction {\n  /**\n   * Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.\n   */\n  readonly host?: string;\n\n  /**\n   * Custom headers to set in the request. HTTP allows repeated headers.\n   */\n  readonly httpHeaders?: HTTPHeader[];\n\n  /**\n   * Path to access on the HTTP server.\n   */\n  readonly path?: string;\n\n  /**\n   * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n   */\n  readonly port?: IntOrString;\n\n  /**\n   * Scheme to use for connecting to the host. Defaults to HTTP.\n   * @default HTTP.\n   */\n  readonly scheme?: string;\n\n}\n\n/**\n * TCPSocketAction describes an action based on opening a socket\n */\nexport interface TCPSocketAction {\n  /**\n   * Optional: Host name to connect to, defaults to the pod IP.\n   */\n  readonly host?: string;\n\n  /**\n   * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\n   */\n  readonly port?: IntOrString;\n\n}\n\nexport class Quantity {\n  public static fromString(value: string): Quantity {\n    return new Quantity(value);\n  }\n  public static fromNumber(value: number): Quantity {\n    return new Quantity(value);\n  }\n  private constructor(value: any) {\n    Object.defineProperty(this, 'resolve', { value: () => value });\n  }\n}\n\n/**\n * Adds and removes POSIX capabilities from running containers.\n */\nexport interface Capabilities {\n  /**\n   * Added capabilities\n   */\n  readonly add?: string[];\n\n  /**\n   * Removed capabilities\n   */\n  readonly drop?: string[];\n\n}\n\n/**\n * Maps a string key to a path within a volume.\n */\nexport interface KeyToPath {\n  /**\n   * The key to project.\n   */\n  readonly key?: string;\n\n  /**\n   * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n   */\n  readonly mode?: number;\n\n  /**\n   * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.\n   */\n  readonly path?: string;\n\n}\n\n/**\n * DownwardAPIVolumeFile represents information to create the file containing the pod field\n */\nexport interface DownwardAPIVolumeFile {\n  /**\n   * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.\n   */\n  readonly fieldRef?: ObjectFieldSelector;\n\n  /**\n   * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.\n   */\n  readonly mode?: number;\n\n  /**\n   * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'\n   */\n  readonly path?: string;\n\n  /**\n   * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.\n   */\n  readonly resourceFieldRef?: ResourceFieldSelector;\n\n}\n\n/**\n * Projection that may be projected along with other supported volume types\n */\nexport interface VolumeProjection {\n  /**\n   * information about the configMap data to project\n   */\n  readonly configMap?: ConfigMapProjection;\n\n  /**\n   * information about the downwardAPI data to project\n   */\n  readonly downwardAPI?: DownwardAPIProjection;\n\n  /**\n   * information about the secret data to project\n   */\n  readonly secret?: SecretProjection;\n\n  /**\n   * information about the serviceAccountToken data to project\n   */\n  readonly serviceAccountToken?: ServiceAccountTokenProjection;\n\n}\n\n/**\n * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.\n */\nexport interface NodeSelectorTerm {\n  /**\n   * A list of node selector requirements by node's labels.\n   */\n  readonly matchExpressions?: NodeSelectorRequirement[];\n\n  /**\n   * A list of node selector requirements by node's fields.\n   */\n  readonly matchFields?: NodeSelectorRequirement[];\n\n}\n\n/**\n * Selects a key from a ConfigMap.\n */\nexport interface ConfigMapKeySelector {\n  /**\n   * The key to select.\n   */\n  readonly key?: string;\n\n  /**\n   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n   */\n  readonly name?: string;\n\n  /**\n   * Specify whether the ConfigMap or it's key must be defined\n   */\n  readonly optional?: boolean;\n\n}\n\n/**\n * ObjectFieldSelector selects an APIVersioned field of an object.\n */\nexport interface ObjectFieldSelector {\n  /**\n   * Version of the schema the FieldPath is written in terms of, defaults to \"v1\".\n   */\n  readonly apiVersion?: string;\n\n  /**\n   * Path of the field to select in the specified API version.\n   */\n  readonly fieldPath?: string;\n\n}\n\n/**\n * ResourceFieldSelector represents container resources (cpu, memory) and their output format\n */\nexport interface ResourceFieldSelector {\n  /**\n   * Container name: required for volumes, optional for env vars\n   */\n  readonly containerName?: string;\n\n  /**\n   * Specifies the output format of the exposed resources, defaults to \"1\"\n   */\n  readonly divisor?: Quantity;\n\n  /**\n   * Required: resource to select\n   */\n  readonly resource?: string;\n\n}\n\n/**\n * SecretKeySelector selects a key of a Secret.\n */\nexport interface SecretKeySelector {\n  /**\n   * The key of the secret to select from.  Must be a valid secret key.\n   */\n  readonly key?: string;\n\n  /**\n   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n   */\n  readonly name?: string;\n\n  /**\n   * Specify whether the Secret or it's key must be defined\n   */\n  readonly optional?: boolean;\n\n}\n\n/**\n * HTTPHeader describes a custom header to be used in HTTP probes\n */\nexport interface HTTPHeader {\n  /**\n   * The header field name\n   */\n  readonly name?: string;\n\n  /**\n   * The header field value\n   */\n  readonly value?: string;\n\n}\n\n/**\n * Adapts a ConfigMap into a projected volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.\n */\nexport interface ConfigMapProjection {\n  /**\n   * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.\n   */\n  readonly items?: KeyToPath[];\n\n  /**\n   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n   */\n  readonly name?: string;\n\n  /**\n   * Specify whether the ConfigMap or it's keys must be defined\n   */\n  readonly optional?: boolean;\n\n}\n\n/**\n * Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.\n */\nexport interface DownwardAPIProjection {\n  /**\n   * Items is a list of DownwardAPIVolume file\n   */\n  readonly items?: DownwardAPIVolumeFile[];\n\n}\n\n/**\n * Adapts a secret into a projected volume.\n\nThe contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.\n */\nexport interface SecretProjection {\n  /**\n   * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.\n   */\n  readonly items?: KeyToPath[];\n\n  /**\n   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n   */\n  readonly name?: string;\n\n  /**\n   * Specify whether the Secret or its key must be defined\n   */\n  readonly optional?: boolean;\n\n}\n\n/**\n * ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).\n */\nexport interface ServiceAccountTokenProjection {\n  /**\n   * Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.\n   */\n  readonly audience?: string;\n\n  /**\n   * ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.\n   * @default 1 hour and must be at least 10 minutes.\n   */\n  readonly expirationSeconds?: number;\n\n  /**\n   * Path is the path relative to the mount point of the file to project the token into.\n   */\n  readonly path?: string;\n\n}\n\n/**\n * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\n */\nexport interface NodeSelectorRequirement {\n  /**\n   * The label key that the selector applies to.\n   */\n  readonly key?: string;\n\n  /**\n   * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\n   */\n  readonly operator?: string;\n\n  /**\n   * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\n   */\n  readonly values?: string[];\n\n}\n\n"]}