"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
const fs_1 = require("fs");
const path = require("path");
testWithFixture('fixture1', {
    sscaff: 'here',
    here: 'sscaff'
});
testWithFixture('fixture2', {
    boom: '_boom_'
});
testWithFixture('fixture3', {
    name: 'oliver'
});
testWithFixture('fixture4');
async function testWithFixture(fixture, variables) {
    test(fixture, async () => {
        const input = path.join(__dirname, fixture);
        const expected = path.join(__dirname, `${fixture}.expected`);
        const actual = await fs_1.promises.mkdtemp('/tmp/sscaff-test');
        const outdir = path.join(actual, 'myproject');
        await __1.sscaff(input, outdir, variables);
        try {
            await expectDirsEqual(actual, expected, ['.hooks.sscaff.js']);
        }
        catch (e) {
            console.log(`\nto update:\n  rsync --delete -av ${actual}/ ${expected}/`);
            throw e;
        }
    });
}
async function expectDirsEqual(left, right, exclude = []) {
    const leftFiles = (await fs_1.promises.readdir(left)).sort().filter(x => !exclude.includes(x));
    const rightFiles = (await fs_1.promises.readdir(right)).sort().filter(x => !exclude.includes(x));
    expect(leftFiles).toEqual(rightFiles);
    for (const file of leftFiles) {
        const leftFile = path.join(left, file);
        const rightFile = path.join(right, file);
        const leftIsDirectory = (await fs_1.promises.stat(leftFile)).isDirectory();
        const rightIsDirectory = (await fs_1.promises.stat(rightFile)).isDirectory();
        expect(leftIsDirectory).toEqual(rightIsDirectory);
        if (leftIsDirectory) {
            await expectDirsEqual(leftFile, rightFile);
            continue;
        }
        const leftContents = await fs_1.promises.readFile(leftFile, 'utf-8');
        const rightContents = await fs_1.promises.readFile(rightFile, 'utf-8');
        expect(leftContents).toEqual(rightContents);
    }
}
