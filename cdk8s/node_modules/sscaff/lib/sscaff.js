"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path = require("path");
const substitute_1 = require("./substitute");
const hooksFile = `.hooks.sscaff.js`;
/**
 * Copy all files from `templateDir` to `targetDir` and substitute all variables
 * in file names and their contents. Substitutions take the form `{{ key }}`.
 *
 * @param sourceDir
 * @param targetDir
 * @param variables
 */
async function sscaff(sourceDir, targetDir, variables = {}) {
    sourceDir = path.resolve(sourceDir);
    targetDir = path.resolve(targetDir);
    await fs_1.promises.mkdir(targetDir, { recursive: true });
    const hooks = loadHooks();
    if (!variables.$base) {
        variables.$base = path.basename(targetDir);
    }
    const restore = process.cwd();
    try {
        process.chdir(targetDir);
        await executePreHook();
        await processDirectory('.');
        await executePostHook();
    }
    finally {
        process.chdir(restore);
    }
    async function processDirectory(subdir) {
        const subPath = path.join(sourceDir, subdir);
        for (const file of await fs_1.promises.readdir(subPath)) {
            if (file === hooksFile) {
                continue;
            }
            const sourcePath = path.join(subPath, file);
            if ((await fs_1.promises.stat(sourcePath)).isDirectory()) {
                await processDirectory(path.join(subdir, file));
                continue;
            }
            const targetPath = substitute_1.substitute(path.join(subdir, file), variables);
            const input = await fs_1.promises.readFile(sourcePath, 'utf-8');
            const output = substitute_1.substitute(input, variables);
            await fs_1.promises.mkdir(path.dirname(targetPath), { recursive: true });
            await fs_1.promises.writeFile(targetPath, output);
        }
    }
    async function executePreHook() {
        if (!(hooks === null || hooks === void 0 ? void 0 : hooks.pre)) {
            return;
        }
        await Promise.resolve(hooks.pre(variables));
    }
    async function executePostHook() {
        if (!(hooks === null || hooks === void 0 ? void 0 : hooks.post)) {
            return;
        }
        await Promise.resolve(hooks.post(variables));
    }
    function loadHooks() {
        try {
            return require(path.join(sourceDir, hooksFile));
        }
        catch (_a) {
            return undefined;
        }
    }
}
exports.sscaff = sscaff;
