"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const https = require("https");
const fs_1 = require("fs");
const codegen_constructs_1 = require("../lib/codegen-constructs");
const codemaker_1 = require("codemaker");
async function generateAllApiObjects(outdir, options) {
    const code = new codemaker_1.CodeMaker();
    code.indentation = 2;
    const schema = await downloadSchema(options.apiVersion);
    const topLevelObjects = codegen_constructs_1.findApiObjectDefinitions(schema);
    for (const o of topLevelObjects) {
        codegen_constructs_1.emitConstructForApiObject(code, schema, o);
    }
    await fs_1.promises.mkdir(outdir, { recursive: true });
    await code.save(outdir);
}
exports.generateAllApiObjects = generateAllApiObjects;
async function downloadSchema(apiVersion) {
    const output = await httpsGet(`https://kubernetesjsonschema.dev/v${apiVersion}/_definitions.json`);
    return JSON.parse(output);
}
async function httpsGet(url) {
    return new Promise((ok, ko) => {
        const req = https.get(url, res => {
            const data = new Array();
            res.on('data', chunk => data.push(chunk));
            res.once('end', () => ok(Buffer.concat(data).toString('utf-8')));
            res.once('error', ko);
        });
        req.once('error', ko);
        req.end();
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wb3J0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW1wb3J0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQStCO0FBQy9CLDJCQUE4QjtBQUM5QixrRUFBZ0c7QUFDaEcseUNBQXNDO0FBTy9CLEtBQUssVUFBVSxxQkFBcUIsQ0FBQyxNQUFjLEVBQUUsT0FBZ0I7SUFDMUUsTUFBTSxJQUFJLEdBQUcsSUFBSSxxQkFBUyxFQUFFLENBQUM7SUFDN0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7SUFFckIsTUFBTSxNQUFNLEdBQUcsTUFBTSxjQUFjLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3hELE1BQU0sZUFBZSxHQUFHLDZDQUF3QixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRXpELEtBQUssTUFBTSxDQUFDLElBQUksZUFBZSxFQUFFO1FBQy9CLDhDQUF5QixDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDNUM7SUFFRCxNQUFNLGFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDbEQsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzFCLENBQUM7QUFiRCxzREFhQztBQUVELEtBQUssVUFBVSxjQUFjLENBQUMsVUFBa0I7SUFDOUMsTUFBTSxNQUFNLEdBQUcsTUFBTSxRQUFRLENBQUMscUNBQXFDLFVBQVUsb0JBQW9CLENBQUMsQ0FBQztJQUNuRyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFnQixDQUFDO0FBQzNDLENBQUM7QUFFRCxLQUFLLFVBQVUsUUFBUSxDQUFDLEdBQVc7SUFDakMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRTtRQUM1QixNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRTtZQUMvQixNQUFNLElBQUksR0FBRyxJQUFJLEtBQUssRUFBVSxDQUFDO1lBQ2pDLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQzFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakUsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDeEIsQ0FBQyxDQUFDLENBQUM7UUFFSCxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN0QixHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDWixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBodHRwcyBmcm9tICdodHRwcyc7XG5pbXBvcnQgeyBwcm9taXNlcyB9IGZyb20gJ2ZzJztcbmltcG9ydCB7IGVtaXRDb25zdHJ1Y3RGb3JBcGlPYmplY3QsIGZpbmRBcGlPYmplY3REZWZpbml0aW9ucyB9IGZyb20gJy4uL2xpYi9jb2RlZ2VuLWNvbnN0cnVjdHMnO1xuaW1wb3J0IHsgQ29kZU1ha2VyIH0gZnJvbSAnY29kZW1ha2VyJztcbmltcG9ydCB7IEpTT05TY2hlbWE0IH0gZnJvbSAnanNvbi1zY2hlbWEnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE9wdGlvbnMge1xuICByZWFkb25seSBhcGlWZXJzaW9uOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZUFsbEFwaU9iamVjdHMob3V0ZGlyOiBzdHJpbmcsIG9wdGlvbnM6IE9wdGlvbnMpIHtcbiAgY29uc3QgY29kZSA9IG5ldyBDb2RlTWFrZXIoKTtcbiAgY29kZS5pbmRlbnRhdGlvbiA9IDI7XG5cbiAgY29uc3Qgc2NoZW1hID0gYXdhaXQgZG93bmxvYWRTY2hlbWEob3B0aW9ucy5hcGlWZXJzaW9uKTtcbiAgY29uc3QgdG9wTGV2ZWxPYmplY3RzID0gZmluZEFwaU9iamVjdERlZmluaXRpb25zKHNjaGVtYSk7XG5cbiAgZm9yIChjb25zdCBvIG9mIHRvcExldmVsT2JqZWN0cykge1xuICAgIGVtaXRDb25zdHJ1Y3RGb3JBcGlPYmplY3QoY29kZSwgc2NoZW1hLCBvKTtcbiAgfVxuXG4gIGF3YWl0IHByb21pc2VzLm1rZGlyKG91dGRpciwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG4gIGF3YWl0IGNvZGUuc2F2ZShvdXRkaXIpOyAgXG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRvd25sb2FkU2NoZW1hKGFwaVZlcnNpb246IHN0cmluZykge1xuICBjb25zdCBvdXRwdXQgPSBhd2FpdCBodHRwc0dldChgaHR0cHM6Ly9rdWJlcm5ldGVzanNvbnNjaGVtYS5kZXYvdiR7YXBpVmVyc2lvbn0vX2RlZmluaXRpb25zLmpzb25gKTtcbiAgcmV0dXJuIEpTT04ucGFyc2Uob3V0cHV0KSBhcyBKU09OU2NoZW1hNDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gaHR0cHNHZXQodXJsOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKG9rLCBrbykgPT4ge1xuICAgIGNvbnN0IHJlcSA9IGh0dHBzLmdldCh1cmwsIHJlcyA9PiB7XG4gICAgICBjb25zdCBkYXRhID0gbmV3IEFycmF5PEJ1ZmZlcj4oKTtcbiAgICAgIHJlcy5vbignZGF0YScsIGNodW5rID0+IGRhdGEucHVzaChjaHVuaykpO1xuICAgICAgcmVzLm9uY2UoJ2VuZCcsICgpID0+IG9rKEJ1ZmZlci5jb25jYXQoZGF0YSkudG9TdHJpbmcoJ3V0Zi04JykpKTtcbiAgICAgIHJlcy5vbmNlKCdlcnJvcicsIGtvKTtcbiAgICB9KTtcblxuICAgIHJlcS5vbmNlKCdlcnJvcicsIGtvKTtcbiAgICByZXEuZW5kKCk7XG4gIH0pO1xufVxuIl19