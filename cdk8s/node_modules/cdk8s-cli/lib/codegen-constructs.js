"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const codegen_types_1 = require("./codegen-types");
exports.X_GROUP_VERSION_KIND = 'x-kubernetes-group-version-kind';
/**
 * Generates a construct for an API object defined by `def`.
 */
function emitConstructForApiObject(code, schema, def) {
    var _a;
    const objectNames = def[exports.X_GROUP_VERSION_KIND];
    if (!objectNames) {
        throw new Error(`object must include a ${exports.X_GROUP_VERSION_KIND} key`);
    }
    const objectName = objectNames[0];
    if (!objectName) {
        throw new Error(`no object name`);
    }
    const groupPrefix = objectName.group ? `${objectName.group.toLocaleLowerCase().replace(/\./g, '-')}-` : '';
    const baseName = `${groupPrefix}${objectName.kind.toLocaleLowerCase()}-${objectName.version.toLocaleLowerCase()}`;
    if (!((_a = def.properties) === null || _a === void 0 ? void 0 : _a.metadata)) {
        console.error(`warning: no "metadata", skipping ${baseName}`);
        return;
    }
    const sourceFile = `${baseName}.ts`;
    const optionsStructName = `${objectName.kind}Options`;
    const typeGenerator = new codegen_types_1.TypeGenerator(schema);
    emitFile();
    function emitFile() {
        code.openFile(sourceFile);
        code.line(`// generated by cdk8s`);
        code.line();
        code.line(`import { ApiObject } from 'cdk8s';`);
        code.line(`import { Construct } from '@aws-cdk/core';`);
        code.line();
        emitOptionsStruct();
        code.line();
        emitConstruct();
        code.line();
        typeGenerator.generate(code);
        code.closeFile(sourceFile);
    }
    function emitOptionsStruct() {
        const copy = { ...def };
        copy.properties = copy.properties || {};
        delete copy.properties.apiVersion;
        delete copy.properties.kind;
        delete copy.properties.status;
        typeGenerator.addType(optionsStructName, copy);
    }
    function emitConstruct() {
        var _a;
        code.line('/**');
        code.line(` * ${(_a = def) === null || _a === void 0 ? void 0 : _a.description}`);
        code.line(` */`);
        code.openBlock(`export class ${objectName.kind} extends ApiObject`);
        emitInitializer();
        code.closeBlock();
    }
    function emitInitializer() {
        code.openBlock(`public constructor(scope: Construct, ns: string, options: ${optionsStructName})`);
        emitInitializerSuper();
        code.closeBlock();
    }
    function emitInitializerSuper() {
        const groupPrefix = objectName.group ? `${objectName.group}/` : '';
        code.open(`super(scope, ns, {`);
        code.line(`...options,`);
        code.line(`kind: '${objectName.kind}',`);
        code.line(`apiVersion: '${groupPrefix}${objectName.version}',`);
        code.close(`});`);
    }
}
exports.emitConstructForApiObject = emitConstructForApiObject;
/**
 * Returns all schema definitions for API objects (objects that have the 'x-kubernetes-group-version-kind' annotation)
 */
function findApiObjectDefinitions(schema) {
    const result = new Array();
    for (const def of Object.values(schema.definitions || {})) {
        const kinds = def[exports.X_GROUP_VERSION_KIND];
        if (!kinds) {
            continue;
        }
        result.push(def);
    }
    return result;
}
exports.findApiObjectDefinitions = findApiObjectDefinitions;
//# sourceMappingURL=data:application/json;base64,