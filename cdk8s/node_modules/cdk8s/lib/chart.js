"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@aws-cdk/core");
const fs = require("fs");
const path = require("path");
const api_object_1 = require("./api-object");
const YAML = require("yaml");
const _tokens_1 = require("./_tokens");
const _util_1 = require("./_util");
const names_1 = require("./names");
class Chart extends core_1.Construct {
    constructor(scope, ns) {
        super(scope, ns);
        this.manifestFile = `${this.node.uniqueId}.k8s.yaml`;
    }
    /**
     * Finds the chart in which a node is defined.
     * @param node a construct node
     */
    static of(node) {
        if (node instanceof Chart) {
            return node;
        }
        const parent = node.node.scope;
        if (!parent) {
            throw new Error(`cannot find a parent chart (directly or indirectly)`);
        }
        return Chart.of(parent);
    }
    /**
     * Generates a app-unique name for an object given it's construct node path.
     *
     * Different resource types may have different constraints on names
     * (`metadata.name`). The previous version of the name generator was
     * compatible with DNS_SUBDOMAIN but not with DNS_LABEL.
     *
     * For example, `Deployment` names must comply with DNS_SUBDOMAIN while
     * `Service` names must comply with DNS_LABEL.
     *
     * Since there is no formal specification for this, the default name
     * generation scheme for kubernetes objects in cdk8s was changed to DNS_LABEL,
     * since itâ€™s the common denominator for all kubernetes resources
     * (supposedly).
     *
     * You can override this method if you wish to customize object names at the
     * chart level.
     *
     * @param apiObject The API object to generate a name for.
     */
    generateObjectName(apiObject) {
        return names_1.Names.toDnsLabel(apiObject.node.path);
    }
    synthesize(session) {
        const resources = new Array();
        for (const resource of this.node.findAll()) {
            if (!(resource instanceof api_object_1.ApiObject)) {
                continue;
            }
            const manifest = _util_1.removeEmpty(_tokens_1.resolve(this, resource._render()));
            resources.push(manifest);
        }
        // convert each resource to yaml and separate with a '---' line
        const doc = resources.map(r => toYaml(r)).join('---\n');
        fs.writeFileSync(path.join(session.assembly.outdir, this.manifestFile), doc);
    }
}
exports.Chart = Chart;
function toYaml(o) {
    // lose anchors which are based on reference equality
    const x = JSON.parse(JSON.stringify(o));
    return YAML.stringify(x);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjaGFydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHdDQUE2RDtBQUM3RCx5QkFBeUI7QUFDekIsNkJBQTZCO0FBQzdCLDZDQUF5QztBQUN6Qyw2QkFBNkI7QUFDN0IsdUNBQW9DO0FBQ3BDLG1DQUFzQztBQUN0QyxtQ0FBZ0M7QUFFaEMsTUFBYSxLQUFNLFNBQVEsZ0JBQVM7SUF5QmxDLFlBQVksS0FBZ0IsRUFBRSxFQUFVO1FBQ3RDLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLFlBQVksR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxXQUFXLENBQUM7SUFDdkQsQ0FBQztJQTFCRDs7O09BR0c7SUFDSSxNQUFNLENBQUMsRUFBRSxDQUFDLElBQWU7UUFDOUIsSUFBSSxJQUFJLFlBQVksS0FBSyxFQUFFO1lBQ3pCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQWtCLENBQUM7UUFDNUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNYLE1BQU0sSUFBSSxLQUFLLENBQUMscURBQXFELENBQUMsQ0FBQztTQUN4RTtRQUVELE9BQU8sS0FBSyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBYUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FtQkc7SUFDSSxrQkFBa0IsQ0FBQyxTQUFvQjtRQUM1QyxPQUFPLGFBQUssQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRVMsVUFBVSxDQUFDLE9BQTBCO1FBQzdDLE1BQU0sU0FBUyxHQUFHLElBQUksS0FBSyxFQUFPLENBQUM7UUFFbkMsS0FBSyxNQUFNLFFBQVEsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQzFDLElBQUksQ0FBQyxDQUFDLFFBQVEsWUFBWSxzQkFBUyxDQUFDLEVBQUU7Z0JBQ3BDLFNBQVM7YUFDVjtZQUVELE1BQU0sUUFBUSxHQUFHLG1CQUFXLENBQUMsaUJBQU8sQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNoRSxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQzFCO1FBRUQsK0RBQStEO1FBQy9ELE1BQU0sR0FBRyxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDeEQsRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMvRSxDQUFDO0NBQ0Y7QUF0RUQsc0JBc0VDO0FBRUQsU0FBUyxNQUFNLENBQUMsQ0FBTTtJQUNwQixxREFBcUQ7SUFDckQsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEMsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzNCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QsIElTeW50aGVzaXNTZXNzaW9uIH0gZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgQXBpT2JqZWN0IH0gZnJvbSAnLi9hcGktb2JqZWN0JztcbmltcG9ydCAqIGFzIFlBTUwgZnJvbSAneWFtbCc7XG5pbXBvcnQgeyByZXNvbHZlIH0gZnJvbSAnLi9fdG9rZW5zJztcbmltcG9ydCB7IHJlbW92ZUVtcHR5IH0gZnJvbSAnLi9fdXRpbCc7XG5pbXBvcnQgeyBOYW1lcyB9IGZyb20gJy4vbmFtZXMnO1xuXG5leHBvcnQgY2xhc3MgQ2hhcnQgZXh0ZW5kcyBDb25zdHJ1Y3Qge1xuXG4gIC8qKlxuICAgKiBGaW5kcyB0aGUgY2hhcnQgaW4gd2hpY2ggYSBub2RlIGlzIGRlZmluZWQuXG4gICAqIEBwYXJhbSBub2RlIGEgY29uc3RydWN0IG5vZGVcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgb2Yobm9kZTogQ29uc3RydWN0KTogQ2hhcnQge1xuICAgIGlmIChub2RlIGluc3RhbmNlb2YgQ2hhcnQpIHtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cblxuICAgIGNvbnN0IHBhcmVudCA9IG5vZGUubm9kZS5zY29wZSBhcyBDb25zdHJ1Y3Q7XG4gICAgaWYgKCFwYXJlbnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgY2Fubm90IGZpbmQgYSBwYXJlbnQgY2hhcnQgKGRpcmVjdGx5IG9yIGluZGlyZWN0bHkpYCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIENoYXJ0Lm9mKHBhcmVudCk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIHN0YWNrJ3MgWUFNTCBmaWxlIGFzIGVtaXR0ZWQgaW50byB0aGUgY2xvdWQgYXNzZW1ibHlcbiAgICogZGlyZWN0b3J5IGR1cmluZyBzeW50aGVzaXMuXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgbWFuaWZlc3RGaWxlOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgbnM6IHN0cmluZykge1xuICAgIHN1cGVyKHNjb3BlLCBucyk7XG4gICAgdGhpcy5tYW5pZmVzdEZpbGUgPSBgJHt0aGlzLm5vZGUudW5pcXVlSWR9Lms4cy55YW1sYDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBhcHAtdW5pcXVlIG5hbWUgZm9yIGFuIG9iamVjdCBnaXZlbiBpdCdzIGNvbnN0cnVjdCBub2RlIHBhdGguXG4gICAqXG4gICAqIERpZmZlcmVudCByZXNvdXJjZSB0eXBlcyBtYXkgaGF2ZSBkaWZmZXJlbnQgY29uc3RyYWludHMgb24gbmFtZXNcbiAgICogKGBtZXRhZGF0YS5uYW1lYCkuIFRoZSBwcmV2aW91cyB2ZXJzaW9uIG9mIHRoZSBuYW1lIGdlbmVyYXRvciB3YXNcbiAgICogY29tcGF0aWJsZSB3aXRoIEROU19TVUJET01BSU4gYnV0IG5vdCB3aXRoIEROU19MQUJFTC5cbiAgICpcbiAgICogRm9yIGV4YW1wbGUsIGBEZXBsb3ltZW50YCBuYW1lcyBtdXN0IGNvbXBseSB3aXRoIEROU19TVUJET01BSU4gd2hpbGVcbiAgICogYFNlcnZpY2VgIG5hbWVzIG11c3QgY29tcGx5IHdpdGggRE5TX0xBQkVMLlxuICAgKlxuICAgKiBTaW5jZSB0aGVyZSBpcyBubyBmb3JtYWwgc3BlY2lmaWNhdGlvbiBmb3IgdGhpcywgdGhlIGRlZmF1bHQgbmFtZVxuICAgKiBnZW5lcmF0aW9uIHNjaGVtZSBmb3Iga3ViZXJuZXRlcyBvYmplY3RzIGluIGNkazhzIHdhcyBjaGFuZ2VkIHRvIEROU19MQUJFTCxcbiAgICogc2luY2UgaXTigJlzIHRoZSBjb21tb24gZGVub21pbmF0b3IgZm9yIGFsbCBrdWJlcm5ldGVzIHJlc291cmNlc1xuICAgKiAoc3VwcG9zZWRseSkuXG4gICAqXG4gICAqIFlvdSBjYW4gb3ZlcnJpZGUgdGhpcyBtZXRob2QgaWYgeW91IHdpc2ggdG8gY3VzdG9taXplIG9iamVjdCBuYW1lcyBhdCB0aGVcbiAgICogY2hhcnQgbGV2ZWwuXG4gICAqXG4gICAqIEBwYXJhbSBhcGlPYmplY3QgVGhlIEFQSSBvYmplY3QgdG8gZ2VuZXJhdGUgYSBuYW1lIGZvci5cbiAgICovXG4gIHB1YmxpYyBnZW5lcmF0ZU9iamVjdE5hbWUoYXBpT2JqZWN0OiBBcGlPYmplY3QpIHtcbiAgICByZXR1cm4gTmFtZXMudG9EbnNMYWJlbChhcGlPYmplY3Qubm9kZS5wYXRoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzeW50aGVzaXplKHNlc3Npb246IElTeW50aGVzaXNTZXNzaW9uKSB7XG4gICAgY29uc3QgcmVzb3VyY2VzID0gbmV3IEFycmF5PGFueT4oKTtcblxuICAgIGZvciAoY29uc3QgcmVzb3VyY2Ugb2YgdGhpcy5ub2RlLmZpbmRBbGwoKSkge1xuICAgICAgaWYgKCEocmVzb3VyY2UgaW5zdGFuY2VvZiBBcGlPYmplY3QpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBtYW5pZmVzdCA9IHJlbW92ZUVtcHR5KHJlc29sdmUodGhpcywgcmVzb3VyY2UuX3JlbmRlcigpKSk7XG4gICAgICByZXNvdXJjZXMucHVzaChtYW5pZmVzdCk7XG4gICAgfVxuXG4gICAgLy8gY29udmVydCBlYWNoIHJlc291cmNlIHRvIHlhbWwgYW5kIHNlcGFyYXRlIHdpdGggYSAnLS0tJyBsaW5lXG4gICAgY29uc3QgZG9jID0gcmVzb3VyY2VzLm1hcChyID0+IHRvWWFtbChyKSkuam9pbignLS0tXFxuJyk7XG4gICAgZnMud3JpdGVGaWxlU3luYyhwYXRoLmpvaW4oc2Vzc2lvbi5hc3NlbWJseS5vdXRkaXIsIHRoaXMubWFuaWZlc3RGaWxlKSwgZG9jKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0b1lhbWwobzogYW55KSB7XG4gIC8vIGxvc2UgYW5jaG9ycyB3aGljaCBhcmUgYmFzZWQgb24gcmVmZXJlbmNlIGVxdWFsaXR5XG4gIGNvbnN0IHggPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG8pKTtcbiAgcmV0dXJuIFlBTUwuc3RyaW5naWZ5KHgpO1xufVxuIl19